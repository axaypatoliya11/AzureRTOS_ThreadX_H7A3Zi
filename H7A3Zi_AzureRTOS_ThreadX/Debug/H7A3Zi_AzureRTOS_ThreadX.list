
H7A3Zi_AzureRTOS_ThreadX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f64  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007298  08007298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080072a0  080072a0  000172a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080072a4  080072a4  000172a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001cc  24000000  080072a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000014f4  240001cc  08007474  000201cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240016c0  08007474  000216c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b15c  00000000  00000000  000201fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000068da  00000000  00000000  0005b356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000013c0  00000000  00000000  00061c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000010e0  00000000  00000000  00062ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033ffa  00000000  00000000  000640d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001f7af  00000000  00000000  000980ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00145933  00000000  00000000  000b7879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001fd1ac  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000048bc  00000000  00000000  001fd200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240001cc 	.word	0x240001cc
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080071fc 	.word	0x080071fc

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240001d0 	.word	0x240001d0
 80002ec:	080071fc 	.word	0x080071fc

080002f0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002f0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002f2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002f6:	4919      	ldr	r1, [pc, #100]	; (800035c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002f8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002fc:	4818      	ldr	r0, [pc, #96]	; (8000360 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002fe:	4917      	ldr	r1, [pc, #92]	; (800035c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000300:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000302:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000304:	4817      	ldr	r0, [pc, #92]	; (8000364 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000306:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000308:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800030c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800030e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000312:	4915      	ldr	r1, [pc, #84]	; (8000368 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000314:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000316:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800031a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800031c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000320:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000324:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000328:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800032c:	490f      	ldr	r1, [pc, #60]	; (800036c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800032e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000332:	4770      	bx	lr

08000334 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000334:	f7ff bffe 	b.w	8000334 <__tx_BadHandler>

08000338 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000338:	f7ff bffe 	b.w	8000338 <__tx_HardfaultHandler>

0800033c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800033c:	f7ff bffe 	b.w	800033c <__tx_SVCallHandler>

08000340 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000340:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000342:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000346:	4770      	bx	lr

08000348 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000348:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800034a:	f000 f891 	bl	8000470 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800034e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000352:	4770      	bx	lr

08000354 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000354:	f7ff bffe 	b.w	8000354 <__tx_NMIHandler>

08000358 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000358:	f7ff bffe 	b.w	8000358 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800035c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000360:	24001144 	.word	0x24001144
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000364:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000368:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800036c:	40ff0000 	.word	0x40ff0000

08000370 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000370:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000374:	4a2a      	ldr	r2, [pc, #168]	; (8000420 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000376:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000378:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800037c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000380:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000384:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000386:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800038a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800038e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000392:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000396:	f3bf 8f6f 	isb	sy

0800039a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800039a:	e7fe      	b.n	800039a <__tx_wait_here>

0800039c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800039c:	4821      	ldr	r0, [pc, #132]	; (8000424 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800039e:	4a22      	ldr	r2, [pc, #136]	; (8000428 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80003a0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80003a4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80003a6:	b191      	cbz	r1, 80003ce <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80003a8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80003aa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80003ae:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003b2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003b6:	d101      	bne.n	80003bc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003b8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003bc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003bc:	4c1b      	ldr	r4, [pc, #108]	; (800042c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003be:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003c2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003c4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003c8:	b10d      	cbz	r5, 80003ce <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ca:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003cc:	6023      	str	r3, [r4, #0]

080003ce <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80003ce:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003d0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003d2:	b1b1      	cbz	r1, 8000402 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003d4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80003d6:	b662      	cpsie	i

080003d8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003d8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003da:	4c14      	ldr	r4, [pc, #80]	; (800042c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003dc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003de:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003e2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003e4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003e6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003ea:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003ee:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003f2:	d101      	bne.n	80003f8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003f4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003f8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003f8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003fc:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000400:	4770      	bx	lr

08000402 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000402:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000404:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000406:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000408:	b909      	cbnz	r1, 800040e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800040c:	e7f9      	b.n	8000402 <__tx_ts_wait>

0800040e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800040e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000412:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000416:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800041a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800041c:	e7dc      	b.n	80003d8 <__tx_ts_restore>

0800041e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800041e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000420:	24001148 	.word	0x24001148
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000424:	2400114c 	.word	0x2400114c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000428:	24001150 	.word	0x24001150
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800042c:	240011e4 	.word	0x240011e4

08000430 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000430:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000432:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000436:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800043a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800043e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000440:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000444:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000446:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000448:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800044a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800044c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800044e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000450:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000452:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000454:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000456:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000458:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800045c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000462:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000464:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000466:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800046a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800046c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800046e:	4770      	bx	lr

08000470 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000470:	4922      	ldr	r1, [pc, #136]	; (80004fc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000472:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000474:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000478:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800047c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800047e:	b13a      	cbz	r2, 8000490 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000480:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000484:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000486:	b91a      	cbnz	r2, 8000490 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800048a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800048e:	6018      	str	r0, [r3, #0]

08000490 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	491d      	ldr	r1, [pc, #116]	; (8000508 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000492:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000494:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000496:	b122      	cbz	r2, 80004a2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800049a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800049e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80004a0:	e008      	b.n	80004b4 <__tx_timer_done>

080004a2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80004a2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80004a8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80004aa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80004ac:	d101      	bne.n	80004b2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004ae:	4b19      	ldr	r3, [pc, #100]	; (8000514 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004b0:	6818      	ldr	r0, [r3, #0]

080004b2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004b2:	6008      	str	r0, [r1, #0]

080004b4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004b6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004b8:	b912      	cbnz	r2, 80004c0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004ba:	4914      	ldr	r1, [pc, #80]	; (800050c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004bc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004be:	b1d0      	cbz	r0, 80004f6 <__tx_timer_nothing_expired>

080004c0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004c0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004c4:	4911      	ldr	r1, [pc, #68]	; (800050c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004c6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004c8:	b108      	cbz	r0, 80004ce <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ca:	f006 f9ad 	bl	8006828 <_tx_timer_expiration_process>

080004ce <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004d0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004d2:	b172      	cbz	r2, 80004f2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004d4:	f006 f91a 	bl	800670c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004d8:	480f      	ldr	r0, [pc, #60]	; (8000518 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004da:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004dc:	b949      	cbnz	r1, 80004f2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004de:	480f      	ldr	r0, [pc, #60]	; (800051c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004e0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004e4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004e6:	480f      	ldr	r0, [pc, #60]	; (8000524 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004ec:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004ee:	d000      	beq.n	80004f2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004f0:	6002      	str	r2, [r0, #0]

080004f2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004f6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004f6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004fa:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004fc:	240016bc 	.word	0x240016bc
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000500:	240011e4 	.word	0x240011e4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000504:	240016b8 	.word	0x240016b8
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000508:	2400115c 	.word	0x2400115c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800050c:	240011e0 	.word	0x240011e0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000510:	240011ec 	.word	0x240011ec
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000514:	240012a4 	.word	0x240012a4
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000518:	24001148 	.word	0x24001148
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800051c:	2400114c 	.word	0x2400114c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000520:	24001150 	.word	0x24001150
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000524:	e000ed04 	.word	0xe000ed04

08000528 <strlen>:
 8000528:	4603      	mov	r3, r0
 800052a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800052e:	2a00      	cmp	r2, #0
 8000530:	d1fb      	bne.n	800052a <strlen+0x2>
 8000532:	1a18      	subs	r0, r3, r0
 8000534:	3801      	subs	r0, #1
 8000536:	4770      	bx	lr

08000538 <__aeabi_uldivmod>:
 8000538:	b953      	cbnz	r3, 8000550 <__aeabi_uldivmod+0x18>
 800053a:	b94a      	cbnz	r2, 8000550 <__aeabi_uldivmod+0x18>
 800053c:	2900      	cmp	r1, #0
 800053e:	bf08      	it	eq
 8000540:	2800      	cmpeq	r0, #0
 8000542:	bf1c      	itt	ne
 8000544:	f04f 31ff 	movne.w	r1, #4294967295
 8000548:	f04f 30ff 	movne.w	r0, #4294967295
 800054c:	f000 b96e 	b.w	800082c <__aeabi_idiv0>
 8000550:	f1ad 0c08 	sub.w	ip, sp, #8
 8000554:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000558:	f000 f806 	bl	8000568 <__udivmoddi4>
 800055c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000564:	b004      	add	sp, #16
 8000566:	4770      	bx	lr

08000568 <__udivmoddi4>:
 8000568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800056c:	9d08      	ldr	r5, [sp, #32]
 800056e:	4604      	mov	r4, r0
 8000570:	468c      	mov	ip, r1
 8000572:	2b00      	cmp	r3, #0
 8000574:	f040 8083 	bne.w	800067e <__udivmoddi4+0x116>
 8000578:	428a      	cmp	r2, r1
 800057a:	4617      	mov	r7, r2
 800057c:	d947      	bls.n	800060e <__udivmoddi4+0xa6>
 800057e:	fab2 f282 	clz	r2, r2
 8000582:	b142      	cbz	r2, 8000596 <__udivmoddi4+0x2e>
 8000584:	f1c2 0020 	rsb	r0, r2, #32
 8000588:	fa24 f000 	lsr.w	r0, r4, r0
 800058c:	4091      	lsls	r1, r2
 800058e:	4097      	lsls	r7, r2
 8000590:	ea40 0c01 	orr.w	ip, r0, r1
 8000594:	4094      	lsls	r4, r2
 8000596:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800059a:	0c23      	lsrs	r3, r4, #16
 800059c:	fbbc f6f8 	udiv	r6, ip, r8
 80005a0:	fa1f fe87 	uxth.w	lr, r7
 80005a4:	fb08 c116 	mls	r1, r8, r6, ip
 80005a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005ac:	fb06 f10e 	mul.w	r1, r6, lr
 80005b0:	4299      	cmp	r1, r3
 80005b2:	d909      	bls.n	80005c8 <__udivmoddi4+0x60>
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80005ba:	f080 8119 	bcs.w	80007f0 <__udivmoddi4+0x288>
 80005be:	4299      	cmp	r1, r3
 80005c0:	f240 8116 	bls.w	80007f0 <__udivmoddi4+0x288>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	443b      	add	r3, r7
 80005c8:	1a5b      	subs	r3, r3, r1
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d0:	fb08 3310 	mls	r3, r8, r0, r3
 80005d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	45a6      	cmp	lr, r4
 80005de:	d909      	bls.n	80005f4 <__udivmoddi4+0x8c>
 80005e0:	193c      	adds	r4, r7, r4
 80005e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80005e6:	f080 8105 	bcs.w	80007f4 <__udivmoddi4+0x28c>
 80005ea:	45a6      	cmp	lr, r4
 80005ec:	f240 8102 	bls.w	80007f4 <__udivmoddi4+0x28c>
 80005f0:	3802      	subs	r0, #2
 80005f2:	443c      	add	r4, r7
 80005f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005f8:	eba4 040e 	sub.w	r4, r4, lr
 80005fc:	2600      	movs	r6, #0
 80005fe:	b11d      	cbz	r5, 8000608 <__udivmoddi4+0xa0>
 8000600:	40d4      	lsrs	r4, r2
 8000602:	2300      	movs	r3, #0
 8000604:	e9c5 4300 	strd	r4, r3, [r5]
 8000608:	4631      	mov	r1, r6
 800060a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060e:	b902      	cbnz	r2, 8000612 <__udivmoddi4+0xaa>
 8000610:	deff      	udf	#255	; 0xff
 8000612:	fab2 f282 	clz	r2, r2
 8000616:	2a00      	cmp	r2, #0
 8000618:	d150      	bne.n	80006bc <__udivmoddi4+0x154>
 800061a:	1bcb      	subs	r3, r1, r7
 800061c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000620:	fa1f f887 	uxth.w	r8, r7
 8000624:	2601      	movs	r6, #1
 8000626:	fbb3 fcfe 	udiv	ip, r3, lr
 800062a:	0c21      	lsrs	r1, r4, #16
 800062c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000630:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000634:	fb08 f30c 	mul.w	r3, r8, ip
 8000638:	428b      	cmp	r3, r1
 800063a:	d907      	bls.n	800064c <__udivmoddi4+0xe4>
 800063c:	1879      	adds	r1, r7, r1
 800063e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000642:	d202      	bcs.n	800064a <__udivmoddi4+0xe2>
 8000644:	428b      	cmp	r3, r1
 8000646:	f200 80e9 	bhi.w	800081c <__udivmoddi4+0x2b4>
 800064a:	4684      	mov	ip, r0
 800064c:	1ac9      	subs	r1, r1, r3
 800064e:	b2a3      	uxth	r3, r4
 8000650:	fbb1 f0fe 	udiv	r0, r1, lr
 8000654:	fb0e 1110 	mls	r1, lr, r0, r1
 8000658:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800065c:	fb08 f800 	mul.w	r8, r8, r0
 8000660:	45a0      	cmp	r8, r4
 8000662:	d907      	bls.n	8000674 <__udivmoddi4+0x10c>
 8000664:	193c      	adds	r4, r7, r4
 8000666:	f100 33ff 	add.w	r3, r0, #4294967295
 800066a:	d202      	bcs.n	8000672 <__udivmoddi4+0x10a>
 800066c:	45a0      	cmp	r8, r4
 800066e:	f200 80d9 	bhi.w	8000824 <__udivmoddi4+0x2bc>
 8000672:	4618      	mov	r0, r3
 8000674:	eba4 0408 	sub.w	r4, r4, r8
 8000678:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800067c:	e7bf      	b.n	80005fe <__udivmoddi4+0x96>
 800067e:	428b      	cmp	r3, r1
 8000680:	d909      	bls.n	8000696 <__udivmoddi4+0x12e>
 8000682:	2d00      	cmp	r5, #0
 8000684:	f000 80b1 	beq.w	80007ea <__udivmoddi4+0x282>
 8000688:	2600      	movs	r6, #0
 800068a:	e9c5 0100 	strd	r0, r1, [r5]
 800068e:	4630      	mov	r0, r6
 8000690:	4631      	mov	r1, r6
 8000692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000696:	fab3 f683 	clz	r6, r3
 800069a:	2e00      	cmp	r6, #0
 800069c:	d14a      	bne.n	8000734 <__udivmoddi4+0x1cc>
 800069e:	428b      	cmp	r3, r1
 80006a0:	d302      	bcc.n	80006a8 <__udivmoddi4+0x140>
 80006a2:	4282      	cmp	r2, r0
 80006a4:	f200 80b8 	bhi.w	8000818 <__udivmoddi4+0x2b0>
 80006a8:	1a84      	subs	r4, r0, r2
 80006aa:	eb61 0103 	sbc.w	r1, r1, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	468c      	mov	ip, r1
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d0a8      	beq.n	8000608 <__udivmoddi4+0xa0>
 80006b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80006ba:	e7a5      	b.n	8000608 <__udivmoddi4+0xa0>
 80006bc:	f1c2 0320 	rsb	r3, r2, #32
 80006c0:	fa20 f603 	lsr.w	r6, r0, r3
 80006c4:	4097      	lsls	r7, r2
 80006c6:	fa01 f002 	lsl.w	r0, r1, r2
 80006ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006ce:	40d9      	lsrs	r1, r3
 80006d0:	4330      	orrs	r0, r6
 80006d2:	0c03      	lsrs	r3, r0, #16
 80006d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80006d8:	fa1f f887 	uxth.w	r8, r7
 80006dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80006e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e4:	fb06 f108 	mul.w	r1, r6, r8
 80006e8:	4299      	cmp	r1, r3
 80006ea:	fa04 f402 	lsl.w	r4, r4, r2
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x19c>
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80006f6:	f080 808d 	bcs.w	8000814 <__udivmoddi4+0x2ac>
 80006fa:	4299      	cmp	r1, r3
 80006fc:	f240 808a 	bls.w	8000814 <__udivmoddi4+0x2ac>
 8000700:	3e02      	subs	r6, #2
 8000702:	443b      	add	r3, r7
 8000704:	1a5b      	subs	r3, r3, r1
 8000706:	b281      	uxth	r1, r0
 8000708:	fbb3 f0fe 	udiv	r0, r3, lr
 800070c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000710:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000714:	fb00 f308 	mul.w	r3, r0, r8
 8000718:	428b      	cmp	r3, r1
 800071a:	d907      	bls.n	800072c <__udivmoddi4+0x1c4>
 800071c:	1879      	adds	r1, r7, r1
 800071e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000722:	d273      	bcs.n	800080c <__udivmoddi4+0x2a4>
 8000724:	428b      	cmp	r3, r1
 8000726:	d971      	bls.n	800080c <__udivmoddi4+0x2a4>
 8000728:	3802      	subs	r0, #2
 800072a:	4439      	add	r1, r7
 800072c:	1acb      	subs	r3, r1, r3
 800072e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000732:	e778      	b.n	8000626 <__udivmoddi4+0xbe>
 8000734:	f1c6 0c20 	rsb	ip, r6, #32
 8000738:	fa03 f406 	lsl.w	r4, r3, r6
 800073c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000740:	431c      	orrs	r4, r3
 8000742:	fa20 f70c 	lsr.w	r7, r0, ip
 8000746:	fa01 f306 	lsl.w	r3, r1, r6
 800074a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800074e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000752:	431f      	orrs	r7, r3
 8000754:	0c3b      	lsrs	r3, r7, #16
 8000756:	fbb1 f9fe 	udiv	r9, r1, lr
 800075a:	fa1f f884 	uxth.w	r8, r4
 800075e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000762:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000766:	fb09 fa08 	mul.w	sl, r9, r8
 800076a:	458a      	cmp	sl, r1
 800076c:	fa02 f206 	lsl.w	r2, r2, r6
 8000770:	fa00 f306 	lsl.w	r3, r0, r6
 8000774:	d908      	bls.n	8000788 <__udivmoddi4+0x220>
 8000776:	1861      	adds	r1, r4, r1
 8000778:	f109 30ff 	add.w	r0, r9, #4294967295
 800077c:	d248      	bcs.n	8000810 <__udivmoddi4+0x2a8>
 800077e:	458a      	cmp	sl, r1
 8000780:	d946      	bls.n	8000810 <__udivmoddi4+0x2a8>
 8000782:	f1a9 0902 	sub.w	r9, r9, #2
 8000786:	4421      	add	r1, r4
 8000788:	eba1 010a 	sub.w	r1, r1, sl
 800078c:	b2bf      	uxth	r7, r7
 800078e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000792:	fb0e 1110 	mls	r1, lr, r0, r1
 8000796:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800079a:	fb00 f808 	mul.w	r8, r0, r8
 800079e:	45b8      	cmp	r8, r7
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x24a>
 80007a2:	19e7      	adds	r7, r4, r7
 80007a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80007a8:	d22e      	bcs.n	8000808 <__udivmoddi4+0x2a0>
 80007aa:	45b8      	cmp	r8, r7
 80007ac:	d92c      	bls.n	8000808 <__udivmoddi4+0x2a0>
 80007ae:	3802      	subs	r0, #2
 80007b0:	4427      	add	r7, r4
 80007b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007b6:	eba7 0708 	sub.w	r7, r7, r8
 80007ba:	fba0 8902 	umull	r8, r9, r0, r2
 80007be:	454f      	cmp	r7, r9
 80007c0:	46c6      	mov	lr, r8
 80007c2:	4649      	mov	r1, r9
 80007c4:	d31a      	bcc.n	80007fc <__udivmoddi4+0x294>
 80007c6:	d017      	beq.n	80007f8 <__udivmoddi4+0x290>
 80007c8:	b15d      	cbz	r5, 80007e2 <__udivmoddi4+0x27a>
 80007ca:	ebb3 020e 	subs.w	r2, r3, lr
 80007ce:	eb67 0701 	sbc.w	r7, r7, r1
 80007d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80007d6:	40f2      	lsrs	r2, r6
 80007d8:	ea4c 0202 	orr.w	r2, ip, r2
 80007dc:	40f7      	lsrs	r7, r6
 80007de:	e9c5 2700 	strd	r2, r7, [r5]
 80007e2:	2600      	movs	r6, #0
 80007e4:	4631      	mov	r1, r6
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	462e      	mov	r6, r5
 80007ec:	4628      	mov	r0, r5
 80007ee:	e70b      	b.n	8000608 <__udivmoddi4+0xa0>
 80007f0:	4606      	mov	r6, r0
 80007f2:	e6e9      	b.n	80005c8 <__udivmoddi4+0x60>
 80007f4:	4618      	mov	r0, r3
 80007f6:	e6fd      	b.n	80005f4 <__udivmoddi4+0x8c>
 80007f8:	4543      	cmp	r3, r8
 80007fa:	d2e5      	bcs.n	80007c8 <__udivmoddi4+0x260>
 80007fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000800:	eb69 0104 	sbc.w	r1, r9, r4
 8000804:	3801      	subs	r0, #1
 8000806:	e7df      	b.n	80007c8 <__udivmoddi4+0x260>
 8000808:	4608      	mov	r0, r1
 800080a:	e7d2      	b.n	80007b2 <__udivmoddi4+0x24a>
 800080c:	4660      	mov	r0, ip
 800080e:	e78d      	b.n	800072c <__udivmoddi4+0x1c4>
 8000810:	4681      	mov	r9, r0
 8000812:	e7b9      	b.n	8000788 <__udivmoddi4+0x220>
 8000814:	4666      	mov	r6, ip
 8000816:	e775      	b.n	8000704 <__udivmoddi4+0x19c>
 8000818:	4630      	mov	r0, r6
 800081a:	e74a      	b.n	80006b2 <__udivmoddi4+0x14a>
 800081c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000820:	4439      	add	r1, r7
 8000822:	e713      	b.n	800064c <__udivmoddi4+0xe4>
 8000824:	3802      	subs	r0, #2
 8000826:	443c      	add	r4, r7
 8000828:	e724      	b.n	8000674 <__udivmoddi4+0x10c>
 800082a:	bf00      	nop

0800082c <__aeabi_idiv0>:
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af02      	add	r7, sp, #8
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800083c:	2334      	movs	r3, #52	; 0x34
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <tx_application_define+0x40>)
 8000846:	490b      	ldr	r1, [pc, #44]	; (8000874 <tx_application_define+0x44>)
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <tx_application_define+0x48>)
 800084a:	f006 fa23 	bl	8006c94 <_txe_byte_pool_create>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d109      	bne.n	8000868 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <tx_application_define+0x48>)
 8000856:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000858:	68b8      	ldr	r0, [r7, #8]
 800085a:	f000 f80f 	bl	800087c <App_ThreadX_Init>
 800085e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d000      	beq.n	8000868 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000866:	e7fe      	b.n	8000866 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	240001e8 	.word	0x240001e8
 8000874:	08007214 	.word	0x08007214
 8000878:	240005e8 	.word	0x240005e8

0800087c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	; 0x30
 8000880:	af08      	add	r7, sp, #32
 8000882:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  status = tx_semaphore_create(&semaphore, "semaphore-1", 1);
 800088c:	231c      	movs	r3, #28
 800088e:	2201      	movs	r2, #1
 8000890:	491d      	ldr	r1, [pc, #116]	; (8000908 <App_ThreadX_Init+0x8c>)
 8000892:	481e      	ldr	r0, [pc, #120]	; (800090c <App_ThreadX_Init+0x90>)
 8000894:	f006 fa9e 	bl	8006dd4 <_txe_semaphore_create>
 8000898:	4603      	mov	r3, r0
 800089a:	461a      	mov	r2, r3
 800089c:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <App_ThreadX_Init+0x94>)
 800089e:	601a      	str	r2, [r3, #0]
  if(status == TX_SUCCESS){
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <App_ThreadX_Init+0x94>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d129      	bne.n	80008fc <App_ThreadX_Init+0x80>
	  tx_thread_create(&thread_ptr1, "thread-1", (void*)thread1_entry_func, 0x0000, thread_stack1, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 80008a8:	23b0      	movs	r3, #176	; 0xb0
 80008aa:	9306      	str	r3, [sp, #24]
 80008ac:	2301      	movs	r3, #1
 80008ae:	9305      	str	r3, [sp, #20]
 80008b0:	2301      	movs	r3, #1
 80008b2:	9304      	str	r3, [sp, #16]
 80008b4:	230f      	movs	r3, #15
 80008b6:	9303      	str	r3, [sp, #12]
 80008b8:	230f      	movs	r3, #15
 80008ba:	9302      	str	r3, [sp, #8]
 80008bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <App_ThreadX_Init+0x98>)
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	4a13      	ldr	r2, [pc, #76]	; (8000918 <App_ThreadX_Init+0x9c>)
 80008ca:	4914      	ldr	r1, [pc, #80]	; (800091c <App_ThreadX_Init+0xa0>)
 80008cc:	4814      	ldr	r0, [pc, #80]	; (8000920 <App_ThreadX_Init+0xa4>)
 80008ce:	f006 fb77 	bl	8006fc0 <_txe_thread_create>
	  tx_thread_create(&thread_ptr2, "thread-2", (void*)thread2_entry_func, 0x0000, thread_stack2, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 80008d2:	23b0      	movs	r3, #176	; 0xb0
 80008d4:	9306      	str	r3, [sp, #24]
 80008d6:	2301      	movs	r3, #1
 80008d8:	9305      	str	r3, [sp, #20]
 80008da:	2301      	movs	r3, #1
 80008dc:	9304      	str	r3, [sp, #16]
 80008de:	230f      	movs	r3, #15
 80008e0:	9303      	str	r3, [sp, #12]
 80008e2:	230f      	movs	r3, #15
 80008e4:	9302      	str	r3, [sp, #8]
 80008e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <App_ThreadX_Init+0xa8>)
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	2300      	movs	r3, #0
 80008f2:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <App_ThreadX_Init+0xac>)
 80008f4:	490d      	ldr	r1, [pc, #52]	; (800092c <App_ThreadX_Init+0xb0>)
 80008f6:	480e      	ldr	r0, [pc, #56]	; (8000930 <App_ThreadX_Init+0xb4>)
 80008f8:	f006 fb62 	bl	8006fc0 <_txe_thread_create>
  }
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80008fc:	68fb      	ldr	r3, [r7, #12]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08007228 	.word	0x08007228
 800090c:	2400061c 	.word	0x2400061c
 8000910:	24001028 	.word	0x24001028
 8000914:	24000778 	.word	0x24000778
 8000918:	08000941 	.word	0x08000941
 800091c:	08007234 	.word	0x08007234
 8000920:	24000f78 	.word	0x24000f78
 8000924:	24000b78 	.word	0x24000b78
 8000928:	08000a41 	.word	0x08000a41
 800092c:	08007240 	.word	0x08007240
 8000930:	240006c8 	.word	0x240006c8

08000934 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000938:	f005 f8b2 	bl	8005aa0 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}

08000940 <thread1_entry_func>:

/* USER CODE BEGIN 1 */
void thread1_entry_func(void){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	while(1){
		status = tx_semaphore_get(&semaphore, TX_WAIT_FOREVER);
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	4839      	ldr	r0, [pc, #228]	; (8000a30 <thread1_entry_func+0xf0>)
 800094a:	f006 fad9 	bl	8006f00 <_txe_semaphore_get>
 800094e:	4603      	mov	r3, r0
 8000950:	461a      	mov	r2, r3
 8000952:	4b38      	ldr	r3, [pc, #224]	; (8000a34 <thread1_entry_func+0xf4>)
 8000954:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 8000956:	4838      	ldr	r0, [pc, #224]	; (8000a38 <thread1_entry_func+0xf8>)
 8000958:	f7ff fde6 	bl	8000528 <strlen>
 800095c:	4603      	mov	r3, r0
 800095e:	b29a      	uxth	r2, r3
 8000960:	2364      	movs	r3, #100	; 0x64
 8000962:	4935      	ldr	r1, [pc, #212]	; (8000a38 <thread1_entry_func+0xf8>)
 8000964:	4835      	ldr	r0, [pc, #212]	; (8000a3c <thread1_entry_func+0xfc>)
 8000966:	f003 fe15 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 800096a:	4833      	ldr	r0, [pc, #204]	; (8000a38 <thread1_entry_func+0xf8>)
 800096c:	f7ff fddc 	bl	8000528 <strlen>
 8000970:	4603      	mov	r3, r0
 8000972:	b29a      	uxth	r2, r3
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	4930      	ldr	r1, [pc, #192]	; (8000a38 <thread1_entry_func+0xf8>)
 8000978:	4830      	ldr	r0, [pc, #192]	; (8000a3c <thread1_entry_func+0xfc>)
 800097a:	f003 fe0b 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 800097e:	482e      	ldr	r0, [pc, #184]	; (8000a38 <thread1_entry_func+0xf8>)
 8000980:	f7ff fdd2 	bl	8000528 <strlen>
 8000984:	4603      	mov	r3, r0
 8000986:	b29a      	uxth	r2, r3
 8000988:	2364      	movs	r3, #100	; 0x64
 800098a:	492b      	ldr	r1, [pc, #172]	; (8000a38 <thread1_entry_func+0xf8>)
 800098c:	482b      	ldr	r0, [pc, #172]	; (8000a3c <thread1_entry_func+0xfc>)
 800098e:	f003 fe01 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 8000992:	4829      	ldr	r0, [pc, #164]	; (8000a38 <thread1_entry_func+0xf8>)
 8000994:	f7ff fdc8 	bl	8000528 <strlen>
 8000998:	4603      	mov	r3, r0
 800099a:	b29a      	uxth	r2, r3
 800099c:	2364      	movs	r3, #100	; 0x64
 800099e:	4926      	ldr	r1, [pc, #152]	; (8000a38 <thread1_entry_func+0xf8>)
 80009a0:	4826      	ldr	r0, [pc, #152]	; (8000a3c <thread1_entry_func+0xfc>)
 80009a2:	f003 fdf7 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 80009a6:	4824      	ldr	r0, [pc, #144]	; (8000a38 <thread1_entry_func+0xf8>)
 80009a8:	f7ff fdbe 	bl	8000528 <strlen>
 80009ac:	4603      	mov	r3, r0
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	2364      	movs	r3, #100	; 0x64
 80009b2:	4921      	ldr	r1, [pc, #132]	; (8000a38 <thread1_entry_func+0xf8>)
 80009b4:	4821      	ldr	r0, [pc, #132]	; (8000a3c <thread1_entry_func+0xfc>)
 80009b6:	f003 fded 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 80009ba:	481f      	ldr	r0, [pc, #124]	; (8000a38 <thread1_entry_func+0xf8>)
 80009bc:	f7ff fdb4 	bl	8000528 <strlen>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	2364      	movs	r3, #100	; 0x64
 80009c6:	491c      	ldr	r1, [pc, #112]	; (8000a38 <thread1_entry_func+0xf8>)
 80009c8:	481c      	ldr	r0, [pc, #112]	; (8000a3c <thread1_entry_func+0xfc>)
 80009ca:	f003 fde3 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 80009ce:	481a      	ldr	r0, [pc, #104]	; (8000a38 <thread1_entry_func+0xf8>)
 80009d0:	f7ff fdaa 	bl	8000528 <strlen>
 80009d4:	4603      	mov	r3, r0
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	2364      	movs	r3, #100	; 0x64
 80009da:	4917      	ldr	r1, [pc, #92]	; (8000a38 <thread1_entry_func+0xf8>)
 80009dc:	4817      	ldr	r0, [pc, #92]	; (8000a3c <thread1_entry_func+0xfc>)
 80009de:	f003 fdd9 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 80009e2:	4815      	ldr	r0, [pc, #84]	; (8000a38 <thread1_entry_func+0xf8>)
 80009e4:	f7ff fda0 	bl	8000528 <strlen>
 80009e8:	4603      	mov	r3, r0
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	4912      	ldr	r1, [pc, #72]	; (8000a38 <thread1_entry_func+0xf8>)
 80009f0:	4812      	ldr	r0, [pc, #72]	; (8000a3c <thread1_entry_func+0xfc>)
 80009f2:	f003 fdcf 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 80009f6:	4810      	ldr	r0, [pc, #64]	; (8000a38 <thread1_entry_func+0xf8>)
 80009f8:	f7ff fd96 	bl	8000528 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	2364      	movs	r3, #100	; 0x64
 8000a02:	490d      	ldr	r1, [pc, #52]	; (8000a38 <thread1_entry_func+0xf8>)
 8000a04:	480d      	ldr	r0, [pc, #52]	; (8000a3c <thread1_entry_func+0xfc>)
 8000a06:	f003 fdc5 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 8000a0a:	480b      	ldr	r0, [pc, #44]	; (8000a38 <thread1_entry_func+0xf8>)
 8000a0c:	f7ff fd8c 	bl	8000528 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <thread1_entry_func+0xf8>)
 8000a18:	4808      	ldr	r0, [pc, #32]	; (8000a3c <thread1_entry_func+0xfc>)
 8000a1a:	f003 fdbb 	bl	8004594 <HAL_UART_Transmit>
		status = tx_semaphore_put(&semaphore);
 8000a1e:	4804      	ldr	r0, [pc, #16]	; (8000a30 <thread1_entry_func+0xf0>)
 8000a20:	f006 fab0 	bl	8006f84 <_txe_semaphore_put>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <thread1_entry_func+0xf4>)
 8000a2a:	601a      	str	r2, [r3, #0]
		status = tx_semaphore_get(&semaphore, TX_WAIT_FOREVER);
 8000a2c:	e78a      	b.n	8000944 <thread1_entry_func+0x4>
 8000a2e:	bf00      	nop
 8000a30:	2400061c 	.word	0x2400061c
 8000a34:	24001028 	.word	0x24001028
 8000a38:	24000000 	.word	0x24000000
 8000a3c:	24000638 	.word	0x24000638

08000a40 <thread2_entry_func>:
	}
}

void thread2_entry_func(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	while(1){
		status = tx_semaphore_get(&semaphore, TX_WAIT_FOREVER);
 8000a44:	f04f 31ff 	mov.w	r1, #4294967295
 8000a48:	4839      	ldr	r0, [pc, #228]	; (8000b30 <thread2_entry_func+0xf0>)
 8000a4a:	f006 fa59 	bl	8006f00 <_txe_semaphore_get>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	461a      	mov	r2, r3
 8000a52:	4b38      	ldr	r3, [pc, #224]	; (8000b34 <thread2_entry_func+0xf4>)
 8000a54:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000a56:	4838      	ldr	r0, [pc, #224]	; (8000b38 <thread2_entry_func+0xf8>)
 8000a58:	f7ff fd66 	bl	8000528 <strlen>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	2364      	movs	r3, #100	; 0x64
 8000a62:	4935      	ldr	r1, [pc, #212]	; (8000b38 <thread2_entry_func+0xf8>)
 8000a64:	4835      	ldr	r0, [pc, #212]	; (8000b3c <thread2_entry_func+0xfc>)
 8000a66:	f003 fd95 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000a6a:	4833      	ldr	r0, [pc, #204]	; (8000b38 <thread2_entry_func+0xf8>)
 8000a6c:	f7ff fd5c 	bl	8000528 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	2364      	movs	r3, #100	; 0x64
 8000a76:	4930      	ldr	r1, [pc, #192]	; (8000b38 <thread2_entry_func+0xf8>)
 8000a78:	4830      	ldr	r0, [pc, #192]	; (8000b3c <thread2_entry_func+0xfc>)
 8000a7a:	f003 fd8b 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000a7e:	482e      	ldr	r0, [pc, #184]	; (8000b38 <thread2_entry_func+0xf8>)
 8000a80:	f7ff fd52 	bl	8000528 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	2364      	movs	r3, #100	; 0x64
 8000a8a:	492b      	ldr	r1, [pc, #172]	; (8000b38 <thread2_entry_func+0xf8>)
 8000a8c:	482b      	ldr	r0, [pc, #172]	; (8000b3c <thread2_entry_func+0xfc>)
 8000a8e:	f003 fd81 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000a92:	4829      	ldr	r0, [pc, #164]	; (8000b38 <thread2_entry_func+0xf8>)
 8000a94:	f7ff fd48 	bl	8000528 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	2364      	movs	r3, #100	; 0x64
 8000a9e:	4926      	ldr	r1, [pc, #152]	; (8000b38 <thread2_entry_func+0xf8>)
 8000aa0:	4826      	ldr	r0, [pc, #152]	; (8000b3c <thread2_entry_func+0xfc>)
 8000aa2:	f003 fd77 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000aa6:	4824      	ldr	r0, [pc, #144]	; (8000b38 <thread2_entry_func+0xf8>)
 8000aa8:	f7ff fd3e 	bl	8000528 <strlen>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	2364      	movs	r3, #100	; 0x64
 8000ab2:	4921      	ldr	r1, [pc, #132]	; (8000b38 <thread2_entry_func+0xf8>)
 8000ab4:	4821      	ldr	r0, [pc, #132]	; (8000b3c <thread2_entry_func+0xfc>)
 8000ab6:	f003 fd6d 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000aba:	481f      	ldr	r0, [pc, #124]	; (8000b38 <thread2_entry_func+0xf8>)
 8000abc:	f7ff fd34 	bl	8000528 <strlen>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	2364      	movs	r3, #100	; 0x64
 8000ac6:	491c      	ldr	r1, [pc, #112]	; (8000b38 <thread2_entry_func+0xf8>)
 8000ac8:	481c      	ldr	r0, [pc, #112]	; (8000b3c <thread2_entry_func+0xfc>)
 8000aca:	f003 fd63 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000ace:	481a      	ldr	r0, [pc, #104]	; (8000b38 <thread2_entry_func+0xf8>)
 8000ad0:	f7ff fd2a 	bl	8000528 <strlen>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	2364      	movs	r3, #100	; 0x64
 8000ada:	4917      	ldr	r1, [pc, #92]	; (8000b38 <thread2_entry_func+0xf8>)
 8000adc:	4817      	ldr	r0, [pc, #92]	; (8000b3c <thread2_entry_func+0xfc>)
 8000ade:	f003 fd59 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000ae2:	4815      	ldr	r0, [pc, #84]	; (8000b38 <thread2_entry_func+0xf8>)
 8000ae4:	f7ff fd20 	bl	8000528 <strlen>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	b29a      	uxth	r2, r3
 8000aec:	2364      	movs	r3, #100	; 0x64
 8000aee:	4912      	ldr	r1, [pc, #72]	; (8000b38 <thread2_entry_func+0xf8>)
 8000af0:	4812      	ldr	r0, [pc, #72]	; (8000b3c <thread2_entry_func+0xfc>)
 8000af2:	f003 fd4f 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000af6:	4810      	ldr	r0, [pc, #64]	; (8000b38 <thread2_entry_func+0xf8>)
 8000af8:	f7ff fd16 	bl	8000528 <strlen>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	2364      	movs	r3, #100	; 0x64
 8000b02:	490d      	ldr	r1, [pc, #52]	; (8000b38 <thread2_entry_func+0xf8>)
 8000b04:	480d      	ldr	r0, [pc, #52]	; (8000b3c <thread2_entry_func+0xfc>)
 8000b06:	f003 fd45 	bl	8004594 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <thread2_entry_func+0xf8>)
 8000b0c:	f7ff fd0c 	bl	8000528 <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	2364      	movs	r3, #100	; 0x64
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <thread2_entry_func+0xf8>)
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <thread2_entry_func+0xfc>)
 8000b1a:	f003 fd3b 	bl	8004594 <HAL_UART_Transmit>
		status = tx_semaphore_put(&semaphore);
 8000b1e:	4804      	ldr	r0, [pc, #16]	; (8000b30 <thread2_entry_func+0xf0>)
 8000b20:	f006 fa30 	bl	8006f84 <_txe_semaphore_put>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <thread2_entry_func+0xf4>)
 8000b2a:	601a      	str	r2, [r3, #0]
		status = tx_semaphore_get(&semaphore, TX_WAIT_FOREVER);
 8000b2c:	e78a      	b.n	8000a44 <thread2_entry_func+0x4>
 8000b2e:	bf00      	nop
 8000b30:	2400061c 	.word	0x2400061c
 8000b34:	24001028 	.word	0x24001028
 8000b38:	240000dc 	.word	0x240000dc
 8000b3c:	24000638 	.word	0x24000638

08000b40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b44:	f000 fb9c 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b48:	f000 f808 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4c:	f000 f8c6 	bl	8000cdc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b50:	f000 f878 	bl	8000c44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b54:	f7ff feee 	bl	8000934 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <main+0x18>
	...

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b09c      	sub	sp, #112	; 0x70
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b66:	224c      	movs	r2, #76	; 0x4c
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 fb3e 	bl	80071ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2220      	movs	r2, #32
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f006 fb38 	bl	80071ec <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <SystemClock_Config+0xe0>)
 8000b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b86:	2004      	movs	r0, #4
 8000b88:	f000 fe80 	bl	800188c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	4b2b      	ldr	r3, [pc, #172]	; (8000c40 <SystemClock_Config+0xe4>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a2a      	ldr	r2, [pc, #168]	; (8000c40 <SystemClock_Config+0xe4>)
 8000b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b28      	ldr	r3, [pc, #160]	; (8000c40 <SystemClock_Config+0xe4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba8:	bf00      	nop
 8000baa:	4b25      	ldr	r3, [pc, #148]	; (8000c40 <SystemClock_Config+0xe4>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb6:	d1f8      	bne.n	8000baa <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc0:	2340      	movs	r3, #64	; 0x40
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000bd0:	2308      	movs	r3, #8
 8000bd2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000be0:	230c      	movs	r3, #12
 8000be2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fea5 	bl	8001940 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000bfc:	f000 f98c 	bl	8000f18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	233f      	movs	r3, #63	; 0x3f
 8000c02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2303      	movs	r3, #3
 8000c06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2101      	movs	r1, #1
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fa8f 	bl	8002148 <HAL_RCC_ClockConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000c30:	f000 f972 	bl	8000f18 <Error_Handler>
  }
}
 8000c34:	bf00      	nop
 8000c36:	3770      	adds	r7, #112	; 0x70
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58024800 	.word	0x58024800

08000c44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c48:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c4a:	4a23      	ldr	r2, [pc, #140]	; (8000cd8 <MX_USART3_UART_Init+0x94>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c4e:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c8c:	4811      	ldr	r0, [pc, #68]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000c8e:	f003 fc31 	bl	80044f4 <HAL_UART_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c98:	f000 f93e 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000ca0:	f004 fd5a 	bl	8005758 <HAL_UARTEx_SetTxFifoThreshold>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000caa:	f000 f935 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000cb2:	f004 fd8f 	bl	80057d4 <HAL_UARTEx_SetRxFifoThreshold>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000cbc:	f000 f92c 	bl	8000f18 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cc0:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_USART3_UART_Init+0x90>)
 8000cc2:	f004 fd10 	bl	80056e6 <HAL_UARTEx_DisableFifoMode>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 f924 	bl	8000f18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	24000638 	.word	0x24000638
 8000cd8:	40004800 	.word	0x40004800

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	4b79      	ldr	r3, [pc, #484]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000cf4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000cf8:	4a77      	ldr	r2, [pc, #476]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d02:	4b75      	ldr	r3, [pc, #468]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	623b      	str	r3, [r7, #32]
 8000d0e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d10:	4b71      	ldr	r3, [pc, #452]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d12:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d16:	4a70      	ldr	r2, [pc, #448]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d20:	4b6d      	ldr	r3, [pc, #436]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d22:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d26:	f003 0320 	and.w	r3, r3, #32
 8000d2a:	61fb      	str	r3, [r7, #28]
 8000d2c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2e:	4b6a      	ldr	r3, [pc, #424]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d30:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d34:	4a68      	ldr	r2, [pc, #416]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d3a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d3e:	4b66      	ldr	r3, [pc, #408]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d40:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4c:	4b62      	ldr	r3, [pc, #392]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d52:	4a61      	ldr	r2, [pc, #388]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d5c:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b5b      	ldr	r3, [pc, #364]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d6c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d70:	4a59      	ldr	r2, [pc, #356]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d7a:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d80:	f003 0308 	and.w	r3, r3, #8
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d88:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d8a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d8e:	4a52      	ldr	r2, [pc, #328]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d98:	4b4f      	ldr	r3, [pc, #316]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000d9a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b4c      	ldr	r3, [pc, #304]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000da8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dac:	4a4a      	ldr	r2, [pc, #296]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000dae:	f043 0301 	orr.w	r3, r3, #1
 8000db2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000db6:	4b48      	ldr	r3, [pc, #288]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000db8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc4:	4b44      	ldr	r3, [pc, #272]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000dc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dca:	4a43      	ldr	r2, [pc, #268]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dd4:	4b40      	ldr	r3, [pc, #256]	; (8000ed8 <MX_GPIO_Init+0x1fc>)
 8000dd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dda:	f003 0310 	and.w	r3, r3, #16
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de8:	483c      	ldr	r0, [pc, #240]	; (8000edc <MX_GPIO_Init+0x200>)
 8000dea:	f000 fd35 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f244 0101 	movw	r1, #16385	; 0x4001
 8000df4:	483a      	ldr	r0, [pc, #232]	; (8000ee0 <MX_GPIO_Init+0x204>)
 8000df6:	f000 fd2f 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	4839      	ldr	r0, [pc, #228]	; (8000ee4 <MX_GPIO_Init+0x208>)
 8000e00:	f000 fd2a 	bl	8001858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	4833      	ldr	r0, [pc, #204]	; (8000ee8 <MX_GPIO_Init+0x20c>)
 8000e1a:	f000 fb6d 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	4829      	ldr	r0, [pc, #164]	; (8000edc <MX_GPIO_Init+0x200>)
 8000e38:	f000 fb5e 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000e3c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e42:	2301      	movs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e52:	4619      	mov	r1, r3
 8000e54:	4822      	ldr	r0, [pc, #136]	; (8000ee0 <MX_GPIO_Init+0x204>)
 8000e56:	f000 fb4f 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481f      	ldr	r0, [pc, #124]	; (8000eec <MX_GPIO_Init+0x210>)
 8000e70:	f000 fb42 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000e86:	230a      	movs	r3, #10
 8000e88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4817      	ldr	r0, [pc, #92]	; (8000ef0 <MX_GPIO_Init+0x214>)
 8000e92:	f000 fb31 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000e96:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	4810      	ldr	r0, [pc, #64]	; (8000ef0 <MX_GPIO_Init+0x214>)
 8000eb0:	f000 fb22 	bl	80014f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_GPIO_Init+0x208>)
 8000ecc:	f000 fb14 	bl	80014f8 <HAL_GPIO_Init>

}
 8000ed0:	bf00      	nop
 8000ed2:	3738      	adds	r7, #56	; 0x38
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58021400 	.word	0x58021400
 8000ee0:	58020400 	.word	0x58020400
 8000ee4:	58021000 	.word	0x58021000
 8000ee8:	58020800 	.word	0x58020800
 8000eec:	58021800 	.word	0x58021800
 8000ef0:	58020000 	.word	0x58020000

08000ef4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f06:	f000 f9f7 	bl	80012f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40001000 	.word	0x40001000

08000f18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <Error_Handler+0x8>
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_MspInit+0x30>)
 8000f2c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f30:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <HAL_MspInit+0x30>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_MspInit+0x30>)
 8000f3c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	58024400 	.word	0x58024400

08000f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b0b8      	sub	sp, #224	; 0xe0
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	22b8      	movs	r2, #184	; 0xb8
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 f937 	bl	80071ec <memset>
  if(huart->Instance==USART3)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a25      	ldr	r2, [pc, #148]	; (8001018 <HAL_UART_MspInit+0xc0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d142      	bne.n	800100e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fca4 	bl	80028e4 <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fa2:	f7ff ffb9 	bl	8000f18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <HAL_UART_MspInit+0xc4>)
 8000fa8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <HAL_UART_MspInit+0xc4>)
 8000fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb2:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_UART_MspInit+0xc4>)
 8000fb8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8000fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <HAL_UART_MspInit+0xc4>)
 8000fc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fca:	4a14      	ldr	r2, [pc, #80]	; (800101c <HAL_UART_MspInit+0xc4>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000fd4:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_UART_MspInit+0xc4>)
 8000fd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fe2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fe6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001002:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	; (8001020 <HAL_UART_MspInit+0xc8>)
 800100a:	f000 fa75 	bl	80014f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	37e0      	adds	r7, #224	; 0xe0
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40004800 	.word	0x40004800
 800101c:	58024400 	.word	0x58024400
 8001020:	58020c00 	.word	0x58020c00

08001024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b090      	sub	sp, #64	; 0x40
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d827      	bhi.n	8001082 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001032:	2200      	movs	r2, #0
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	2036      	movs	r0, #54	; 0x36
 8001038:	f000 fa36 	bl	80014a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800103c:	2036      	movs	r0, #54	; 0x36
 800103e:	f000 fa4d 	bl	80014dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001042:	4a29      	ldr	r2, [pc, #164]	; (80010e8 <HAL_InitTick+0xc4>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001048:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_InitTick+0xc8>)
 800104a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800104e:	4a27      	ldr	r2, [pc, #156]	; (80010ec <HAL_InitTick+0xc8>)
 8001050:	f043 0310 	orr.w	r3, r3, #16
 8001054:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_InitTick+0xc8>)
 800105a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800105e:	f003 0310 	and.w	r3, r3, #16
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001066:	f107 0210 	add.w	r2, r7, #16
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4611      	mov	r1, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fbf5 	bl	8002860 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001078:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800107a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800107c:	2b00      	cmp	r3, #0
 800107e:	d106      	bne.n	800108e <HAL_InitTick+0x6a>
 8001080:	e001      	b.n	8001086 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e02b      	b.n	80010de <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001086:	f001 fbbf 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 800108a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800108c:	e004      	b.n	8001098 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800108e:	f001 fbbb 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 8001092:	4603      	mov	r3, r0
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <HAL_InitTick+0xcc>)
 800109c:	fba2 2303 	umull	r2, r3, r2, r3
 80010a0:	0c9b      	lsrs	r3, r3, #18
 80010a2:	3b01      	subs	r3, #1
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_InitTick+0xd0>)
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_InitTick+0xd4>)
 80010aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_InitTick+0xd0>)
 80010ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010b4:	4a0f      	ldr	r2, [pc, #60]	; (80010f4 <HAL_InitTick+0xd0>)
 80010b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_InitTick+0xd0>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_InitTick+0xd0>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80010c6:	480b      	ldr	r0, [pc, #44]	; (80010f4 <HAL_InitTick+0xd0>)
 80010c8:	f002 ff3a 	bl	8003f40 <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d104      	bne.n	80010dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <HAL_InitTick+0xd0>)
 80010d4:	f002 ff96 	bl	8004004 <HAL_TIM_Base_Start_IT>
 80010d8:	4603      	mov	r3, r0
 80010da:	e000      	b.n	80010de <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3740      	adds	r7, #64	; 0x40
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	240001c0 	.word	0x240001c0
 80010ec:	58024400 	.word	0x58024400
 80010f0:	431bde83 	.word	0x431bde83
 80010f4:	2400102c 	.word	0x2400102c
 80010f8:	40001000 	.word	0x40001000

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <TIM6_DAC_IRQHandler+0x10>)
 800112e:	f002 ffe1 	bl	80040f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2400102c 	.word	0x2400102c

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001140:	4b32      	ldr	r3, [pc, #200]	; (800120c <SystemInit+0xd0>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001146:	4a31      	ldr	r2, [pc, #196]	; (800120c <SystemInit+0xd0>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <SystemInit+0xd4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	2b02      	cmp	r3, #2
 800115a:	d807      	bhi.n	800116c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800115c:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <SystemInit+0xd4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 030f 	bic.w	r3, r3, #15
 8001164:	4a2a      	ldr	r2, [pc, #168]	; (8001210 <SystemInit+0xd4>)
 8001166:	f043 0303 	orr.w	r3, r3, #3
 800116a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800116c:	4b29      	ldr	r3, [pc, #164]	; (8001214 <SystemInit+0xd8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a28      	ldr	r2, [pc, #160]	; (8001214 <SystemInit+0xd8>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001178:	4b26      	ldr	r3, [pc, #152]	; (8001214 <SystemInit+0xd8>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <SystemInit+0xd8>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	4924      	ldr	r1, [pc, #144]	; (8001214 <SystemInit+0xd8>)
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <SystemInit+0xdc>)
 8001186:	4013      	ands	r3, r2
 8001188:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <SystemInit+0xd4>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <SystemInit+0xd4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f023 030f 	bic.w	r3, r3, #15
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <SystemInit+0xd4>)
 80011a0:	f043 0303 	orr.w	r3, r3, #3
 80011a4:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <SystemInit+0xd8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 80011ac:	4b19      	ldr	r3, [pc, #100]	; (8001214 <SystemInit+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <SystemInit+0xd8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011b8:	4b16      	ldr	r3, [pc, #88]	; (8001214 <SystemInit+0xd8>)
 80011ba:	4a18      	ldr	r2, [pc, #96]	; (800121c <SystemInit+0xe0>)
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <SystemInit+0xd8>)
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <SystemInit+0xe4>)
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <SystemInit+0xd8>)
 80011c6:	4a17      	ldr	r2, [pc, #92]	; (8001224 <SystemInit+0xe8>)
 80011c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <SystemInit+0xd8>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <SystemInit+0xd8>)
 80011d2:	4a14      	ldr	r2, [pc, #80]	; (8001224 <SystemInit+0xe8>)
 80011d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <SystemInit+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <SystemInit+0xd8>)
 80011de:	4a11      	ldr	r2, [pc, #68]	; (8001224 <SystemInit+0xe8>)
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <SystemInit+0xd8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <SystemInit+0xd8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a09      	ldr	r2, [pc, #36]	; (8001214 <SystemInit+0xd8>)
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <SystemInit+0xd8>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <SystemInit+0xec>)
 80011fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001200:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00
 8001210:	52002000 	.word	0x52002000
 8001214:	58024400 	.word	0x58024400
 8001218:	eaf6ed7f 	.word	0xeaf6ed7f
 800121c:	02020200 	.word	0x02020200
 8001220:	01ff0000 	.word	0x01ff0000
 8001224:	01010280 	.word	0x01010280
 8001228:	52004000 	.word	0x52004000

0800122c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001230:	f7ff ff84 	bl	800113c <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001236:	490d      	ldr	r1, [pc, #52]	; (800126c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800124c:	4c0a      	ldr	r4, [pc, #40]	; (8001278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800125a:	f005 ffa3 	bl	80071a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff fc6f 	bl	8000b40 <main>
  bx  lr
 8001262:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001268:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800126c:	240001cc 	.word	0x240001cc
  ldr r2, =_sidata
 8001270:	080072a8 	.word	0x080072a8
  ldr r2, =_sbss
 8001274:	240001cc 	.word	0x240001cc
  ldr r4, =_ebss
 8001278:	240016c0 	.word	0x240016c0

0800127c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001286:	2003      	movs	r0, #3
 8001288:	f000 f903 	bl	8001492 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800128c:	f001 f912 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 8001290:	4602      	mov	r2, r0
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_Init+0x68>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	4913      	ldr	r1, [pc, #76]	; (80012ec <HAL_Init+0x6c>)
 800129e:	5ccb      	ldrb	r3, [r1, r3]
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80012aa:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <HAL_Init+0x68>)
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	f003 030f 	and.w	r3, r3, #15
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_Init+0x6c>)
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	fa22 f303 	lsr.w	r3, r2, r3
 80012c0:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <HAL_Init+0x70>)
 80012c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_Init+0x74>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ca:	200f      	movs	r0, #15
 80012cc:	f7ff feaa 	bl	8001024 <HAL_InitTick>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e002      	b.n	80012e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012da:	f7ff fe23 	bl	8000f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	58024400 	.word	0x58024400
 80012ec:	08007260 	.word	0x08007260
 80012f0:	240001bc 	.word	0x240001bc
 80012f4:	240001b8 	.word	0x240001b8

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	240001c4 	.word	0x240001c4
 800131c:	24001078 	.word	0x24001078

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	24001078 	.word	0x24001078

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <__NVIC_SetPriorityGrouping+0x40>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 8001362:	4313      	orrs	r3, r2
 8001364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001366:	4a04      	ldr	r2, [pc, #16]	; (8001378 <__NVIC_SetPriorityGrouping+0x40>)
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	60d3      	str	r3, [r2, #12]
}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	05fa0000 	.word	0x05fa0000

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	88fb      	ldrh	r3, [r7, #6]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff4c 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
 80014b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b6:	f7ff ff63 	bl	8001380 <__NVIC_GetPriorityGrouping>
 80014ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	68b9      	ldr	r1, [r7, #8]
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f7ff ffb3 	bl	800142c <NVIC_EncodePriority>
 80014c6:	4602      	mov	r2, r0
 80014c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ff82 	bl	80013d8 <__NVIC_SetPriority>
}
 80014d4:	bf00      	nop
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff56 	bl	800139c <__NVIC_EnableIRQ>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001506:	4b89      	ldr	r3, [pc, #548]	; (800172c <HAL_GPIO_Init+0x234>)
 8001508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800150a:	e194      	b.n	8001836 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2101      	movs	r1, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8186 	beq.w	8001830 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b01      	cmp	r3, #1
 800152e:	d005      	beq.n	800153c <HAL_GPIO_Init+0x44>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b02      	cmp	r3, #2
 800153a:	d130      	bne.n	800159e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	2203      	movs	r2, #3
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	68da      	ldr	r2, [r3, #12]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001572:	2201      	movs	r2, #1
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	f003 0201 	and.w	r2, r3, #1
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d017      	beq.n	80015da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d123      	bne.n	800162e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	f003 0307 	and.w	r3, r3, #7
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	fa02 f303 	lsl.w	r3, r2, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4313      	orrs	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	69b9      	ldr	r1, [r7, #24]
 800162a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2203      	movs	r2, #3
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0203 	and.w	r2, r3, #3
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 80e0 	beq.w	8001830 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001670:	4b2f      	ldr	r3, [pc, #188]	; (8001730 <HAL_GPIO_Init+0x238>)
 8001672:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001676:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <HAL_GPIO_Init+0x238>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_GPIO_Init+0x238>)
 8001682:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168e:	4a29      	ldr	r2, [pc, #164]	; (8001734 <HAL_GPIO_Init+0x23c>)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	3302      	adds	r3, #2
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a20      	ldr	r2, [pc, #128]	; (8001738 <HAL_GPIO_Init+0x240>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d052      	beq.n	8001760 <HAL_GPIO_Init+0x268>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <HAL_GPIO_Init+0x244>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d031      	beq.n	8001726 <HAL_GPIO_Init+0x22e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a1e      	ldr	r2, [pc, #120]	; (8001740 <HAL_GPIO_Init+0x248>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d02b      	beq.n	8001722 <HAL_GPIO_Init+0x22a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <HAL_GPIO_Init+0x24c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d025      	beq.n	800171e <HAL_GPIO_Init+0x226>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a1c      	ldr	r2, [pc, #112]	; (8001748 <HAL_GPIO_Init+0x250>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01f      	beq.n	800171a <HAL_GPIO_Init+0x222>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_GPIO_Init+0x254>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x21e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a1a      	ldr	r2, [pc, #104]	; (8001750 <HAL_GPIO_Init+0x258>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x21a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a19      	ldr	r2, [pc, #100]	; (8001754 <HAL_GPIO_Init+0x25c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x216>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_GPIO_Init+0x260>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x212>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_GPIO_Init+0x264>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x20e>
 8001702:	2309      	movs	r3, #9
 8001704:	e02d      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 8001706:	230a      	movs	r3, #10
 8001708:	e02b      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 800170a:	2308      	movs	r3, #8
 800170c:	e029      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 800170e:	2307      	movs	r3, #7
 8001710:	e027      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 8001712:	2306      	movs	r3, #6
 8001714:	e025      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 8001716:	2305      	movs	r3, #5
 8001718:	e023      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 800171a:	2304      	movs	r3, #4
 800171c:	e021      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 800171e:	2303      	movs	r3, #3
 8001720:	e01f      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 8001722:	2302      	movs	r3, #2
 8001724:	e01d      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 8001726:	2301      	movs	r3, #1
 8001728:	e01b      	b.n	8001762 <HAL_GPIO_Init+0x26a>
 800172a:	bf00      	nop
 800172c:	58000080 	.word	0x58000080
 8001730:	58024400 	.word	0x58024400
 8001734:	58000400 	.word	0x58000400
 8001738:	58020000 	.word	0x58020000
 800173c:	58020400 	.word	0x58020400
 8001740:	58020800 	.word	0x58020800
 8001744:	58020c00 	.word	0x58020c00
 8001748:	58021000 	.word	0x58021000
 800174c:	58021400 	.word	0x58021400
 8001750:	58021800 	.word	0x58021800
 8001754:	58021c00 	.word	0x58021c00
 8001758:	58022000 	.word	0x58022000
 800175c:	58022400 	.word	0x58022400
 8001760:	2300      	movs	r3, #0
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	f002 0203 	and.w	r2, r2, #3
 8001768:	0092      	lsls	r2, r2, #2
 800176a:	4093      	lsls	r3, r2
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001772:	4938      	ldr	r1, [pc, #224]	; (8001854 <HAL_GPIO_Init+0x35c>)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	089b      	lsrs	r3, r3, #2
 8001778:	3302      	adds	r3, #2
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	3301      	adds	r3, #1
 8001834:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa22 f303 	lsr.w	r3, r2, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f47f ae63 	bne.w	800150c <HAL_GPIO_Init+0x14>
  }
}
 8001846:	bf00      	nop
 8001848:	bf00      	nop
 800184a:	3724      	adds	r7, #36	; 0x24
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	58000400 	.word	0x58000400

08001858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	807b      	strh	r3, [r7, #2]
 8001864:	4613      	mov	r3, r2
 8001866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001868:	787b      	ldrb	r3, [r7, #1]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186e:	887a      	ldrh	r2, [r7, #2]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001874:	e003      	b.n	800187e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	041a      	lsls	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	619a      	str	r2, [r3, #24]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_PWREx_ConfigSupply+0xb0>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	2b06      	cmp	r3, #6
 800189e:	d00a      	beq.n	80018b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_PWREx_ConfigSupply+0xb0>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d001      	beq.n	80018b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e040      	b.n	8001934 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e03e      	b.n	8001934 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_PWREx_ConfigSupply+0xb0>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80018be:	491f      	ldr	r1, [pc, #124]	; (800193c <HAL_PWREx_ConfigSupply+0xb0>)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018c6:	f7ff fd2b 	bl	8001320 <HAL_GetTick>
 80018ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018cc:	e009      	b.n	80018e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018ce:	f7ff fd27 	bl	8001320 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018dc:	d901      	bls.n	80018e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e028      	b.n	8001934 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018e2:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_PWREx_ConfigSupply+0xb0>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ee:	d1ee      	bne.n	80018ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b1e      	cmp	r3, #30
 80018f4:	d008      	beq.n	8001908 <HAL_PWREx_ConfigSupply+0x7c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b2e      	cmp	r3, #46	; 0x2e
 80018fa:	d005      	beq.n	8001908 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b1d      	cmp	r3, #29
 8001900:	d002      	beq.n	8001908 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2b2d      	cmp	r3, #45	; 0x2d
 8001906:	d114      	bne.n	8001932 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001908:	f7ff fd0a 	bl	8001320 <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800190e:	e009      	b.n	8001924 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001910:	f7ff fd06 	bl	8001320 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800191e:	d901      	bls.n	8001924 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e007      	b.n	8001934 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_PWREx_ConfigSupply+0xb0>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d1ee      	bne.n	8001910 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58024800 	.word	0x58024800

08001940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e3f3      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	2b00      	cmp	r3, #0
 800195c:	f000 80b3 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001960:	4b9e      	ldr	r3, [pc, #632]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800196a:	4b9c      	ldr	r3, [pc, #624]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 800196c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	2b10      	cmp	r3, #16
 8001974:	d007      	beq.n	8001986 <HAL_RCC_OscConfig+0x46>
 8001976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001978:	2b18      	cmp	r3, #24
 800197a:	d112      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62>
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	f003 0303 	and.w	r3, r3, #3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d10d      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001986:	4b95      	ldr	r3, [pc, #596]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	f000 8098 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x184>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	f040 8093 	bne.w	8001ac4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e3cb      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x7a>
 80019ac:	4b8b      	ldr	r3, [pc, #556]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a8a      	ldr	r2, [pc, #552]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e058      	b.n	8001a6c <HAL_RCC_OscConfig+0x12c>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d112      	bne.n	80019e8 <HAL_RCC_OscConfig+0xa8>
 80019c2:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a85      	ldr	r2, [pc, #532]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b83      	ldr	r3, [pc, #524]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a82      	ldr	r2, [pc, #520]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b80      	ldr	r3, [pc, #512]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7f      	ldr	r2, [pc, #508]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e041      	b.n	8001a6c <HAL_RCC_OscConfig+0x12c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d112      	bne.n	8001a18 <HAL_RCC_OscConfig+0xd8>
 80019f2:	4b7a      	ldr	r3, [pc, #488]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a79      	ldr	r2, [pc, #484]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b77      	ldr	r3, [pc, #476]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a76      	ldr	r2, [pc, #472]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b74      	ldr	r3, [pc, #464]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a73      	ldr	r2, [pc, #460]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e029      	b.n	8001a6c <HAL_RCC_OscConfig+0x12c>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001a20:	d112      	bne.n	8001a48 <HAL_RCC_OscConfig+0x108>
 8001a22:	4b6e      	ldr	r3, [pc, #440]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a6d      	ldr	r2, [pc, #436]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b6b      	ldr	r3, [pc, #428]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6a      	ldr	r2, [pc, #424]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b68      	ldr	r3, [pc, #416]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a67      	ldr	r2, [pc, #412]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e011      	b.n	8001a6c <HAL_RCC_OscConfig+0x12c>
 8001a48:	4b64      	ldr	r3, [pc, #400]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a63      	ldr	r2, [pc, #396]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a60      	ldr	r2, [pc, #384]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a5d      	ldr	r2, [pc, #372]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff fc54 	bl	8001320 <HAL_GetTick>
 8001a78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fc50 	bl	8001320 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e355      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a8e:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x13c>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fc40 	bl	8001320 <HAL_GetTick>
 8001aa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fc3c 	bl	8001320 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e341      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ab6:	4b49      	ldr	r3, [pc, #292]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x164>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 808c 	beq.w	8001bec <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad4:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001adc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ade:	4b3f      	ldr	r3, [pc, #252]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_RCC_OscConfig+0x1ba>
 8001aea:	6a3b      	ldr	r3, [r7, #32]
 8001aec:	2b18      	cmp	r3, #24
 8001aee:	d137      	bne.n	8001b60 <HAL_RCC_OscConfig+0x220>
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0303 	and.w	r3, r3, #3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d132      	bne.n	8001b60 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001afa:	4b38      	ldr	r3, [pc, #224]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1d2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e313      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b12:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 0219 	bic.w	r2, r3, #25
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	492f      	ldr	r1, [pc, #188]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b24:	f7ff fbfc 	bl	8001320 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fbf8 	bl	8001320 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e2fd      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b3e:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	061b      	lsls	r3, r3, #24
 8001b58:	4920      	ldr	r1, [pc, #128]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b5e:	e045      	b.n	8001bec <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d026      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f023 0219 	bic.w	r2, r3, #25
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4919      	ldr	r1, [pc, #100]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fbd1 	bl	8001320 <HAL_GetTick>
 8001b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fbcd 	bl	8001320 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e2d2      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	490b      	ldr	r1, [pc, #44]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
 8001bb4:	e01a      	b.n	8001bec <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a08      	ldr	r2, [pc, #32]	; (8001bdc <HAL_RCC_OscConfig+0x29c>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fbad 	bl	8001320 <HAL_GetTick>
 8001bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bca:	f7ff fba9 	bl	8001320 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d903      	bls.n	8001be0 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e2ae      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
 8001bdc:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001be0:	4b99      	ldr	r3, [pc, #612]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1ee      	bne.n	8001bca <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d06a      	beq.n	8001cce <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bf8:	4b93      	ldr	r3, [pc, #588]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c00:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c02:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d007      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2de>
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b18      	cmp	r3, #24
 8001c12:	d11b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x30c>
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c1e:	4b8a      	ldr	r3, [pc, #552]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2f6>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2b80      	cmp	r3, #128	; 0x80
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e281      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c36:	4b84      	ldr	r3, [pc, #528]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	061b      	lsls	r3, r3, #24
 8001c44:	4980      	ldr	r1, [pc, #512]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c4a:	e040      	b.n	8001cce <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d023      	beq.n	8001c9c <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c54:	4b7c      	ldr	r3, [pc, #496]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a7b      	ldr	r2, [pc, #492]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb5e 	bl	8001320 <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c68:	f7ff fb5a 	bl	8001320 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e25f      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c7a:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c86:	4b70      	ldr	r3, [pc, #448]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	061b      	lsls	r3, r3, #24
 8001c94:	496c      	ldr	r1, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60cb      	str	r3, [r1, #12]
 8001c9a:	e018      	b.n	8001cce <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001ca2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb3a 	bl	8001320 <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fb36 	bl	8001320 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e23b      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cc2:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d036      	beq.n	8001d48 <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d019      	beq.n	8001d16 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce2:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce6:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff fb17 	bl	8001320 <HAL_GetTick>
 8001cf2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff fb13 	bl	8001320 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e218      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d08:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001d0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x3b6>
 8001d14:	e018      	b.n	8001d48 <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d16:	4b4c      	ldr	r3, [pc, #304]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d1a:	4a4b      	ldr	r2, [pc, #300]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d22:	f7ff fafd 	bl	8001320 <HAL_GetTick>
 8001d26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d2a:	f7ff faf9 	bl	8001320 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e1fe      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0320 	and.w	r3, r3, #32
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d036      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d019      	beq.n	8001d90 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a39      	ldr	r2, [pc, #228]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001d62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fada 	bl	8001320 <HAL_GetTick>
 8001d6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d70:	f7ff fad6 	bl	8001320 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1db      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d82:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x430>
 8001d8e:	e018      	b.n	8001dc2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d90:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a2c      	ldr	r2, [pc, #176]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fac0 	bl	8001320 <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001da4:	f7ff fabc 	bl	8001320 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1c1      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001db6:	4b24      	ldr	r3, [pc, #144]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 80af 	beq.w	8001f2e <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <HAL_RCC_OscConfig+0x50c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a1d      	ldr	r2, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x50c>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ddc:	f7ff faa0 	bl	8001320 <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001de4:	f7ff fa9c 	bl	8001320 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1a1      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001df6:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <HAL_RCC_OscConfig+0x50c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d106      	bne.n	8001e18 <HAL_RCC_OscConfig+0x4d8>
 8001e0a:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70
 8001e16:	e05b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x590>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d117      	bne.n	8001e50 <HAL_RCC_OscConfig+0x510>
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	4a08      	ldr	r2, [pc, #32]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001e26:	f023 0301 	bic.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e30:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e36:	6713      	str	r3, [r2, #112]	; 0x70
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3c:	4a02      	ldr	r2, [pc, #8]	; (8001e48 <HAL_RCC_OscConfig+0x508>)
 8001e3e:	f023 0304 	bic.w	r3, r3, #4
 8001e42:	6713      	str	r3, [r2, #112]	; 0x70
 8001e44:	e044      	b.n	8001ed0 <HAL_RCC_OscConfig+0x590>
 8001e46:	bf00      	nop
 8001e48:	58024400 	.word	0x58024400
 8001e4c:	58024800 	.word	0x58024800
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d112      	bne.n	8001e7e <HAL_RCC_OscConfig+0x53e>
 8001e58:	4b95      	ldr	r3, [pc, #596]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a94      	ldr	r2, [pc, #592]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e5e:	f043 0304 	orr.w	r3, r3, #4
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
 8001e64:	4b92      	ldr	r3, [pc, #584]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e68:	4a91      	ldr	r2, [pc, #580]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e70:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e74:	4a8e      	ldr	r2, [pc, #568]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7c:	e028      	b.n	8001ed0 <HAL_RCC_OscConfig+0x590>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b85      	cmp	r3, #133	; 0x85
 8001e84:	d112      	bne.n	8001eac <HAL_RCC_OscConfig+0x56c>
 8001e86:	4b8a      	ldr	r3, [pc, #552]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e8a:	4a89      	ldr	r2, [pc, #548]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6713      	str	r3, [r2, #112]	; 0x70
 8001e92:	4b87      	ldr	r3, [pc, #540]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	4a86      	ldr	r2, [pc, #536]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9e:	4b84      	ldr	r3, [pc, #528]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	4a83      	ldr	r2, [pc, #524]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eaa:	e011      	b.n	8001ed0 <HAL_RCC_OscConfig+0x590>
 8001eac:	4b80      	ldr	r3, [pc, #512]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb0:	4a7f      	ldr	r2, [pc, #508]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001eb2:	f023 0301 	bic.w	r3, r3, #1
 8001eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb8:	4b7d      	ldr	r3, [pc, #500]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	4a7c      	ldr	r2, [pc, #496]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ec4:	4b7a      	ldr	r3, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec8:	4a79      	ldr	r2, [pc, #484]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d015      	beq.n	8001f04 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fa22 	bl	8001320 <HAL_GetTick>
 8001edc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fa1e 	bl	8001320 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e121      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ef6:	4b6e      	ldr	r3, [pc, #440]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0ee      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x5a0>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f04:	f7ff fa0c 	bl	8001320 <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fa08 	bl	8001320 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e10b      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1ee      	bne.n	8001f0c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8100 	beq.w	8002138 <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f38:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f40:	2b18      	cmp	r3, #24
 8001f42:	f000 80bb 	beq.w	80020bc <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	f040 8095 	bne.w	800207a <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f50:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a56      	ldr	r2, [pc, #344]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f9e0 	bl	8001320 <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff f9dc 	bl	8001320 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0e1      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f76:	4b4e      	ldr	r3, [pc, #312]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f82:	4b4b      	ldr	r3, [pc, #300]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f86:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <HAL_RCC_OscConfig+0x774>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f92:	0112      	lsls	r2, r2, #4
 8001f94:	430a      	orrs	r2, r1
 8001f96:	4946      	ldr	r1, [pc, #280]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	628b      	str	r3, [r1, #40]	; 0x28
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001faa:	3b01      	subs	r3, #1
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	061b      	lsls	r3, r3, #24
 8001fc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fcc:	4938      	ldr	r1, [pc, #224]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001fd2:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	4a36      	ldr	r2, [pc, #216]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001fd8:	f023 0301 	bic.w	r3, r3, #1
 8001fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001fe0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fe2:	4b35      	ldr	r3, [pc, #212]	; (80020b8 <HAL_RCC_OscConfig+0x778>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fea:	00d2      	lsls	r2, r2, #3
 8001fec:	4930      	ldr	r1, [pc, #192]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f023 020c 	bic.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	492c      	ldr	r1, [pc, #176]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002000:	4313      	orrs	r3, r2
 8002002:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	f023 0202 	bic.w	r2, r3, #2
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	4927      	ldr	r1, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002012:	4313      	orrs	r3, r2
 8002014:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002022:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	4a22      	ldr	r2, [pc, #136]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002032:	4a1f      	ldr	r2, [pc, #124]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002046:	4b1a      	ldr	r3, [pc, #104]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 800204c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002050:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7ff f965 	bl	8001320 <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205a:	f7ff f961 	bl	8001320 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e066      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x71a>
 8002078:	e05e      	b.n	8002138 <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 8002080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff f94b 	bl	8001320 <HAL_GetTick>
 800208a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208e:	f7ff f947 	bl	8001320 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e04c      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_OscConfig+0x770>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x74e>
 80020ac:	e044      	b.n	8002138 <HAL_RCC_OscConfig+0x7f8>
 80020ae:	bf00      	nop
 80020b0:	58024400 	.word	0x58024400
 80020b4:	fffffc0c 	.word	0xfffffc0c
 80020b8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_RCC_OscConfig+0x804>)
 80020be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020c2:	4b20      	ldr	r3, [pc, #128]	; (8002144 <HAL_RCC_OscConfig+0x804>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d031      	beq.n	8002134 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f003 0203 	and.w	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d12a      	bne.n	8002134 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d122      	bne.n	8002134 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d11a      	bne.n	8002134 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0a5b      	lsrs	r3, r3, #9
 8002102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800210c:	429a      	cmp	r2, r3
 800210e:	d111      	bne.n	8002134 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	0c1b      	lsrs	r3, r3, #16
 8002114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d108      	bne.n	8002134 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	0e1b      	lsrs	r3, r3, #24
 8002126:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800212e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3730      	adds	r7, #48	; 0x30
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	58024400 	.word	0x58024400

08002148 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e19c      	b.n	8002496 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800215c:	4b8a      	ldr	r3, [pc, #552]	; (8002388 <HAL_RCC_ClockConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d910      	bls.n	800218c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b87      	ldr	r3, [pc, #540]	; (8002388 <HAL_RCC_ClockConfig+0x240>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f023 020f 	bic.w	r2, r3, #15
 8002172:	4985      	ldr	r1, [pc, #532]	; (8002388 <HAL_RCC_ClockConfig+0x240>)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217a:	4b83      	ldr	r3, [pc, #524]	; (8002388 <HAL_RCC_ClockConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	429a      	cmp	r2, r3
 8002186:	d001      	beq.n	800218c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e184      	b.n	8002496 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d010      	beq.n	80021ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691a      	ldr	r2, [r3, #16]
 800219c:	4b7b      	ldr	r3, [pc, #492]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d908      	bls.n	80021ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021a8:	4b78      	ldr	r3, [pc, #480]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	4975      	ldr	r1, [pc, #468]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d010      	beq.n	80021e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	4b70      	ldr	r3, [pc, #448]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d908      	bls.n	80021e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021d6:	4b6d      	ldr	r3, [pc, #436]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	496a      	ldr	r1, [pc, #424]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d010      	beq.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	4b64      	ldr	r3, [pc, #400]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002200:	429a      	cmp	r2, r3
 8002202:	d908      	bls.n	8002216 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	495e      	ldr	r1, [pc, #376]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002212:	4313      	orrs	r3, r2
 8002214:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0320 	and.w	r3, r3, #32
 800221e:	2b00      	cmp	r3, #0
 8002220:	d010      	beq.n	8002244 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	4b59      	ldr	r3, [pc, #356]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800222e:	429a      	cmp	r2, r3
 8002230:	d908      	bls.n	8002244 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002232:	4b56      	ldr	r3, [pc, #344]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4953      	ldr	r1, [pc, #332]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002240:	4313      	orrs	r3, r2
 8002242:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d010      	beq.n	8002272 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	4b4d      	ldr	r3, [pc, #308]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 030f 	and.w	r3, r3, #15
 800225c:	429a      	cmp	r2, r3
 800225e:	d908      	bls.n	8002272 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b4a      	ldr	r3, [pc, #296]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	f023 020f 	bic.w	r2, r3, #15
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4947      	ldr	r1, [pc, #284]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 800226e:	4313      	orrs	r3, r2
 8002270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d055      	beq.n	800232a <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800227e:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4940      	ldr	r1, [pc, #256]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 800228c:	4313      	orrs	r3, r2
 800228e:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d107      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002298:	4b3c      	ldr	r3, [pc, #240]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d121      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0f6      	b.n	8002496 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022b0:	4b36      	ldr	r3, [pc, #216]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d115      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0ea      	b.n	8002496 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022c8:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0de      	b.n	8002496 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022d8:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0d6      	b.n	8002496 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022e8:	4b28      	ldr	r3, [pc, #160]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	f023 0207 	bic.w	r2, r3, #7
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	4925      	ldr	r1, [pc, #148]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7ff f811 	bl	8001320 <HAL_GetTick>
 80022fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002300:	e00a      	b.n	8002318 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002302:	f7ff f80d 	bl	8001320 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002310:	4293      	cmp	r3, r2
 8002312:	d901      	bls.n	8002318 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e0be      	b.n	8002496 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002318:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	429a      	cmp	r2, r3
 8002328:	d1eb      	bne.n	8002302 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d010      	beq.n	8002358 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	4b14      	ldr	r3, [pc, #80]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	429a      	cmp	r2, r3
 8002344:	d208      	bcs.n	8002358 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002346:	4b11      	ldr	r3, [pc, #68]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	f023 020f 	bic.w	r2, r3, #15
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	490e      	ldr	r1, [pc, #56]	; (800238c <HAL_RCC_ClockConfig+0x244>)
 8002354:	4313      	orrs	r3, r2
 8002356:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x240>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d214      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_RCC_ClockConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 020f 	bic.w	r2, r3, #15
 800236e:	4906      	ldr	r1, [pc, #24]	; (8002388 <HAL_RCC_ClockConfig+0x240>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <HAL_RCC_ClockConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e086      	b.n	8002496 <HAL_RCC_ClockConfig+0x34e>
 8002388:	52002000 	.word	0x52002000
 800238c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d010      	beq.n	80023be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691a      	ldr	r2, [r3, #16]
 80023a0:	4b3f      	ldr	r3, [pc, #252]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d208      	bcs.n	80023be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023ac:	4b3c      	ldr	r3, [pc, #240]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	4939      	ldr	r1, [pc, #228]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d010      	beq.n	80023ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	4b34      	ldr	r3, [pc, #208]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d208      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023da:	4b31      	ldr	r3, [pc, #196]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	492e      	ldr	r1, [pc, #184]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d010      	beq.n	800241a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	699a      	ldr	r2, [r3, #24]
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002404:	429a      	cmp	r2, r3
 8002406:	d208      	bcs.n	800241a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 800240a:	69db      	ldr	r3, [r3, #28]
 800240c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4922      	ldr	r1, [pc, #136]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 8002416:	4313      	orrs	r3, r2
 8002418:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	2b00      	cmp	r3, #0
 8002424:	d010      	beq.n	8002448 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002432:	429a      	cmp	r2, r3
 8002434:	d208      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4917      	ldr	r1, [pc, #92]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 8002444:	4313      	orrs	r3, r2
 8002446:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002448:	f000 f834 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 800244c:	4602      	mov	r2, r0
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f003 030f 	and.w	r3, r3, #15
 8002458:	4912      	ldr	r1, [pc, #72]	; (80024a4 <HAL_RCC_ClockConfig+0x35c>)
 800245a:	5ccb      	ldrb	r3, [r1, r3]
 800245c:	f003 031f 	and.w	r3, r3, #31
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
 8002464:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002466:	4b0e      	ldr	r3, [pc, #56]	; (80024a0 <HAL_RCC_ClockConfig+0x358>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	4a0d      	ldr	r2, [pc, #52]	; (80024a4 <HAL_RCC_ClockConfig+0x35c>)
 8002470:	5cd3      	ldrb	r3, [r2, r3]
 8002472:	f003 031f 	and.w	r3, r3, #31
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x360>)
 800247e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x364>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <HAL_RCC_ClockConfig+0x368>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fdca 	bl	8001024 <HAL_InitTick>
 8002490:	4603      	mov	r3, r0
 8002492:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	58024400 	.word	0x58024400
 80024a4:	08007260 	.word	0x08007260
 80024a8:	240001bc 	.word	0x240001bc
 80024ac:	240001b8 	.word	0x240001b8
 80024b0:	240001c0 	.word	0x240001c0

080024b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b089      	sub	sp, #36	; 0x24
 80024b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024ba:	4bb3      	ldr	r3, [pc, #716]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024c2:	2b18      	cmp	r3, #24
 80024c4:	f200 8155 	bhi.w	8002772 <HAL_RCC_GetSysClockFreq+0x2be>
 80024c8:	a201      	add	r2, pc, #4	; (adr r2, 80024d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	08002535 	.word	0x08002535
 80024d4:	08002773 	.word	0x08002773
 80024d8:	08002773 	.word	0x08002773
 80024dc:	08002773 	.word	0x08002773
 80024e0:	08002773 	.word	0x08002773
 80024e4:	08002773 	.word	0x08002773
 80024e8:	08002773 	.word	0x08002773
 80024ec:	08002773 	.word	0x08002773
 80024f0:	0800255b 	.word	0x0800255b
 80024f4:	08002773 	.word	0x08002773
 80024f8:	08002773 	.word	0x08002773
 80024fc:	08002773 	.word	0x08002773
 8002500:	08002773 	.word	0x08002773
 8002504:	08002773 	.word	0x08002773
 8002508:	08002773 	.word	0x08002773
 800250c:	08002773 	.word	0x08002773
 8002510:	08002561 	.word	0x08002561
 8002514:	08002773 	.word	0x08002773
 8002518:	08002773 	.word	0x08002773
 800251c:	08002773 	.word	0x08002773
 8002520:	08002773 	.word	0x08002773
 8002524:	08002773 	.word	0x08002773
 8002528:	08002773 	.word	0x08002773
 800252c:	08002773 	.word	0x08002773
 8002530:	08002567 	.word	0x08002567
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002534:	4b94      	ldr	r3, [pc, #592]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d009      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002540:	4b91      	ldr	r3, [pc, #580]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	08db      	lsrs	r3, r3, #3
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	4a90      	ldr	r2, [pc, #576]	; (800278c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002552:	e111      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002554:	4b8d      	ldr	r3, [pc, #564]	; (800278c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002556:	61bb      	str	r3, [r7, #24]
    break;
 8002558:	e10e      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800255a:	4b8d      	ldr	r3, [pc, #564]	; (8002790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800255c:	61bb      	str	r3, [r7, #24]
    break;
 800255e:	e10b      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002560:	4b8c      	ldr	r3, [pc, #560]	; (8002794 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002562:	61bb      	str	r3, [r7, #24]
    break;
 8002564:	e108      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002566:	4b88      	ldr	r3, [pc, #544]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002570:	4b85      	ldr	r3, [pc, #532]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800257a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800257c:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002586:	4b80      	ldr	r3, [pc, #512]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258a:	08db      	lsrs	r3, r3, #3
 800258c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80e1 	beq.w	800276c <HAL_RCC_GetSysClockFreq+0x2b8>
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	f000 8083 	beq.w	80026b8 <HAL_RCC_GetSysClockFreq+0x204>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	f200 80a1 	bhi.w	80026fc <HAL_RCC_GetSysClockFreq+0x248>
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x114>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d056      	beq.n	8002674 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025c6:	e099      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025c8:	4b6f      	ldr	r3, [pc, #444]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d02d      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80025d4:	4b6c      	ldr	r3, [pc, #432]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	08db      	lsrs	r3, r3, #3
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	4a6b      	ldr	r2, [pc, #428]	; (800278c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
 80025e4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025fe:	4b62      	ldr	r3, [pc, #392]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800260e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002612:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002798 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800261a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800261e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800262e:	e087      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	ee07 3a90 	vmov	s15, r3
 8002636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800263a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800279c <HAL_RCC_GetSysClockFreq+0x2e8>
 800263e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002642:	4b51      	ldr	r3, [pc, #324]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002652:	ed97 6a02 	vldr	s12, [r7, #8]
 8002656:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800265a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800265e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800266a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002672:	e065      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80027a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002686:	4b40      	ldr	r3, [pc, #256]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268e:	ee07 3a90 	vmov	s15, r3
 8002692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002696:	ed97 6a02 	vldr	s12, [r7, #8]
 800269a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002798 <HAL_RCC_GetSysClockFreq+0x2e4>
 800269e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026b6:	e043      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80027a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ca:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026da:	ed97 6a02 	vldr	s12, [r7, #8]
 80026de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002798 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026fa:	e021      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	ee07 3a90 	vmov	s15, r3
 8002702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002706:	eddf 6a26 	vldr	s13, [pc, #152]	; 80027a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800270a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002716:	ee07 3a90 	vmov	s15, r3
 800271a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002722:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002798 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800272a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800273e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	0a5b      	lsrs	r3, r3, #9
 8002746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800274a:	3301      	adds	r3, #1
 800274c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	ee07 3a90 	vmov	s15, r3
 8002754:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002758:	edd7 6a07 	vldr	s13, [r7, #28]
 800275c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002764:	ee17 3a90 	vmov	r3, s15
 8002768:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800276a:	e005      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	61bb      	str	r3, [r7, #24]
    break;
 8002770:	e002      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002774:	61bb      	str	r3, [r7, #24]
    break;
 8002776:	bf00      	nop
  }

  return sysclockfreq;
 8002778:	69bb      	ldr	r3, [r7, #24]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	58024400 	.word	0x58024400
 800278c:	03d09000 	.word	0x03d09000
 8002790:	003d0900 	.word	0x003d0900
 8002794:	007a1200 	.word	0x007a1200
 8002798:	46000000 	.word	0x46000000
 800279c:	4c742400 	.word	0x4c742400
 80027a0:	4a742400 	.word	0x4a742400
 80027a4:	4af42400 	.word	0x4af42400

080027a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80027ae:	f7ff fe81 	bl	80024b4 <HAL_RCC_GetSysClockFreq>
 80027b2:	4602      	mov	r2, r0
 80027b4:	4b10      	ldr	r3, [pc, #64]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	490f      	ldr	r1, [pc, #60]	; (80027fc <HAL_RCC_GetHCLKFreq+0x54>)
 80027c0:	5ccb      	ldrb	r3, [r1, r3]
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	fa22 f303 	lsr.w	r3, r2, r3
 80027ca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f003 030f 	and.w	r3, r3, #15
 80027d4:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_RCC_GetHCLKFreq+0x54>)
 80027d6:	5cd3      	ldrb	r3, [r2, r3]
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	fa22 f303 	lsr.w	r3, r2, r3
 80027e2:	4a07      	ldr	r2, [pc, #28]	; (8002800 <HAL_RCC_GetHCLKFreq+0x58>)
 80027e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027e6:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <HAL_RCC_GetHCLKFreq+0x58>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	58024400 	.word	0x58024400
 80027fc:	08007260 	.word	0x08007260
 8002800:	240001bc 	.word	0x240001bc
 8002804:	240001b8 	.word	0x240001b8

08002808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800280c:	f7ff ffcc 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 8002810:	4602      	mov	r2, r0
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	4904      	ldr	r1, [pc, #16]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x28>)
 800281e:	5ccb      	ldrb	r3, [r1, r3]
 8002820:	f003 031f 	and.w	r3, r3, #31
 8002824:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002828:	4618      	mov	r0, r3
 800282a:	bd80      	pop	{r7, pc}
 800282c:	58024400 	.word	0x58024400
 8002830:	08007260 	.word	0x08007260

08002834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002838:	f7ff ffb6 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	0a1b      	lsrs	r3, r3, #8
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4904      	ldr	r1, [pc, #16]	; (800285c <HAL_RCC_GetPCLK2Freq+0x28>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	f003 031f 	and.w	r3, r3, #31
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	58024400 	.word	0x58024400
 800285c:	08007260 	.word	0x08007260

08002860 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	223f      	movs	r2, #63	; 0x3f
 800286e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_RCC_GetClockConfig+0x7c>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f003 0207 	and.w	r2, r3, #7
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 800287c:	4b17      	ldr	r3, [pc, #92]	; (80028dc <HAL_RCC_GetClockConfig+0x7c>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <HAL_RCC_GetClockConfig+0x7c>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f003 020f 	and.w	r2, r3, #15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <HAL_RCC_GetClockConfig+0x7c>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 80028a0:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <HAL_RCC_GetClockConfig+0x7c>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_GetClockConfig+0x7c>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <HAL_RCC_GetClockConfig+0x7c>)
 80028ba:	6a1b      	ldr	r3, [r3, #32]
 80028bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_RCC_GetClockConfig+0x80>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 020f 	and.w	r2, r3, #15
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	601a      	str	r2, [r3, #0]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	58024400 	.word	0x58024400
 80028e0:	52002000 	.word	0x52002000

080028e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028ec:	2300      	movs	r3, #0
 80028ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028f0:	2300      	movs	r3, #0
 80028f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d03f      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002904:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002908:	d02a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800290a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800290e:	d824      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002914:	d018      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800291a:	d81e      	bhi.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002924:	d007      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002926:	e018      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002928:	4ba6      	ldr	r3, [pc, #664]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	4aa5      	ldr	r2, [pc, #660]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800292e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002934:	e015      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3304      	adds	r3, #4
 800293a:	2102      	movs	r1, #2
 800293c:	4618      	mov	r0, r3
 800293e:	f001 f99b 	bl	8003c78 <RCCEx_PLL2_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002946:	e00c      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3324      	adds	r3, #36	; 0x24
 800294c:	2102      	movs	r1, #2
 800294e:	4618      	mov	r0, r3
 8002950:	f001 fa44 	bl	8003ddc <RCCEx_PLL3_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002958:	e003      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
      break;
 800295e:	e000      	b.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002960:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002962:	7dfb      	ldrb	r3, [r7, #23]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d109      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002968:	4b96      	ldr	r3, [pc, #600]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800296a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002974:	4993      	ldr	r1, [pc, #588]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002976:	4313      	orrs	r3, r2
 8002978:	650b      	str	r3, [r1, #80]	; 0x50
 800297a:	e001      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d03d      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	2b04      	cmp	r3, #4
 8002992:	d826      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002994:	a201      	add	r2, pc, #4	; (adr r2, 800299c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800299a:	bf00      	nop
 800299c:	080029b1 	.word	0x080029b1
 80029a0:	080029bf 	.word	0x080029bf
 80029a4:	080029d1 	.word	0x080029d1
 80029a8:	080029e9 	.word	0x080029e9
 80029ac:	080029e9 	.word	0x080029e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b0:	4b84      	ldr	r3, [pc, #528]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	4a83      	ldr	r2, [pc, #524]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029bc:	e015      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 f957 	bl	8003c78 <RCCEx_PLL2_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029ce:	e00c      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3324      	adds	r3, #36	; 0x24
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 fa00 	bl	8003ddc <RCCEx_PLL3_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029e0:	e003      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
      break;
 80029e6:	e000      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80029e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f0:	4b74      	ldr	r3, [pc, #464]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f4:	f023 0207 	bic.w	r2, r3, #7
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	4971      	ldr	r1, [pc, #452]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	650b      	str	r3, [r1, #80]	; 0x50
 8002a02:	e001      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d04a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a1c:	d031      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002a1e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002a22:	d82b      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a28:	d02d      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a2e:	d825      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a30:	2bc0      	cmp	r3, #192	; 0xc0
 8002a32:	d02a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002a34:	2bc0      	cmp	r3, #192	; 0xc0
 8002a36:	d821      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a38:	2b80      	cmp	r3, #128	; 0x80
 8002a3a:	d016      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d81d      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d002      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002a44:	2b40      	cmp	r3, #64	; 0x40
 8002a46:	d007      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002a48:	e018      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a4a:	4b5e      	ldr	r3, [pc, #376]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4e:	4a5d      	ldr	r2, [pc, #372]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002a56:	e019      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f001 f90a 	bl	8003c78 <RCCEx_PLL2_Config>
 8002a64:	4603      	mov	r3, r0
 8002a66:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002a68:	e010      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3324      	adds	r3, #36	; 0x24
 8002a6e:	2100      	movs	r1, #0
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 f9b3 	bl	8003ddc <RCCEx_PLL3_Config>
 8002a76:	4603      	mov	r3, r0
 8002a78:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002a7a:	e007      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a80:	e004      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002a82:	bf00      	nop
 8002a84:	e002      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002a86:	bf00      	nop
 8002a88:	e000      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8c:	7dfb      	ldrb	r3, [r7, #23]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002a92:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	4949      	ldr	r1, [pc, #292]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	650b      	str	r3, [r1, #80]	; 0x50
 8002aa4:	e001      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa6:	7dfb      	ldrb	r3, [r7, #23]
 8002aa8:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d04f      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002abe:	d036      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002ac0:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002ac4:	d830      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002ac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aca:	d032      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad0:	d82a      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002ad2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002ad6:	d02e      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002ad8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002adc:	d824      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae2:	d018      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae8:	d81e      	bhi.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002af2:	d007      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002af4:	e018      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002af6:	4b33      	ldr	r3, [pc, #204]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	4a32      	ldr	r2, [pc, #200]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002b02:	e019      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3304      	adds	r3, #4
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f8b4 	bl	8003c78 <RCCEx_PLL2_Config>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002b14:	e010      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3324      	adds	r3, #36	; 0x24
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f001 f95d 	bl	8003ddc <RCCEx_PLL3_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002b26:	e007      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002b2c:	e004      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d109      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002b3e:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b42:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4a:	491e      	ldr	r1, [pc, #120]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	650b      	str	r3, [r1, #80]	; 0x50
 8002b50:	e001      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d034      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b66:	2b30      	cmp	r3, #48	; 0x30
 8002b68:	d01c      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002b6a:	2b30      	cmp	r3, #48	; 0x30
 8002b6c:	d817      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d00c      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002b72:	2b20      	cmp	r3, #32
 8002b74:	d813      	bhi.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d016      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d10f      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b7e:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002b8a:	e00e      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	2102      	movs	r1, #2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 f870 	bl	8003c78 <RCCEx_PLL2_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002b9c:	e005      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8002ba2:	e002      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002ba8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002baa:	7dfb      	ldrb	r3, [r7, #23]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10b      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	4901      	ldr	r1, [pc, #4]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002bc2:	e003      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002bc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bc8:	7dfb      	ldrb	r3, [r7, #23]
 8002bca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d047      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be0:	d030      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be6:	d82a      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002be8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bec:	d02c      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bf2:	d824      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf8:	d018      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bfe:	d81e      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c08:	d007      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002c0a:	e018      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c0c:	4bb0      	ldr	r3, [pc, #704]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	4aaf      	ldr	r2, [pc, #700]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c18:	e017      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f001 f829 	bl	8003c78 <RCCEx_PLL2_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c2a:	e00e      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3324      	adds	r3, #36	; 0x24
 8002c30:	2100      	movs	r1, #0
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 f8d2 	bl	8003ddc <RCCEx_PLL3_Config>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002c3c:	e005      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
      break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002c44:	bf00      	nop
 8002c46:	e000      	b.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002c48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c4a:	7dfb      	ldrb	r3, [r7, #23]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d109      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c50:	4b9f      	ldr	r3, [pc, #636]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5c:	499c      	ldr	r1, [pc, #624]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	650b      	str	r3, [r1, #80]	; 0x50
 8002c62:	e001      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c64:	7dfb      	ldrb	r3, [r7, #23]
 8002c66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d049      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c7c:	d02e      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c82:	d828      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c88:	d02a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002c8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c8e:	d822      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002c90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c94:	d026      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002c96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c9a:	d81c      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002c9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ca0:	d010      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002ca2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ca6:	d816      	bhi.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01d      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb0:	d111      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 ffdd 	bl	8003c78 <RCCEx_PLL2_Config>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002cc2:	e012      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3324      	adds	r3, #36	; 0x24
 8002cc8:	2101      	movs	r1, #1
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f886 	bl	8003ddc <RCCEx_PLL3_Config>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002cd4:	e009      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	75fb      	strb	r3, [r7, #23]
      break;
 8002cda:	e006      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002cdc:	bf00      	nop
 8002cde:	e004      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002ce0:	bf00      	nop
 8002ce2:	e002      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002ce4:	bf00      	nop
 8002ce6:	e000      	b.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002ce8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cea:	7dfb      	ldrb	r3, [r7, #23]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d109      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002cf0:	4b77      	ldr	r3, [pc, #476]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfc:	4974      	ldr	r1, [pc, #464]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	650b      	str	r3, [r1, #80]	; 0x50
 8002d02:	e001      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
 8002d06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d053      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002d1a:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002d1e:	d034      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002d20:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002d24:	d82e      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d2a:	d030      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d30:	d828      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d02c      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d3c:	d822      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002d3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d42:	d028      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002d44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d48:	d81c      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4e:	d010      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002d50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d54:	d816      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01f      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002d5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d5e:	d111      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	2101      	movs	r1, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 ff86 	bl	8003c78 <RCCEx_PLL2_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d70:	e014      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3324      	adds	r3, #36	; 0x24
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 f82f 	bl	8003ddc <RCCEx_PLL3_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002d82:	e00b      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
      break;
 8002d88:	e008      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e006      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e004      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9c:	7dfb      	ldrb	r3, [r7, #23]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002da2:	4b4b      	ldr	r3, [pc, #300]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002db0:	4947      	ldr	r1, [pc, #284]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	658b      	str	r3, [r1, #88]	; 0x58
 8002db6:	e001      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db8:	7dfb      	ldrb	r3, [r7, #23]
 8002dba:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02f      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd0:	d00e      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd6:	d814      	bhi.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d015      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002ddc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de0:	d10f      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002de2:	4b3b      	ldr	r3, [pc, #236]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de6:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002dee:	e00c      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	2101      	movs	r1, #1
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 ff3e 	bl	8003c78 <RCCEx_PLL2_Config>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002e00:	e003      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
      break;
 8002e06:	e000      	b.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002e08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e10:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1c:	492c      	ldr	r1, [pc, #176]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	650b      	str	r3, [r1, #80]	; 0x50
 8002e22:	e001      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d032      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d81b      	bhi.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8002e3c:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8002e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e42:	bf00      	nop
 8002e44:	08002e7b 	.word	0x08002e7b
 8002e48:	08002e55 	.word	0x08002e55
 8002e4c:	08002e63 	.word	0x08002e63
 8002e50:	08002e7b 	.word	0x08002e7b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e54:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	4a1d      	ldr	r2, [pc, #116]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e60:	e00c      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2102      	movs	r1, #2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 ff05 	bl	8003c78 <RCCEx_PLL2_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002e72:	e003      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	75fb      	strb	r3, [r7, #23]
      break;
 8002e78:	e000      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8002e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	f023 0203 	bic.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8e:	4910      	ldr	r1, [pc, #64]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002e94:	e001      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 808a 	beq.w	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a09      	ldr	r2, [pc, #36]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fa34 	bl	8001320 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002eba:	e00d      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebc:	f7fe fa30 	bl	8001320 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d906      	bls.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	75fb      	strb	r3, [r7, #23]
        break;
 8002ece:	e009      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002ed0:	58024400 	.word	0x58024400
 8002ed4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ed8:	4bba      	ldr	r3, [pc, #744]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0eb      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8002ee4:	7dfb      	ldrb	r3, [r7, #23]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d166      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002eea:	4bb7      	ldr	r3, [pc, #732]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002eec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ef4:	4053      	eors	r3, r2
 8002ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d013      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002efe:	4bb2      	ldr	r3, [pc, #712]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f06:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f08:	4baf      	ldr	r3, [pc, #700]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4aae      	ldr	r2, [pc, #696]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f14:	4bac      	ldr	r3, [pc, #688]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	4aab      	ldr	r2, [pc, #684]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f1e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f20:	4aa9      	ldr	r2, [pc, #676]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f30:	d115      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f32:	f7fe f9f5 	bl	8001320 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f38:	e00b      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe f9f1 	bl	8001320 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d902      	bls.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8002f50:	e005      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f52:	4b9d      	ldr	r3, [pc, #628]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0ed      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d126      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f72:	d10d      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8002f74:	4b94      	ldr	r3, [pc, #592]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f82:	0919      	lsrs	r1, r3, #4
 8002f84:	4b91      	ldr	r3, [pc, #580]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	498f      	ldr	r1, [pc, #572]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	610b      	str	r3, [r1, #16]
 8002f8e:	e005      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8002f90:	4b8d      	ldr	r3, [pc, #564]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	4a8c      	ldr	r2, [pc, #560]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002f9a:	6113      	str	r3, [r2, #16]
 8002f9c:	4b8a      	ldr	r3, [pc, #552]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002f9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002faa:	4987      	ldr	r1, [pc, #540]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	670b      	str	r3, [r1, #112]	; 0x70
 8002fb0:	e004      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
 8002fb4:	75bb      	strb	r3, [r7, #22]
 8002fb6:	e001      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d07f      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fce:	2b28      	cmp	r3, #40	; 0x28
 8002fd0:	d866      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	080030a7 	.word	0x080030a7
 8002fdc:	080030a1 	.word	0x080030a1
 8002fe0:	080030a1 	.word	0x080030a1
 8002fe4:	080030a1 	.word	0x080030a1
 8002fe8:	080030a1 	.word	0x080030a1
 8002fec:	080030a1 	.word	0x080030a1
 8002ff0:	080030a1 	.word	0x080030a1
 8002ff4:	080030a1 	.word	0x080030a1
 8002ff8:	0800307d 	.word	0x0800307d
 8002ffc:	080030a1 	.word	0x080030a1
 8003000:	080030a1 	.word	0x080030a1
 8003004:	080030a1 	.word	0x080030a1
 8003008:	080030a1 	.word	0x080030a1
 800300c:	080030a1 	.word	0x080030a1
 8003010:	080030a1 	.word	0x080030a1
 8003014:	080030a1 	.word	0x080030a1
 8003018:	0800308f 	.word	0x0800308f
 800301c:	080030a1 	.word	0x080030a1
 8003020:	080030a1 	.word	0x080030a1
 8003024:	080030a1 	.word	0x080030a1
 8003028:	080030a1 	.word	0x080030a1
 800302c:	080030a1 	.word	0x080030a1
 8003030:	080030a1 	.word	0x080030a1
 8003034:	080030a1 	.word	0x080030a1
 8003038:	080030a7 	.word	0x080030a7
 800303c:	080030a1 	.word	0x080030a1
 8003040:	080030a1 	.word	0x080030a1
 8003044:	080030a1 	.word	0x080030a1
 8003048:	080030a1 	.word	0x080030a1
 800304c:	080030a1 	.word	0x080030a1
 8003050:	080030a1 	.word	0x080030a1
 8003054:	080030a1 	.word	0x080030a1
 8003058:	080030a7 	.word	0x080030a7
 800305c:	080030a1 	.word	0x080030a1
 8003060:	080030a1 	.word	0x080030a1
 8003064:	080030a1 	.word	0x080030a1
 8003068:	080030a1 	.word	0x080030a1
 800306c:	080030a1 	.word	0x080030a1
 8003070:	080030a1 	.word	0x080030a1
 8003074:	080030a1 	.word	0x080030a1
 8003078:	080030a7 	.word	0x080030a7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	2101      	movs	r1, #1
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fdf8 	bl	8003c78 <RCCEx_PLL2_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800308c:	e00c      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3324      	adds	r3, #36	; 0x24
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fea1 	bl	8003ddc <RCCEx_PLL3_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800309e:	e003      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
      break;
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 80030a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80030ae:	4b46      	ldr	r3, [pc, #280]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030bc:	4942      	ldr	r1, [pc, #264]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	654b      	str	r3, [r1, #84]	; 0x54
 80030c2:	e001      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d038      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d8:	2b05      	cmp	r3, #5
 80030da:	d821      	bhi.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80030dc:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	08003127 	.word	0x08003127
 80030e8:	080030fd 	.word	0x080030fd
 80030ec:	0800310f 	.word	0x0800310f
 80030f0:	08003127 	.word	0x08003127
 80030f4:	08003127 	.word	0x08003127
 80030f8:	08003127 	.word	0x08003127
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3304      	adds	r3, #4
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fdb8 	bl	8003c78 <RCCEx_PLL2_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800310c:	e00c      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3324      	adds	r3, #36	; 0x24
 8003112:	2101      	movs	r1, #1
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fe61 	bl	8003ddc <RCCEx_PLL3_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800311e:	e003      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	75fb      	strb	r3, [r7, #23]
      break;
 8003124:	e000      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8003126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d109      	bne.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800312e:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	f023 0207 	bic.w	r2, r3, #7
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313a:	4923      	ldr	r1, [pc, #140]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800313c:	4313      	orrs	r3, r2
 800313e:	654b      	str	r3, [r1, #84]	; 0x54
 8003140:	e001      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003142:	7dfb      	ldrb	r3, [r7, #23]
 8003144:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d040      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003158:	2b05      	cmp	r3, #5
 800315a:	d821      	bhi.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	080031a7 	.word	0x080031a7
 8003168:	0800317d 	.word	0x0800317d
 800316c:	0800318f 	.word	0x0800318f
 8003170:	080031a7 	.word	0x080031a7
 8003174:	080031a7 	.word	0x080031a7
 8003178:	080031a7 	.word	0x080031a7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	2101      	movs	r1, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f000 fd78 	bl	8003c78 <RCCEx_PLL2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800318c:	e00c      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3324      	adds	r3, #36	; 0x24
 8003192:	2101      	movs	r1, #1
 8003194:	4618      	mov	r0, r3
 8003196:	f000 fe21 	bl	8003ddc <RCCEx_PLL3_Config>
 800319a:	4603      	mov	r3, r0
 800319c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800319e:	e003      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	75fb      	strb	r3, [r7, #23]
      break;
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80031a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d110      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	f023 0207 	bic.w	r2, r3, #7
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031bc:	4902      	ldr	r1, [pc, #8]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	658b      	str	r3, [r1, #88]	; 0x58
 80031c2:	e007      	b.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80031c4:	58024800 	.word	0x58024800
 80031c8:	58024400 	.word	0x58024400
 80031cc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d04b      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ea:	d02e      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x966>
 80031ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031f0:	d828      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80031f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f6:	d02a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fc:	d822      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80031fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003202:	d026      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8003204:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003208:	d81c      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800320a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800320e:	d010      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003214:	d816      	bhi.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01d      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800321a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800321e:	d111      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	2100      	movs	r1, #0
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fd26 	bl	8003c78 <RCCEx_PLL2_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003230:	e012      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3324      	adds	r3, #36	; 0x24
 8003236:	2102      	movs	r1, #2
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fdcf 	bl	8003ddc <RCCEx_PLL3_Config>
 800323e:	4603      	mov	r3, r0
 8003240:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003242:	e009      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]
      break;
 8003248:	e006      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800324a:	bf00      	nop
 800324c:	e004      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800324e:	bf00      	nop
 8003250:	e002      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003252:	bf00      	nop
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800325e:	4bb3      	ldr	r3, [pc, #716]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326c:	49af      	ldr	r1, [pc, #700]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800326e:	4313      	orrs	r3, r2
 8003270:	654b      	str	r3, [r1, #84]	; 0x54
 8003272:	e001      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003274:	7dfb      	ldrb	r3, [r7, #23]
 8003276:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003280:	2b00      	cmp	r3, #0
 8003282:	d04b      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800328a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800328e:	d02e      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003290:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003294:	d828      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329a:	d02a      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800329c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a0:	d822      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80032a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032a6:	d026      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80032a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ac:	d81c      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80032ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b2:	d010      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80032b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032b8:	d816      	bhi.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01d      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80032be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032c2:	d111      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3304      	adds	r3, #4
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fcd4 	bl	8003c78 <RCCEx_PLL2_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032d4:	e012      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3324      	adds	r3, #36	; 0x24
 80032da:	2102      	movs	r1, #2
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fd7d 	bl	8003ddc <RCCEx_PLL3_Config>
 80032e2:	4603      	mov	r3, r0
 80032e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80032e6:	e009      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
      break;
 80032ec:	e006      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80032ee:	bf00      	nop
 80032f0:	e004      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80032f2:	bf00      	nop
 80032f4:	e002      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80032f6:	bf00      	nop
 80032f8:	e000      	b.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80032fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10a      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003302:	4b8a      	ldr	r3, [pc, #552]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003306:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003310:	4986      	ldr	r1, [pc, #536]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003312:	4313      	orrs	r3, r2
 8003314:	658b      	str	r3, [r1, #88]	; 0x58
 8003316:	e001      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003324:	2b00      	cmp	r3, #0
 8003326:	d04b      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800332e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003332:	d02e      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003334:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003338:	d828      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800333e:	d02a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003344:	d822      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003346:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800334a:	d026      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800334c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003350:	d81c      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003352:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003356:	d010      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8003358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800335c:	d816      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d01d      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003366:	d111      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fc82 	bl	8003c78 <RCCEx_PLL2_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003378:	e012      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3324      	adds	r3, #36	; 0x24
 800337e:	2102      	movs	r1, #2
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fd2b 	bl	8003ddc <RCCEx_PLL3_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800338a:	e009      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	75fb      	strb	r3, [r7, #23]
      break;
 8003390:	e006      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003392:	bf00      	nop
 8003394:	e004      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003396:	bf00      	nop
 8003398:	e002      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800339a:	bf00      	nop
 800339c:	e000      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800339e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80033a6:	4b61      	ldr	r3, [pc, #388]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033b4:	495d      	ldr	r1, [pc, #372]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	658b      	str	r3, [r1, #88]	; 0x58
 80033ba:	e001      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d6:	d10a      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3324      	adds	r3, #36	; 0x24
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fcfc 	bl	8003ddc <RCCEx_PLL3_Config>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033ee:	4b4f      	ldr	r3, [pc, #316]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	494b      	ldr	r1, [pc, #300]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0310 	and.w	r3, r3, #16
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003418:	d10a      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3324      	adds	r3, #36	; 0x24
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fcdb 	bl	8003ddc <RCCEx_PLL3_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003430:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800343e:	493b      	ldr	r1, [pc, #236]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003440:	4313      	orrs	r3, r2
 8003442:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d034      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800345a:	d01d      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800345c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003460:	d817      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 8003466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346a:	d009      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800346c:	e011      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fbff 	bl	8003c78 <RCCEx_PLL2_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800347e:	e00c      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3324      	adds	r3, #36	; 0x24
 8003484:	2102      	movs	r1, #2
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fca8 	bl	8003ddc <RCCEx_PLL3_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003490:	e003      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	75fb      	strb	r3, [r7, #23]
      break;
 8003496:	e000      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 8003498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034ae:	491f      	ldr	r1, [pc, #124]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	658b      	str	r3, [r1, #88]	; 0x58
 80034b4:	e001      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d036      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034d0:	d01c      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80034d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034d6:	d816      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80034d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034dc:	d003      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80034de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034e2:	d007      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80034e4:	e00f      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034e6:	4b11      	ldr	r3, [pc, #68]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ea:	4a10      	ldr	r2, [pc, #64]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80034f2:	e00c      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3324      	adds	r3, #36	; 0x24
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fc6e 	bl	8003ddc <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
      break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800350c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350e:	7dfb      	ldrb	r3, [r7, #23]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10d      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003522:	4902      	ldr	r1, [pc, #8]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003524:	4313      	orrs	r3, r2
 8003526:	654b      	str	r3, [r1, #84]	; 0x54
 8003528:	e004      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800352a:	bf00      	nop
 800352c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d029      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d007      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 800354e:	e00f      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003550:	4b69      	ldr	r3, [pc, #420]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	4a68      	ldr	r2, [pc, #416]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800355c:	e00b      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2102      	movs	r1, #2
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fb87 	bl	8003c78 <RCCEx_PLL2_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800356e:	e002      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	75fb      	strb	r3, [r7, #23]
      break;
 8003574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003576:	7dfb      	ldrb	r3, [r7, #23]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800357c:	4b5e      	ldr	r3, [pc, #376]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800357e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003580:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003588:	495b      	ldr	r1, [pc, #364]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800358a:	4313      	orrs	r3, r2
 800358c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800358e:	e001      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3324      	adds	r3, #36	; 0x24
 80035a4:	2102      	movs	r1, #2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fc18 	bl	8003ddc <RCCEx_PLL3_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d032      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035cc:	d017      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80035ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035d2:	d811      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80035d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d8:	d013      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80035da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035de:	d80b      	bhi.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80035e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e8:	d106      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ea:	4b43      	ldr	r3, [pc, #268]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	4a42      	ldr	r2, [pc, #264]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80035f6:	e007      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	75fb      	strb	r3, [r7, #23]
      break;
 80035fc:	e004      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 8003606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003612:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800361c:	4936      	ldr	r1, [pc, #216]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800361e:	4313      	orrs	r3, r2
 8003620:	654b      	str	r3, [r1, #84]	; 0x54
 8003622:	e001      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003634:	4b30      	ldr	r3, [pc, #192]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003640:	492d      	ldr	r1, [pc, #180]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003642:	4313      	orrs	r3, r2
 8003644:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003652:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003656:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365e:	4926      	ldr	r1, [pc, #152]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003660:	4313      	orrs	r3, r2
 8003662:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003670:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	491e      	ldr	r1, [pc, #120]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800367e:	4313      	orrs	r3, r2
 8003680:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800368e:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	4a19      	ldr	r2, [pc, #100]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003694:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003698:	6113      	str	r3, [r2, #16]
 800369a:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80036a4:	4914      	ldr	r1, [pc, #80]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	da08      	bge.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	490e      	ldr	r1, [pc, #56]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d009      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036d0:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	4906      	ldr	r1, [pc, #24]	; (80036f8 <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80036e4:	7dbb      	ldrb	r3, [r7, #22]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	58024400 	.word	0x58024400

080036fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8003700:	f7ff f852 	bl	80027a8 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b06      	ldr	r3, [pc, #24]	; (8003720 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	091b      	lsrs	r3, r3, #4
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4904      	ldr	r1, [pc, #16]	; (8003724 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	58024400 	.word	0x58024400
 8003724:	08007260 	.word	0x08007260

08003728 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003728:	b480      	push	{r7}
 800372a:	b089      	sub	sp, #36	; 0x24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003730:	4ba1      	ldr	r3, [pc, #644]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800373a:	4b9f      	ldr	r3, [pc, #636]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	0b1b      	lsrs	r3, r3, #12
 8003740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003744:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003746:	4b9c      	ldr	r3, [pc, #624]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003752:	4b99      	ldr	r3, [pc, #612]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003756:	08db      	lsrs	r3, r3, #3
 8003758:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	fb02 f303 	mul.w	r3, r2, r3
 8003762:	ee07 3a90 	vmov	s15, r3
 8003766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800376a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8111 	beq.w	8003998 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b02      	cmp	r3, #2
 800377a:	f000 8083 	beq.w	8003884 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	2b02      	cmp	r3, #2
 8003782:	f200 80a1 	bhi.w	80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d056      	beq.n	8003840 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003792:	e099      	b.n	80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003794:	4b88      	ldr	r3, [pc, #544]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02d      	beq.n	80037fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037a0:	4b85      	ldr	r3, [pc, #532]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	08db      	lsrs	r3, r3, #3
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	4a84      	ldr	r2, [pc, #528]	; (80039bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037ac:	fa22 f303 	lsr.w	r3, r2, r3
 80037b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	ee07 3a90 	vmov	s15, r3
 80037b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	ee07 3a90 	vmov	s15, r3
 80037c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b7b      	ldr	r3, [pc, #492]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a03 	vldr	s12, [r7, #12]
 80037de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80037fa:	e087      	b.n	800390c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003822:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800383e:	e065      	b.n	800390c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800384a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800384e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003852:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003862:	ed97 6a03 	vldr	s12, [r7, #12]
 8003866:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800386a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003876:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800387a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800387e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003882:	e043      	b.n	800390c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	ee07 3a90 	vmov	s15, r3
 800388a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003896:	4b48      	ldr	r3, [pc, #288]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038c6:	e021      	b.n	800390c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038da:	4b37      	ldr	r3, [pc, #220]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e2:	ee07 3a90 	vmov	s15, r3
 80038e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003906:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800390a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800390c:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	0a5b      	lsrs	r3, r3, #9
 8003912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003922:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003926:	edd7 6a07 	vldr	s13, [r7, #28]
 800392a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800392e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003932:	ee17 2a90 	vmov	r2, s15
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800393a:	4b1f      	ldr	r3, [pc, #124]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	0c1b      	lsrs	r3, r3, #16
 8003940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003950:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003954:	edd7 6a07 	vldr	s13, [r7, #28]
 8003958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003960:	ee17 2a90 	vmov	r2, s15
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003968:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	0e1b      	lsrs	r3, r3, #24
 800396e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800397e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003982:	edd7 6a07 	vldr	s13, [r7, #28]
 8003986:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800398e:	ee17 2a90 	vmov	r2, s15
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003996:	e008      	b.n	80039aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
}
 80039aa:	bf00      	nop
 80039ac:	3724      	adds	r7, #36	; 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	58024400 	.word	0x58024400
 80039bc:	03d09000 	.word	0x03d09000
 80039c0:	46000000 	.word	0x46000000
 80039c4:	4c742400 	.word	0x4c742400
 80039c8:	4a742400 	.word	0x4a742400
 80039cc:	4af42400 	.word	0x4af42400

080039d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039d8:	4ba1      	ldr	r3, [pc, #644]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80039e2:	4b9f      	ldr	r3, [pc, #636]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e6:	0d1b      	lsrs	r3, r3, #20
 80039e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80039ee:	4b9c      	ldr	r3, [pc, #624]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f2:	0a1b      	lsrs	r3, r3, #8
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80039fa:	4b99      	ldr	r3, [pc, #612]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	08db      	lsrs	r3, r3, #3
 8003a00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	fb02 f303 	mul.w	r3, r2, r3
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 8111 	beq.w	8003c40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	f000 8083 	beq.w	8003b2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	f200 80a1 	bhi.w	8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d056      	beq.n	8003ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a3a:	e099      	b.n	8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a3c:	4b88      	ldr	r3, [pc, #544]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0320 	and.w	r3, r3, #32
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d02d      	beq.n	8003aa4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a48:	4b85      	ldr	r3, [pc, #532]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	4a84      	ldr	r2, [pc, #528]	; (8003c64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
 8003a58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a72:	4b7b      	ldr	r3, [pc, #492]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a86:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003aa2:	e087      	b.n	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ab6:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ae6:	e065      	b.n	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	ee07 3a90 	vmov	s15, r3
 8003aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afa:	4b59      	ldr	r3, [pc, #356]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b02:	ee07 3a90 	vmov	s15, r3
 8003b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b2a:	e043      	b.n	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3e:	4b48      	ldr	r3, [pc, #288]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003b6e:	e021      	b.n	8003bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b82:	4b37      	ldr	r3, [pc, #220]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003bb4:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb8:	0a5b      	lsrs	r3, r3, #9
 8003bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bbe:	ee07 3a90 	vmov	s15, r3
 8003bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bda:	ee17 2a90 	vmov	r2, s15
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003be2:	4b1f      	ldr	r3, [pc, #124]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bec:	ee07 3a90 	vmov	s15, r3
 8003bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003bf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c08:	ee17 2a90 	vmov	r2, s15
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	0e1b      	lsrs	r3, r3, #24
 8003c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c36:	ee17 2a90 	vmov	r2, s15
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c3e:	e008      	b.n	8003c52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
}
 8003c52:	bf00      	nop
 8003c54:	3724      	adds	r7, #36	; 0x24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	58024400 	.word	0x58024400
 8003c64:	03d09000 	.word	0x03d09000
 8003c68:	46000000 	.word	0x46000000
 8003c6c:	4c742400 	.word	0x4c742400
 8003c70:	4a742400 	.word	0x4a742400
 8003c74:	4af42400 	.word	0x4af42400

08003c78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003c86:	4b53      	ldr	r3, [pc, #332]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b03      	cmp	r3, #3
 8003c90:	d101      	bne.n	8003c96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e099      	b.n	8003dca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003c96:	4b4f      	ldr	r3, [pc, #316]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a4e      	ldr	r2, [pc, #312]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003c9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ca2:	f7fd fb3d 	bl	8001320 <HAL_GetTick>
 8003ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ca8:	e008      	b.n	8003cbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003caa:	f7fd fb39 	bl	8001320 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e086      	b.n	8003dca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cbc:	4b45      	ldr	r3, [pc, #276]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1f0      	bne.n	8003caa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003cc8:	4b42      	ldr	r3, [pc, #264]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ccc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	031b      	lsls	r3, r3, #12
 8003cd6:	493f      	ldr	r1, [pc, #252]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	628b      	str	r3, [r1, #40]	; 0x28
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	025b      	lsls	r3, r3, #9
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	041b      	lsls	r3, r3, #16
 8003cfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	3b01      	subs	r3, #1
 8003d06:	061b      	lsls	r3, r3, #24
 8003d08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d0c:	4931      	ldr	r1, [pc, #196]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d12:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	492d      	ldr	r1, [pc, #180]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d24:	4b2b      	ldr	r3, [pc, #172]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	f023 0220 	bic.w	r2, r3, #32
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	4928      	ldr	r1, [pc, #160]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d36:	4b27      	ldr	r3, [pc, #156]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d3c:	f023 0310 	bic.w	r3, r3, #16
 8003d40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <RCCEx_PLL2_Config+0x160>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	69d2      	ldr	r2, [r2, #28]
 8003d4e:	00d2      	lsls	r2, r2, #3
 8003d50:	4920      	ldr	r1, [pc, #128]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d56:	4b1f      	ldr	r3, [pc, #124]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d5c:	f043 0310 	orr.w	r3, r3, #16
 8003d60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6c:	4a19      	ldr	r2, [pc, #100]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d74:	e00f      	b.n	8003d96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d106      	bne.n	8003d8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d7c:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	4a14      	ldr	r2, [pc, #80]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d88:	e005      	b.n	8003d96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003d8a:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	4a11      	ldr	r2, [pc, #68]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003d96:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003da0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da2:	f7fd fabd 	bl	8001320 <HAL_GetTick>
 8003da6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003da8:	e008      	b.n	8003dbc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003daa:	f7fd fab9 	bl	8001320 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e006      	b.n	8003dca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <RCCEx_PLL2_Config+0x15c>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f0      	beq.n	8003daa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	58024400 	.word	0x58024400
 8003dd8:	ffff0007 	.word	0xffff0007

08003ddc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dea:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d101      	bne.n	8003dfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e099      	b.n	8003f2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003dfa:	4b4f      	ldr	r3, [pc, #316]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a4e      	ldr	r2, [pc, #312]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e06:	f7fd fa8b 	bl	8001320 <HAL_GetTick>
 8003e0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e0e:	f7fd fa87 	bl	8001320 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e086      	b.n	8003f2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e20:	4b45      	ldr	r3, [pc, #276]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1f0      	bne.n	8003e0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e2c:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	051b      	lsls	r3, r3, #20
 8003e3a:	493f      	ldr	r1, [pc, #252]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	628b      	str	r3, [r1, #40]	; 0x28
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	025b      	lsls	r3, r3, #9
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	041b      	lsls	r3, r3, #16
 8003e5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	061b      	lsls	r3, r3, #24
 8003e6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e70:	4931      	ldr	r1, [pc, #196]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e76:	4b30      	ldr	r3, [pc, #192]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	492d      	ldr	r1, [pc, #180]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003e88:	4b2b      	ldr	r3, [pc, #172]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	4928      	ldr	r1, [pc, #160]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003e9a:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ea6:	4b24      	ldr	r3, [pc, #144]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eaa:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <RCCEx_PLL3_Config+0x160>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	69d2      	ldr	r2, [r2, #28]
 8003eb2:	00d2      	lsls	r2, r2, #3
 8003eb4:	4920      	ldr	r1, [pc, #128]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003eba:	4b1f      	ldr	r3, [pc, #124]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	4a1e      	ldr	r2, [pc, #120]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	4a19      	ldr	r2, [pc, #100]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ed2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ed6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ed8:	e00f      	b.n	8003efa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d106      	bne.n	8003eee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ee0:	4b15      	ldr	r3, [pc, #84]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ee6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003eec:	e005      	b.n	8003efa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	4a11      	ldr	r2, [pc, #68]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ef8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003efa:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a0e      	ldr	r2, [pc, #56]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f06:	f7fd fa0b 	bl	8001320 <HAL_GetTick>
 8003f0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f0c:	e008      	b.n	8003f20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f0e:	f7fd fa07 	bl	8001320 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e006      	b.n	8003f2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <RCCEx_PLL3_Config+0x15c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	58024400 	.word	0x58024400
 8003f3c:	ffff0007 	.word	0xffff0007

08003f40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e049      	b.n	8003fe6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d106      	bne.n	8003f6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f841 	bl	8003fee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	3304      	adds	r3, #4
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f000 fa00 	bl	8004384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3708      	adds	r7, #8
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b01      	cmp	r3, #1
 8004016:	d001      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e054      	b.n	80040c6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0201 	orr.w	r2, r2, #1
 8004032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d022      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d01d      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d018      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a21      	ldr	r2, [pc, #132]	; (80040dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d013      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a1f      	ldr	r2, [pc, #124]	; (80040e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00e      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a1e      	ldr	r2, [pc, #120]	; (80040e4 <HAL_TIM_Base_Start_IT+0xe0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d009      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <HAL_TIM_Base_Start_IT+0xe4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <HAL_TIM_Base_Start_IT+0x80>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <HAL_TIM_Base_Start_IT+0xe8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d115      	bne.n	80040b0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_TIM_Base_Start_IT+0xec>)
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b06      	cmp	r3, #6
 8004094:	d015      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0xbe>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800409c:	d011      	beq.n	80040c2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e008      	b.n	80040c2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e000      	b.n	80040c4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40010400 	.word	0x40010400
 80040e8:	40001800 	.word	0x40001800
 80040ec:	40014000 	.word	0x40014000
 80040f0:	00010007 	.word	0x00010007

080040f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d122      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b02      	cmp	r3, #2
 8004116:	d11b      	bne.n	8004150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f06f 0202 	mvn.w	r2, #2
 8004120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f905 	bl	8004346 <HAL_TIM_IC_CaptureCallback>
 800413c:	e005      	b.n	800414a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8f7 	bl	8004332 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f908 	bl	800435a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d122      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b04      	cmp	r3, #4
 800416a:	d11b      	bne.n	80041a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0204 	mvn.w	r2, #4
 8004174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2202      	movs	r2, #2
 800417a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8db 	bl	8004346 <HAL_TIM_IC_CaptureCallback>
 8004190:	e005      	b.n	800419e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f8cd 	bl	8004332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 f8de 	bl	800435a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d122      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	f003 0308 	and.w	r3, r3, #8
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d11b      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0208 	mvn.w	r2, #8
 80041c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2204      	movs	r2, #4
 80041ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8b1 	bl	8004346 <HAL_TIM_IC_CaptureCallback>
 80041e4:	e005      	b.n	80041f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f8a3 	bl	8004332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 f8b4 	bl	800435a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d122      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b10      	cmp	r3, #16
 8004212:	d11b      	bne.n	800424c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f06f 0210 	mvn.w	r2, #16
 800421c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2208      	movs	r2, #8
 8004222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f887 	bl	8004346 <HAL_TIM_IC_CaptureCallback>
 8004238:	e005      	b.n	8004246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f879 	bl	8004332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 f88a 	bl	800435a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10e      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	d107      	bne.n	8004278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0201 	mvn.w	r2, #1
 8004270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7fc fe3e 	bl	8000ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d10e      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004290:	2b80      	cmp	r3, #128	; 0x80
 8004292:	d107      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f914 	bl	80044cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b2:	d10e      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042be:	2b80      	cmp	r3, #128	; 0x80
 80042c0:	d107      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f907 	bl	80044e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d10e      	bne.n	80042fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ea:	2b40      	cmp	r3, #64	; 0x40
 80042ec:	d107      	bne.n	80042fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f838 	bl	800436e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	f003 0320 	and.w	r3, r3, #32
 8004308:	2b20      	cmp	r3, #32
 800430a:	d10e      	bne.n	800432a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b20      	cmp	r3, #32
 8004318:	d107      	bne.n	800432a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f06f 0220 	mvn.w	r2, #32
 8004322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f8c7 	bl	80044b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
	...

08004384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a40      	ldr	r2, [pc, #256]	; (8004498 <TIM_Base_SetConfig+0x114>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d013      	beq.n	80043c4 <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a2:	d00f      	beq.n	80043c4 <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3d      	ldr	r2, [pc, #244]	; (800449c <TIM_Base_SetConfig+0x118>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00b      	beq.n	80043c4 <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3c      	ldr	r2, [pc, #240]	; (80044a0 <TIM_Base_SetConfig+0x11c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d007      	beq.n	80043c4 <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3b      	ldr	r2, [pc, #236]	; (80044a4 <TIM_Base_SetConfig+0x120>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d003      	beq.n	80043c4 <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a3a      	ldr	r2, [pc, #232]	; (80044a8 <TIM_Base_SetConfig+0x124>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d108      	bne.n	80043d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <TIM_Base_SetConfig+0x114>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01f      	beq.n	800441e <TIM_Base_SetConfig+0x9a>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e4:	d01b      	beq.n	800441e <TIM_Base_SetConfig+0x9a>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2c      	ldr	r2, [pc, #176]	; (800449c <TIM_Base_SetConfig+0x118>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d017      	beq.n	800441e <TIM_Base_SetConfig+0x9a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <TIM_Base_SetConfig+0x11c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <TIM_Base_SetConfig+0x9a>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <TIM_Base_SetConfig+0x120>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00f      	beq.n	800441e <TIM_Base_SetConfig+0x9a>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a29      	ldr	r2, [pc, #164]	; (80044a8 <TIM_Base_SetConfig+0x124>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d00b      	beq.n	800441e <TIM_Base_SetConfig+0x9a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a28      	ldr	r2, [pc, #160]	; (80044ac <TIM_Base_SetConfig+0x128>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d007      	beq.n	800441e <TIM_Base_SetConfig+0x9a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a27      	ldr	r2, [pc, #156]	; (80044b0 <TIM_Base_SetConfig+0x12c>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d003      	beq.n	800441e <TIM_Base_SetConfig+0x9a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <TIM_Base_SetConfig+0x130>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d108      	bne.n	8004430 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a10      	ldr	r2, [pc, #64]	; (8004498 <TIM_Base_SetConfig+0x114>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d00f      	beq.n	800447c <TIM_Base_SetConfig+0xf8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <TIM_Base_SetConfig+0x124>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d00b      	beq.n	800447c <TIM_Base_SetConfig+0xf8>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a11      	ldr	r2, [pc, #68]	; (80044ac <TIM_Base_SetConfig+0x128>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d007      	beq.n	800447c <TIM_Base_SetConfig+0xf8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <TIM_Base_SetConfig+0x12c>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d003      	beq.n	800447c <TIM_Base_SetConfig+0xf8>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a0f      	ldr	r2, [pc, #60]	; (80044b4 <TIM_Base_SetConfig+0x130>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d103      	bne.n	8004484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	615a      	str	r2, [r3, #20]
}
 800448a:	bf00      	nop
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	40014800 	.word	0x40014800

080044b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e042      	b.n	800458c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7fc fd1d 	bl	8000f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2224      	movs	r2, #36	; 0x24
 8004522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f8c2 	bl	80046c0 <UART_SetConfig>
 800453c:	4603      	mov	r3, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e022      	b.n	800458c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 ff14 	bl	800537c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 ff9b 	bl	80054c0 <UART_CheckIdleState>
 800458a:	4603      	mov	r3, r0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	f040 8083 	bne.w	80046b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_UART_Transmit+0x28>
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e07b      	b.n	80046b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_UART_Transmit+0x3a>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e074      	b.n	80046b8 <HAL_UART_Transmit+0x124>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2221      	movs	r2, #33	; 0x21
 80045e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045e6:	f7fc fe9b 	bl	8001320 <HAL_GetTick>
 80045ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	88fa      	ldrh	r2, [r7, #6]
 80045f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004604:	d108      	bne.n	8004618 <HAL_UART_Transmit+0x84>
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	61bb      	str	r3, [r7, #24]
 8004616:	e003      	b.n	8004620 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004628:	e02c      	b.n	8004684 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	9300      	str	r3, [sp, #0]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2200      	movs	r2, #0
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 ff8e 	bl	8005556 <UART_WaitOnFlagUntilTimeout>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d001      	beq.n	8004644 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e039      	b.n	80046b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004658:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	3302      	adds	r3, #2
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	e007      	b.n	8004672 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	3301      	adds	r3, #1
 8004670:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1cc      	bne.n	800462a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2200      	movs	r2, #0
 8004698:	2140      	movs	r1, #64	; 0x40
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 ff5b 	bl	8005556 <UART_WaitOnFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e006      	b.n	80046b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80046b2:	2300      	movs	r3, #0
 80046b4:	e000      	b.n	80046b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
  }
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046c0:	b5b0      	push	{r4, r5, r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4bbf      	ldr	r3, [pc, #764]	; (80049ec <UART_SetConfig+0x32c>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046f6:	430b      	orrs	r3, r1
 80046f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4ab5      	ldr	r2, [pc, #724]	; (80049f0 <UART_SetConfig+0x330>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d004      	beq.n	800472a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004726:	4313      	orrs	r3, r2
 8004728:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4bb0      	ldr	r3, [pc, #704]	; (80049f4 <UART_SetConfig+0x334>)
 8004732:	4013      	ands	r3, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800473a:	430b      	orrs	r3, r1
 800473c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f023 010f 	bic.w	r1, r3, #15
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4aa7      	ldr	r2, [pc, #668]	; (80049f8 <UART_SetConfig+0x338>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d176      	bne.n	800484c <UART_SetConfig+0x18c>
 800475e:	4ba7      	ldr	r3, [pc, #668]	; (80049fc <UART_SetConfig+0x33c>)
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004766:	2b28      	cmp	r3, #40	; 0x28
 8004768:	d86c      	bhi.n	8004844 <UART_SetConfig+0x184>
 800476a:	a201      	add	r2, pc, #4	; (adr r2, 8004770 <UART_SetConfig+0xb0>)
 800476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004770:	08004815 	.word	0x08004815
 8004774:	08004845 	.word	0x08004845
 8004778:	08004845 	.word	0x08004845
 800477c:	08004845 	.word	0x08004845
 8004780:	08004845 	.word	0x08004845
 8004784:	08004845 	.word	0x08004845
 8004788:	08004845 	.word	0x08004845
 800478c:	08004845 	.word	0x08004845
 8004790:	0800481d 	.word	0x0800481d
 8004794:	08004845 	.word	0x08004845
 8004798:	08004845 	.word	0x08004845
 800479c:	08004845 	.word	0x08004845
 80047a0:	08004845 	.word	0x08004845
 80047a4:	08004845 	.word	0x08004845
 80047a8:	08004845 	.word	0x08004845
 80047ac:	08004845 	.word	0x08004845
 80047b0:	08004825 	.word	0x08004825
 80047b4:	08004845 	.word	0x08004845
 80047b8:	08004845 	.word	0x08004845
 80047bc:	08004845 	.word	0x08004845
 80047c0:	08004845 	.word	0x08004845
 80047c4:	08004845 	.word	0x08004845
 80047c8:	08004845 	.word	0x08004845
 80047cc:	08004845 	.word	0x08004845
 80047d0:	0800482d 	.word	0x0800482d
 80047d4:	08004845 	.word	0x08004845
 80047d8:	08004845 	.word	0x08004845
 80047dc:	08004845 	.word	0x08004845
 80047e0:	08004845 	.word	0x08004845
 80047e4:	08004845 	.word	0x08004845
 80047e8:	08004845 	.word	0x08004845
 80047ec:	08004845 	.word	0x08004845
 80047f0:	08004835 	.word	0x08004835
 80047f4:	08004845 	.word	0x08004845
 80047f8:	08004845 	.word	0x08004845
 80047fc:	08004845 	.word	0x08004845
 8004800:	08004845 	.word	0x08004845
 8004804:	08004845 	.word	0x08004845
 8004808:	08004845 	.word	0x08004845
 800480c:	08004845 	.word	0x08004845
 8004810:	0800483d 	.word	0x0800483d
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800481a:	e326      	b.n	8004e6a <UART_SetConfig+0x7aa>
 800481c:	2304      	movs	r3, #4
 800481e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004822:	e322      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004824:	2308      	movs	r3, #8
 8004826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800482a:	e31e      	b.n	8004e6a <UART_SetConfig+0x7aa>
 800482c:	2310      	movs	r3, #16
 800482e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004832:	e31a      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004834:	2320      	movs	r3, #32
 8004836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800483a:	e316      	b.n	8004e6a <UART_SetConfig+0x7aa>
 800483c:	2340      	movs	r3, #64	; 0x40
 800483e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004842:	e312      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800484a:	e30e      	b.n	8004e6a <UART_SetConfig+0x7aa>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a6b      	ldr	r2, [pc, #428]	; (8004a00 <UART_SetConfig+0x340>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d130      	bne.n	80048b8 <UART_SetConfig+0x1f8>
 8004856:	4b69      	ldr	r3, [pc, #420]	; (80049fc <UART_SetConfig+0x33c>)
 8004858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	2b05      	cmp	r3, #5
 8004860:	d826      	bhi.n	80048b0 <UART_SetConfig+0x1f0>
 8004862:	a201      	add	r2, pc, #4	; (adr r2, 8004868 <UART_SetConfig+0x1a8>)
 8004864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004868:	08004881 	.word	0x08004881
 800486c:	08004889 	.word	0x08004889
 8004870:	08004891 	.word	0x08004891
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a1 	.word	0x080048a1
 800487c:	080048a9 	.word	0x080048a9
 8004880:	2300      	movs	r3, #0
 8004882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004886:	e2f0      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004888:	2304      	movs	r3, #4
 800488a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800488e:	e2ec      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004890:	2308      	movs	r3, #8
 8004892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004896:	e2e8      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004898:	2310      	movs	r3, #16
 800489a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800489e:	e2e4      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80048a0:	2320      	movs	r3, #32
 80048a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048a6:	e2e0      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80048a8:	2340      	movs	r3, #64	; 0x40
 80048aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048ae:	e2dc      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048b6:	e2d8      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a51      	ldr	r2, [pc, #324]	; (8004a04 <UART_SetConfig+0x344>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d130      	bne.n	8004924 <UART_SetConfig+0x264>
 80048c2:	4b4e      	ldr	r3, [pc, #312]	; (80049fc <UART_SetConfig+0x33c>)
 80048c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	2b05      	cmp	r3, #5
 80048cc:	d826      	bhi.n	800491c <UART_SetConfig+0x25c>
 80048ce:	a201      	add	r2, pc, #4	; (adr r2, 80048d4 <UART_SetConfig+0x214>)
 80048d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d4:	080048ed 	.word	0x080048ed
 80048d8:	080048f5 	.word	0x080048f5
 80048dc:	080048fd 	.word	0x080048fd
 80048e0:	08004905 	.word	0x08004905
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004915 	.word	0x08004915
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048f2:	e2ba      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80048fa:	e2b6      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004902:	e2b2      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004904:	2310      	movs	r3, #16
 8004906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800490a:	e2ae      	b.n	8004e6a <UART_SetConfig+0x7aa>
 800490c:	2320      	movs	r3, #32
 800490e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004912:	e2aa      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004914:	2340      	movs	r3, #64	; 0x40
 8004916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800491a:	e2a6      	b.n	8004e6a <UART_SetConfig+0x7aa>
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004922:	e2a2      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a37      	ldr	r2, [pc, #220]	; (8004a08 <UART_SetConfig+0x348>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d130      	bne.n	8004990 <UART_SetConfig+0x2d0>
 800492e:	4b33      	ldr	r3, [pc, #204]	; (80049fc <UART_SetConfig+0x33c>)
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	2b05      	cmp	r3, #5
 8004938:	d826      	bhi.n	8004988 <UART_SetConfig+0x2c8>
 800493a:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <UART_SetConfig+0x280>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004959 	.word	0x08004959
 8004944:	08004961 	.word	0x08004961
 8004948:	08004969 	.word	0x08004969
 800494c:	08004971 	.word	0x08004971
 8004950:	08004979 	.word	0x08004979
 8004954:	08004981 	.word	0x08004981
 8004958:	2300      	movs	r3, #0
 800495a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800495e:	e284      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004960:	2304      	movs	r3, #4
 8004962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004966:	e280      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004968:	2308      	movs	r3, #8
 800496a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800496e:	e27c      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004970:	2310      	movs	r3, #16
 8004972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004976:	e278      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004978:	2320      	movs	r3, #32
 800497a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800497e:	e274      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004980:	2340      	movs	r3, #64	; 0x40
 8004982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004986:	e270      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800498e:	e26c      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <UART_SetConfig+0x34c>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d142      	bne.n	8004a20 <UART_SetConfig+0x360>
 800499a:	4b18      	ldr	r3, [pc, #96]	; (80049fc <UART_SetConfig+0x33c>)
 800499c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	2b05      	cmp	r3, #5
 80049a4:	d838      	bhi.n	8004a18 <UART_SetConfig+0x358>
 80049a6:	a201      	add	r2, pc, #4	; (adr r2, 80049ac <UART_SetConfig+0x2ec>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	080049c5 	.word	0x080049c5
 80049b0:	080049cd 	.word	0x080049cd
 80049b4:	080049d5 	.word	0x080049d5
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	2300      	movs	r3, #0
 80049c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ca:	e24e      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80049cc:	2304      	movs	r3, #4
 80049ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049d2:	e24a      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80049d4:	2308      	movs	r3, #8
 80049d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049da:	e246      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80049dc:	2310      	movs	r3, #16
 80049de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049e2:	e242      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80049e4:	2320      	movs	r3, #32
 80049e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ea:	e23e      	b.n	8004e6a <UART_SetConfig+0x7aa>
 80049ec:	cfff69f3 	.word	0xcfff69f3
 80049f0:	58000c00 	.word	0x58000c00
 80049f4:	11fff4ff 	.word	0x11fff4ff
 80049f8:	40011000 	.word	0x40011000
 80049fc:	58024400 	.word	0x58024400
 8004a00:	40004400 	.word	0x40004400
 8004a04:	40004800 	.word	0x40004800
 8004a08:	40004c00 	.word	0x40004c00
 8004a0c:	40005000 	.word	0x40005000
 8004a10:	2340      	movs	r3, #64	; 0x40
 8004a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a16:	e228      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1e:	e224      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4ab1      	ldr	r2, [pc, #708]	; (8004cec <UART_SetConfig+0x62c>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d176      	bne.n	8004b18 <UART_SetConfig+0x458>
 8004a2a:	4bb1      	ldr	r3, [pc, #708]	; (8004cf0 <UART_SetConfig+0x630>)
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a32:	2b28      	cmp	r3, #40	; 0x28
 8004a34:	d86c      	bhi.n	8004b10 <UART_SetConfig+0x450>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <UART_SetConfig+0x37c>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004ae1 	.word	0x08004ae1
 8004a40:	08004b11 	.word	0x08004b11
 8004a44:	08004b11 	.word	0x08004b11
 8004a48:	08004b11 	.word	0x08004b11
 8004a4c:	08004b11 	.word	0x08004b11
 8004a50:	08004b11 	.word	0x08004b11
 8004a54:	08004b11 	.word	0x08004b11
 8004a58:	08004b11 	.word	0x08004b11
 8004a5c:	08004ae9 	.word	0x08004ae9
 8004a60:	08004b11 	.word	0x08004b11
 8004a64:	08004b11 	.word	0x08004b11
 8004a68:	08004b11 	.word	0x08004b11
 8004a6c:	08004b11 	.word	0x08004b11
 8004a70:	08004b11 	.word	0x08004b11
 8004a74:	08004b11 	.word	0x08004b11
 8004a78:	08004b11 	.word	0x08004b11
 8004a7c:	08004af1 	.word	0x08004af1
 8004a80:	08004b11 	.word	0x08004b11
 8004a84:	08004b11 	.word	0x08004b11
 8004a88:	08004b11 	.word	0x08004b11
 8004a8c:	08004b11 	.word	0x08004b11
 8004a90:	08004b11 	.word	0x08004b11
 8004a94:	08004b11 	.word	0x08004b11
 8004a98:	08004b11 	.word	0x08004b11
 8004a9c:	08004af9 	.word	0x08004af9
 8004aa0:	08004b11 	.word	0x08004b11
 8004aa4:	08004b11 	.word	0x08004b11
 8004aa8:	08004b11 	.word	0x08004b11
 8004aac:	08004b11 	.word	0x08004b11
 8004ab0:	08004b11 	.word	0x08004b11
 8004ab4:	08004b11 	.word	0x08004b11
 8004ab8:	08004b11 	.word	0x08004b11
 8004abc:	08004b01 	.word	0x08004b01
 8004ac0:	08004b11 	.word	0x08004b11
 8004ac4:	08004b11 	.word	0x08004b11
 8004ac8:	08004b11 	.word	0x08004b11
 8004acc:	08004b11 	.word	0x08004b11
 8004ad0:	08004b11 	.word	0x08004b11
 8004ad4:	08004b11 	.word	0x08004b11
 8004ad8:	08004b11 	.word	0x08004b11
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ae6:	e1c0      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aee:	e1bc      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004af6:	e1b8      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004afe:	e1b4      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b00:	2320      	movs	r3, #32
 8004b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b06:	e1b0      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b08:	2340      	movs	r3, #64	; 0x40
 8004b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b0e:	e1ac      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b16:	e1a8      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a75      	ldr	r2, [pc, #468]	; (8004cf4 <UART_SetConfig+0x634>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d130      	bne.n	8004b84 <UART_SetConfig+0x4c4>
 8004b22:	4b73      	ldr	r3, [pc, #460]	; (8004cf0 <UART_SetConfig+0x630>)
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d826      	bhi.n	8004b7c <UART_SetConfig+0x4bc>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x474>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b4d 	.word	0x08004b4d
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	08004b5d 	.word	0x08004b5d
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b52:	e18a      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b5a:	e186      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b62:	e182      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b6a:	e17e      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b72:	e17a      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b74:	2340      	movs	r3, #64	; 0x40
 8004b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b7a:	e176      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b82:	e172      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a5b      	ldr	r2, [pc, #364]	; (8004cf8 <UART_SetConfig+0x638>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d130      	bne.n	8004bf0 <UART_SetConfig+0x530>
 8004b8e:	4b58      	ldr	r3, [pc, #352]	; (8004cf0 <UART_SetConfig+0x630>)
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d826      	bhi.n	8004be8 <UART_SetConfig+0x528>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0x4e0>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bb9 	.word	0x08004bb9
 8004ba4:	08004bc1 	.word	0x08004bc1
 8004ba8:	08004bc9 	.word	0x08004bc9
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bd9 	.word	0x08004bd9
 8004bb4:	08004be1 	.word	0x08004be1
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bbe:	e154      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bc6:	e150      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bce:	e14c      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bd6:	e148      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004bd8:	2320      	movs	r3, #32
 8004bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bde:	e144      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004be0:	2340      	movs	r3, #64	; 0x40
 8004be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004be6:	e140      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bee:	e13c      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a41      	ldr	r2, [pc, #260]	; (8004cfc <UART_SetConfig+0x63c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	f040 8082 	bne.w	8004d00 <UART_SetConfig+0x640>
 8004bfc:	4b3c      	ldr	r3, [pc, #240]	; (8004cf0 <UART_SetConfig+0x630>)
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c04:	2b28      	cmp	r3, #40	; 0x28
 8004c06:	d86d      	bhi.n	8004ce4 <UART_SetConfig+0x624>
 8004c08:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <UART_SetConfig+0x550>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004cb5 	.word	0x08004cb5
 8004c14:	08004ce5 	.word	0x08004ce5
 8004c18:	08004ce5 	.word	0x08004ce5
 8004c1c:	08004ce5 	.word	0x08004ce5
 8004c20:	08004ce5 	.word	0x08004ce5
 8004c24:	08004ce5 	.word	0x08004ce5
 8004c28:	08004ce5 	.word	0x08004ce5
 8004c2c:	08004ce5 	.word	0x08004ce5
 8004c30:	08004cbd 	.word	0x08004cbd
 8004c34:	08004ce5 	.word	0x08004ce5
 8004c38:	08004ce5 	.word	0x08004ce5
 8004c3c:	08004ce5 	.word	0x08004ce5
 8004c40:	08004ce5 	.word	0x08004ce5
 8004c44:	08004ce5 	.word	0x08004ce5
 8004c48:	08004ce5 	.word	0x08004ce5
 8004c4c:	08004ce5 	.word	0x08004ce5
 8004c50:	08004cc5 	.word	0x08004cc5
 8004c54:	08004ce5 	.word	0x08004ce5
 8004c58:	08004ce5 	.word	0x08004ce5
 8004c5c:	08004ce5 	.word	0x08004ce5
 8004c60:	08004ce5 	.word	0x08004ce5
 8004c64:	08004ce5 	.word	0x08004ce5
 8004c68:	08004ce5 	.word	0x08004ce5
 8004c6c:	08004ce5 	.word	0x08004ce5
 8004c70:	08004ccd 	.word	0x08004ccd
 8004c74:	08004ce5 	.word	0x08004ce5
 8004c78:	08004ce5 	.word	0x08004ce5
 8004c7c:	08004ce5 	.word	0x08004ce5
 8004c80:	08004ce5 	.word	0x08004ce5
 8004c84:	08004ce5 	.word	0x08004ce5
 8004c88:	08004ce5 	.word	0x08004ce5
 8004c8c:	08004ce5 	.word	0x08004ce5
 8004c90:	08004cd5 	.word	0x08004cd5
 8004c94:	08004ce5 	.word	0x08004ce5
 8004c98:	08004ce5 	.word	0x08004ce5
 8004c9c:	08004ce5 	.word	0x08004ce5
 8004ca0:	08004ce5 	.word	0x08004ce5
 8004ca4:	08004ce5 	.word	0x08004ce5
 8004ca8:	08004ce5 	.word	0x08004ce5
 8004cac:	08004ce5 	.word	0x08004ce5
 8004cb0:	08004cdd 	.word	0x08004cdd
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cba:	e0d6      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cc2:	e0d2      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cca:	e0ce      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cd2:	e0ca      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cda:	e0c6      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce2:	e0c2      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cea:	e0be      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004cec:	40011400 	.word	0x40011400
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	40007800 	.word	0x40007800
 8004cf8:	40007c00 	.word	0x40007c00
 8004cfc:	40011800 	.word	0x40011800
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4aad      	ldr	r2, [pc, #692]	; (8004fbc <UART_SetConfig+0x8fc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d176      	bne.n	8004df8 <UART_SetConfig+0x738>
 8004d0a:	4bad      	ldr	r3, [pc, #692]	; (8004fc0 <UART_SetConfig+0x900>)
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d12:	2b28      	cmp	r3, #40	; 0x28
 8004d14:	d86c      	bhi.n	8004df0 <UART_SetConfig+0x730>
 8004d16:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <UART_SetConfig+0x65c>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004dc1 	.word	0x08004dc1
 8004d20:	08004df1 	.word	0x08004df1
 8004d24:	08004df1 	.word	0x08004df1
 8004d28:	08004df1 	.word	0x08004df1
 8004d2c:	08004df1 	.word	0x08004df1
 8004d30:	08004df1 	.word	0x08004df1
 8004d34:	08004df1 	.word	0x08004df1
 8004d38:	08004df1 	.word	0x08004df1
 8004d3c:	08004dc9 	.word	0x08004dc9
 8004d40:	08004df1 	.word	0x08004df1
 8004d44:	08004df1 	.word	0x08004df1
 8004d48:	08004df1 	.word	0x08004df1
 8004d4c:	08004df1 	.word	0x08004df1
 8004d50:	08004df1 	.word	0x08004df1
 8004d54:	08004df1 	.word	0x08004df1
 8004d58:	08004df1 	.word	0x08004df1
 8004d5c:	08004dd1 	.word	0x08004dd1
 8004d60:	08004df1 	.word	0x08004df1
 8004d64:	08004df1 	.word	0x08004df1
 8004d68:	08004df1 	.word	0x08004df1
 8004d6c:	08004df1 	.word	0x08004df1
 8004d70:	08004df1 	.word	0x08004df1
 8004d74:	08004df1 	.word	0x08004df1
 8004d78:	08004df1 	.word	0x08004df1
 8004d7c:	08004dd9 	.word	0x08004dd9
 8004d80:	08004df1 	.word	0x08004df1
 8004d84:	08004df1 	.word	0x08004df1
 8004d88:	08004df1 	.word	0x08004df1
 8004d8c:	08004df1 	.word	0x08004df1
 8004d90:	08004df1 	.word	0x08004df1
 8004d94:	08004df1 	.word	0x08004df1
 8004d98:	08004df1 	.word	0x08004df1
 8004d9c:	08004de1 	.word	0x08004de1
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	08004df1 	.word	0x08004df1
 8004da8:	08004df1 	.word	0x08004df1
 8004dac:	08004df1 	.word	0x08004df1
 8004db0:	08004df1 	.word	0x08004df1
 8004db4:	08004df1 	.word	0x08004df1
 8004db8:	08004df1 	.word	0x08004df1
 8004dbc:	08004de9 	.word	0x08004de9
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dc6:	e050      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004dc8:	2304      	movs	r3, #4
 8004dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dce:	e04c      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004dd0:	2308      	movs	r3, #8
 8004dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dd6:	e048      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dde:	e044      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004de0:	2320      	movs	r3, #32
 8004de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004de6:	e040      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004de8:	2340      	movs	r3, #64	; 0x40
 8004dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dee:	e03c      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004df6:	e038      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a71      	ldr	r2, [pc, #452]	; (8004fc4 <UART_SetConfig+0x904>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d130      	bne.n	8004e64 <UART_SetConfig+0x7a4>
 8004e02:	4b6f      	ldr	r3, [pc, #444]	; (8004fc0 <UART_SetConfig+0x900>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	f003 0307 	and.w	r3, r3, #7
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d826      	bhi.n	8004e5c <UART_SetConfig+0x79c>
 8004e0e:	a201      	add	r2, pc, #4	; (adr r2, 8004e14 <UART_SetConfig+0x754>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e2d 	.word	0x08004e2d
 8004e18:	08004e35 	.word	0x08004e35
 8004e1c:	08004e3d 	.word	0x08004e3d
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e32:	e01a      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004e34:	2304      	movs	r3, #4
 8004e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e3a:	e016      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004e3c:	2308      	movs	r3, #8
 8004e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e42:	e012      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004e44:	2310      	movs	r3, #16
 8004e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e4a:	e00e      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e52:	e00a      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004e54:	2340      	movs	r3, #64	; 0x40
 8004e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e5a:	e006      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004e5c:	2380      	movs	r3, #128	; 0x80
 8004e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e62:	e002      	b.n	8004e6a <UART_SetConfig+0x7aa>
 8004e64:	2380      	movs	r3, #128	; 0x80
 8004e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a55      	ldr	r2, [pc, #340]	; (8004fc4 <UART_SetConfig+0x904>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	f040 80f0 	bne.w	8005056 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	dc46      	bgt.n	8004f0c <UART_SetConfig+0x84c>
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	db75      	blt.n	8004f6e <UART_SetConfig+0x8ae>
 8004e82:	3b02      	subs	r3, #2
 8004e84:	2b1e      	cmp	r3, #30
 8004e86:	d872      	bhi.n	8004f6e <UART_SetConfig+0x8ae>
 8004e88:	a201      	add	r2, pc, #4	; (adr r2, 8004e90 <UART_SetConfig+0x7d0>)
 8004e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e8e:	bf00      	nop
 8004e90:	08004f13 	.word	0x08004f13
 8004e94:	08004f6f 	.word	0x08004f6f
 8004e98:	08004f1b 	.word	0x08004f1b
 8004e9c:	08004f6f 	.word	0x08004f6f
 8004ea0:	08004f6f 	.word	0x08004f6f
 8004ea4:	08004f6f 	.word	0x08004f6f
 8004ea8:	08004f2b 	.word	0x08004f2b
 8004eac:	08004f6f 	.word	0x08004f6f
 8004eb0:	08004f6f 	.word	0x08004f6f
 8004eb4:	08004f6f 	.word	0x08004f6f
 8004eb8:	08004f6f 	.word	0x08004f6f
 8004ebc:	08004f6f 	.word	0x08004f6f
 8004ec0:	08004f6f 	.word	0x08004f6f
 8004ec4:	08004f6f 	.word	0x08004f6f
 8004ec8:	08004f3b 	.word	0x08004f3b
 8004ecc:	08004f6f 	.word	0x08004f6f
 8004ed0:	08004f6f 	.word	0x08004f6f
 8004ed4:	08004f6f 	.word	0x08004f6f
 8004ed8:	08004f6f 	.word	0x08004f6f
 8004edc:	08004f6f 	.word	0x08004f6f
 8004ee0:	08004f6f 	.word	0x08004f6f
 8004ee4:	08004f6f 	.word	0x08004f6f
 8004ee8:	08004f6f 	.word	0x08004f6f
 8004eec:	08004f6f 	.word	0x08004f6f
 8004ef0:	08004f6f 	.word	0x08004f6f
 8004ef4:	08004f6f 	.word	0x08004f6f
 8004ef8:	08004f6f 	.word	0x08004f6f
 8004efc:	08004f6f 	.word	0x08004f6f
 8004f00:	08004f6f 	.word	0x08004f6f
 8004f04:	08004f6f 	.word	0x08004f6f
 8004f08:	08004f61 	.word	0x08004f61
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d02a      	beq.n	8004f66 <UART_SetConfig+0x8a6>
 8004f10:	e02d      	b.n	8004f6e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004f12:	f7fe fbf3 	bl	80036fc <HAL_RCCEx_GetD3PCLK1Freq>
 8004f16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004f18:	e02f      	b.n	8004f7a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f1a:	f107 0314 	add.w	r3, r7, #20
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fc02 	bl	8003728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f28:	e027      	b.n	8004f7a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fd4e 	bl	80039d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f38:	e01f      	b.n	8004f7a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f3a:	4b21      	ldr	r3, [pc, #132]	; (8004fc0 <UART_SetConfig+0x900>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f46:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <UART_SetConfig+0x900>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	08db      	lsrs	r3, r3, #3
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	4a1d      	ldr	r2, [pc, #116]	; (8004fc8 <UART_SetConfig+0x908>)
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f58:	e00f      	b.n	8004f7a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8004f5a:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <UART_SetConfig+0x908>)
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f5e:	e00c      	b.n	8004f7a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <UART_SetConfig+0x90c>)
 8004f62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f64:	e009      	b.n	8004f7a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f6c:	e005      	b.n	8004f7a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004f78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 81e6 	beq.w	800534e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	4a12      	ldr	r2, [pc, #72]	; (8004fd0 <UART_SetConfig+0x910>)
 8004f88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f94:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	005b      	lsls	r3, r3, #1
 8004f9e:	4413      	add	r3, r2
 8004fa0:	6a3a      	ldr	r2, [r7, #32]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d305      	bcc.n	8004fb2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d910      	bls.n	8004fd4 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004fb8:	e1c9      	b.n	800534e <UART_SetConfig+0xc8e>
 8004fba:	bf00      	nop
 8004fbc:	40011c00 	.word	0x40011c00
 8004fc0:	58024400 	.word	0x58024400
 8004fc4:	58000c00 	.word	0x58000c00
 8004fc8:	03d09000 	.word	0x03d09000
 8004fcc:	003d0900 	.word	0x003d0900
 8004fd0:	08007270 	.word	0x08007270
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	4ac1      	ldr	r2, [pc, #772]	; (80052e8 <UART_SetConfig+0xc28>)
 8004fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	f7fb faa4 	bl	8000538 <__aeabi_uldivmod>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	020b      	lsls	r3, r1, #8
 8005002:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005006:	0202      	lsls	r2, r0, #8
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	6849      	ldr	r1, [r1, #4]
 800500c:	0849      	lsrs	r1, r1, #1
 800500e:	4608      	mov	r0, r1
 8005010:	f04f 0100 	mov.w	r1, #0
 8005014:	1814      	adds	r4, r2, r0
 8005016:	eb43 0501 	adc.w	r5, r3, r1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	461a      	mov	r2, r3
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	4620      	mov	r0, r4
 8005026:	4629      	mov	r1, r5
 8005028:	f7fb fa86 	bl	8000538 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4613      	mov	r3, r2
 8005032:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005036:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800503a:	d308      	bcc.n	800504e <UART_SetConfig+0x98e>
 800503c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005042:	d204      	bcs.n	800504e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800504a:	60da      	str	r2, [r3, #12]
 800504c:	e17f      	b.n	800534e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005054:	e17b      	b.n	800534e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800505e:	f040 80bd 	bne.w	80051dc <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8005062:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005066:	2b20      	cmp	r3, #32
 8005068:	dc48      	bgt.n	80050fc <UART_SetConfig+0xa3c>
 800506a:	2b00      	cmp	r3, #0
 800506c:	db7b      	blt.n	8005166 <UART_SetConfig+0xaa6>
 800506e:	2b20      	cmp	r3, #32
 8005070:	d879      	bhi.n	8005166 <UART_SetConfig+0xaa6>
 8005072:	a201      	add	r2, pc, #4	; (adr r2, 8005078 <UART_SetConfig+0x9b8>)
 8005074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005078:	08005103 	.word	0x08005103
 800507c:	0800510b 	.word	0x0800510b
 8005080:	08005167 	.word	0x08005167
 8005084:	08005167 	.word	0x08005167
 8005088:	08005113 	.word	0x08005113
 800508c:	08005167 	.word	0x08005167
 8005090:	08005167 	.word	0x08005167
 8005094:	08005167 	.word	0x08005167
 8005098:	08005123 	.word	0x08005123
 800509c:	08005167 	.word	0x08005167
 80050a0:	08005167 	.word	0x08005167
 80050a4:	08005167 	.word	0x08005167
 80050a8:	08005167 	.word	0x08005167
 80050ac:	08005167 	.word	0x08005167
 80050b0:	08005167 	.word	0x08005167
 80050b4:	08005167 	.word	0x08005167
 80050b8:	08005133 	.word	0x08005133
 80050bc:	08005167 	.word	0x08005167
 80050c0:	08005167 	.word	0x08005167
 80050c4:	08005167 	.word	0x08005167
 80050c8:	08005167 	.word	0x08005167
 80050cc:	08005167 	.word	0x08005167
 80050d0:	08005167 	.word	0x08005167
 80050d4:	08005167 	.word	0x08005167
 80050d8:	08005167 	.word	0x08005167
 80050dc:	08005167 	.word	0x08005167
 80050e0:	08005167 	.word	0x08005167
 80050e4:	08005167 	.word	0x08005167
 80050e8:	08005167 	.word	0x08005167
 80050ec:	08005167 	.word	0x08005167
 80050f0:	08005167 	.word	0x08005167
 80050f4:	08005167 	.word	0x08005167
 80050f8:	08005159 	.word	0x08005159
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d02e      	beq.n	800515e <UART_SetConfig+0xa9e>
 8005100:	e031      	b.n	8005166 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005102:	f7fd fb81 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 8005106:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005108:	e033      	b.n	8005172 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800510a:	f7fd fb93 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 800510e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005110:	e02f      	b.n	8005172 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005112:	f107 0314 	add.w	r3, r7, #20
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fb06 	bl	8003728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005120:	e027      	b.n	8005172 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005122:	f107 0308 	add.w	r3, r7, #8
 8005126:	4618      	mov	r0, r3
 8005128:	f7fe fc52 	bl	80039d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005130:	e01f      	b.n	8005172 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005132:	4b6e      	ldr	r3, [pc, #440]	; (80052ec <UART_SetConfig+0xc2c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800513e:	4b6b      	ldr	r3, [pc, #428]	; (80052ec <UART_SetConfig+0xc2c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	08db      	lsrs	r3, r3, #3
 8005144:	f003 0303 	and.w	r3, r3, #3
 8005148:	4a69      	ldr	r2, [pc, #420]	; (80052f0 <UART_SetConfig+0xc30>)
 800514a:	fa22 f303 	lsr.w	r3, r2, r3
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005150:	e00f      	b.n	8005172 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005152:	4b67      	ldr	r3, [pc, #412]	; (80052f0 <UART_SetConfig+0xc30>)
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005156:	e00c      	b.n	8005172 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005158:	4b66      	ldr	r3, [pc, #408]	; (80052f4 <UART_SetConfig+0xc34>)
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800515c:	e009      	b.n	8005172 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005164:	e005      	b.n	8005172 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8005166:	2300      	movs	r3, #0
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005170:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	2b00      	cmp	r3, #0
 8005176:	f000 80ea 	beq.w	800534e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	4a5a      	ldr	r2, [pc, #360]	; (80052e8 <UART_SetConfig+0xc28>)
 8005180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005184:	461a      	mov	r2, r3
 8005186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005188:	fbb3 f3f2 	udiv	r3, r3, r2
 800518c:	005a      	lsls	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	441a      	add	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	d916      	bls.n	80051d4 <UART_SetConfig+0xb14>
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ac:	d212      	bcs.n	80051d4 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	f023 030f 	bic.w	r3, r3, #15
 80051b6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80051c6:	4313      	orrs	r3, r2
 80051c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	e0bc      	b.n	800534e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80051da:	e0b8      	b.n	800534e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051dc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	dc4b      	bgt.n	800527c <UART_SetConfig+0xbbc>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f2c0 8087 	blt.w	80052f8 <UART_SetConfig+0xc38>
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	f200 8084 	bhi.w	80052f8 <UART_SetConfig+0xc38>
 80051f0:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <UART_SetConfig+0xb38>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	08005283 	.word	0x08005283
 80051fc:	0800528b 	.word	0x0800528b
 8005200:	080052f9 	.word	0x080052f9
 8005204:	080052f9 	.word	0x080052f9
 8005208:	08005293 	.word	0x08005293
 800520c:	080052f9 	.word	0x080052f9
 8005210:	080052f9 	.word	0x080052f9
 8005214:	080052f9 	.word	0x080052f9
 8005218:	080052a3 	.word	0x080052a3
 800521c:	080052f9 	.word	0x080052f9
 8005220:	080052f9 	.word	0x080052f9
 8005224:	080052f9 	.word	0x080052f9
 8005228:	080052f9 	.word	0x080052f9
 800522c:	080052f9 	.word	0x080052f9
 8005230:	080052f9 	.word	0x080052f9
 8005234:	080052f9 	.word	0x080052f9
 8005238:	080052b3 	.word	0x080052b3
 800523c:	080052f9 	.word	0x080052f9
 8005240:	080052f9 	.word	0x080052f9
 8005244:	080052f9 	.word	0x080052f9
 8005248:	080052f9 	.word	0x080052f9
 800524c:	080052f9 	.word	0x080052f9
 8005250:	080052f9 	.word	0x080052f9
 8005254:	080052f9 	.word	0x080052f9
 8005258:	080052f9 	.word	0x080052f9
 800525c:	080052f9 	.word	0x080052f9
 8005260:	080052f9 	.word	0x080052f9
 8005264:	080052f9 	.word	0x080052f9
 8005268:	080052f9 	.word	0x080052f9
 800526c:	080052f9 	.word	0x080052f9
 8005270:	080052f9 	.word	0x080052f9
 8005274:	080052f9 	.word	0x080052f9
 8005278:	080052d9 	.word	0x080052d9
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d02e      	beq.n	80052de <UART_SetConfig+0xc1e>
 8005280:	e03a      	b.n	80052f8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005282:	f7fd fac1 	bl	8002808 <HAL_RCC_GetPCLK1Freq>
 8005286:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005288:	e03c      	b.n	8005304 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800528a:	f7fd fad3 	bl	8002834 <HAL_RCC_GetPCLK2Freq>
 800528e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005290:	e038      	b.n	8005304 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005292:	f107 0314 	add.w	r3, r7, #20
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe fa46 	bl	8003728 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052a0:	e030      	b.n	8005304 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe fb92 	bl	80039d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052b0:	e028      	b.n	8005304 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b2:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <UART_SetConfig+0xc2c>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d009      	beq.n	80052d2 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80052be:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <UART_SetConfig+0xc2c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	08db      	lsrs	r3, r3, #3
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	4a09      	ldr	r2, [pc, #36]	; (80052f0 <UART_SetConfig+0xc30>)
 80052ca:	fa22 f303 	lsr.w	r3, r2, r3
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052d0:	e018      	b.n	8005304 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80052d2:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <UART_SetConfig+0xc30>)
 80052d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052d6:	e015      	b.n	8005304 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <UART_SetConfig+0xc34>)
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052dc:	e012      	b.n	8005304 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052e4:	e00e      	b.n	8005304 <UART_SetConfig+0xc44>
 80052e6:	bf00      	nop
 80052e8:	08007270 	.word	0x08007270
 80052ec:	58024400 	.word	0x58024400
 80052f0:	03d09000 	.word	0x03d09000
 80052f4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005302:	bf00      	nop
    }

    if (pclk != 0U)
 8005304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005306:	2b00      	cmp	r3, #0
 8005308:	d021      	beq.n	800534e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	4a1a      	ldr	r2, [pc, #104]	; (8005378 <UART_SetConfig+0xcb8>)
 8005310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005314:	461a      	mov	r2, r3
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	fbb3 f2f2 	udiv	r2, r3, r2
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	085b      	lsrs	r3, r3, #1
 8005322:	441a      	add	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	2b0f      	cmp	r3, #15
 8005332:	d909      	bls.n	8005348 <UART_SetConfig+0xc88>
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800533a:	d205      	bcs.n	8005348 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	b29a      	uxth	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	60da      	str	r2, [r3, #12]
 8005346:	e002      	b.n	800534e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800536a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800536e:	4618      	mov	r0, r3
 8005370:	3738      	adds	r7, #56	; 0x38
 8005372:	46bd      	mov	sp, r7
 8005374:	bdb0      	pop	{r4, r5, r7, pc}
 8005376:	bf00      	nop
 8005378:	08007270 	.word	0x08007270

0800537c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00a      	beq.n	80053c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00a      	beq.n	80053ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ee:	f003 0308 	and.w	r3, r3, #8
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00a      	beq.n	800542e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01a      	beq.n	8005492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547a:	d10a      	bne.n	8005492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	605a      	str	r2, [r3, #4]
  }
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af02      	add	r7, sp, #8
 80054c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054d0:	f7fb ff26 	bl	8001320 <HAL_GetTick>
 80054d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d10e      	bne.n	8005502 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f82f 	bl	8005556 <UART_WaitOnFlagUntilTimeout>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d001      	beq.n	8005502 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e025      	b.n	800554e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b04      	cmp	r3, #4
 800550e:	d10e      	bne.n	800552e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005510:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f819 	bl	8005556 <UART_WaitOnFlagUntilTimeout>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e00f      	b.n	800554e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3710      	adds	r7, #16
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b09c      	sub	sp, #112	; 0x70
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	603b      	str	r3, [r7, #0]
 8005562:	4613      	mov	r3, r2
 8005564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005566:	e0a9      	b.n	80056bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800556a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556e:	f000 80a5 	beq.w	80056bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005572:	f7fb fed5 	bl	8001320 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800557e:	429a      	cmp	r2, r3
 8005580:	d302      	bcc.n	8005588 <UART_WaitOnFlagUntilTimeout+0x32>
 8005582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005584:	2b00      	cmp	r3, #0
 8005586:	d140      	bne.n	800560a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005598:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800559c:	667b      	str	r3, [r7, #100]	; 0x64
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055a8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e6      	bne.n	8005588 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3308      	adds	r3, #8
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	663b      	str	r3, [r7, #96]	; 0x60
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3308      	adds	r3, #8
 80055d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055da:	64ba      	str	r2, [r7, #72]	; 0x48
 80055dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e5      	bne.n	80055ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e069      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d051      	beq.n	80056bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005626:	d149      	bne.n	80056bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005630:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	e853 3f00 	ldrex	r3, [r3]
 800563e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005646:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	461a      	mov	r2, r3
 800564e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
 8005652:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005654:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005658:	e841 2300 	strex	r3, r2, [r1]
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1e6      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3308      	adds	r3, #8
 800566a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	e853 3f00 	ldrex	r3, [r3]
 8005672:	613b      	str	r3, [r7, #16]
   return(result);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f023 0301 	bic.w	r3, r3, #1
 800567a:	66bb      	str	r3, [r7, #104]	; 0x68
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3308      	adds	r3, #8
 8005682:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005684:	623a      	str	r2, [r7, #32]
 8005686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005688:	69f9      	ldr	r1, [r7, #28]
 800568a:	6a3a      	ldr	r2, [r7, #32]
 800568c:	e841 2300 	strex	r3, r2, [r1]
 8005690:	61bb      	str	r3, [r7, #24]
   return(result);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1e5      	bne.n	8005664 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e010      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	69da      	ldr	r2, [r3, #28]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4013      	ands	r3, r2
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	bf0c      	ite	eq
 80056cc:	2301      	moveq	r3, #1
 80056ce:	2300      	movne	r3, #0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	461a      	mov	r2, r3
 80056d4:	79fb      	ldrb	r3, [r7, #7]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	f43f af46 	beq.w	8005568 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3770      	adds	r7, #112	; 0x70
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d101      	bne.n	80056fc <HAL_UARTEx_DisableFifoMode+0x16>
 80056f8:	2302      	movs	r3, #2
 80056fa:	e027      	b.n	800574c <HAL_UARTEx_DisableFifoMode+0x66>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	; 0x24
 8005708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0201 	bic.w	r2, r2, #1
 8005722:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800572a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005768:	2b01      	cmp	r3, #1
 800576a:	d101      	bne.n	8005770 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800576c:	2302      	movs	r3, #2
 800576e:	e02d      	b.n	80057cc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	; 0x24
 800577c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f84f 	bl	8005850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2220      	movs	r2, #32
 80057be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80057e8:	2302      	movs	r3, #2
 80057ea:	e02d      	b.n	8005848 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0201 	bic.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f811 	bl	8005850 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585c:	2b00      	cmp	r3, #0
 800585e:	d108      	bne.n	8005872 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005870:	e031      	b.n	80058d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005872:	2310      	movs	r3, #16
 8005874:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005876:	2310      	movs	r3, #16
 8005878:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	0e5b      	lsrs	r3, r3, #25
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f003 0307 	and.w	r3, r3, #7
 8005888:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	0f5b      	lsrs	r3, r3, #29
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	7b3a      	ldrb	r2, [r7, #12]
 800589e:	4911      	ldr	r1, [pc, #68]	; (80058e4 <UARTEx_SetNbDataToProcess+0x94>)
 80058a0:	5c8a      	ldrb	r2, [r1, r2]
 80058a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80058a6:	7b3a      	ldrb	r2, [r7, #12]
 80058a8:	490f      	ldr	r1, [pc, #60]	; (80058e8 <UARTEx_SetNbDataToProcess+0x98>)
 80058aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80058ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	7b7a      	ldrb	r2, [r7, #13]
 80058bc:	4909      	ldr	r1, [pc, #36]	; (80058e4 <UARTEx_SetNbDataToProcess+0x94>)
 80058be:	5c8a      	ldrb	r2, [r1, r2]
 80058c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80058c4:	7b7a      	ldrb	r2, [r7, #13]
 80058c6:	4908      	ldr	r1, [pc, #32]	; (80058e8 <UARTEx_SetNbDataToProcess+0x98>)
 80058c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80058ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	08007288 	.word	0x08007288
 80058e8:	08007290 	.word	0x08007290

080058ec <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08e      	sub	sp, #56	; 0x38
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80058fa:	2234      	movs	r2, #52	; 0x34
 80058fc:	2100      	movs	r1, #0
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f001 fc74 	bl	80071ec <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	f023 0303 	bic.w	r3, r3, #3
 800590a:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	f1a3 0208 	sub.w	r2, r3, #8
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2202      	movs	r2, #2
 8005938:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800593e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	4413      	add	r3, r2
 8005944:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	3b04      	subs	r3, #4
 800594a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8005950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005952:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8005954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005958:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	3b04      	subs	r3, #4
 800595e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8005960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800596e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005970:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005976:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	3304      	adds	r3, #4
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8005982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <_tx_byte_pool_create+0x11c>)
 800598a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005992:	f3ef 8310 	mrs	r3, PRIMASK
 8005996:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8005998:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800599a:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800599c:	b672      	cpsid	i
#endif
    return(int_posture);
 800599e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <_tx_byte_pool_create+0x120>)
 80059a6:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80059a8:	4b19      	ldr	r3, [pc, #100]	; (8005a10 <_tx_byte_pool_create+0x124>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d109      	bne.n	80059c4 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80059b0:	4a18      	ldr	r2, [pc, #96]	; (8005a14 <_tx_byte_pool_create+0x128>)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	631a      	str	r2, [r3, #48]	; 0x30
 80059c2:	e011      	b.n	80059e8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80059c4:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <_tx_byte_pool_create+0x128>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80059e8:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <_tx_byte_pool_create+0x124>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	4a08      	ldr	r2, [pc, #32]	; (8005a10 <_tx_byte_pool_create+0x124>)
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3738      	adds	r7, #56	; 0x38
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	ffffeeee 	.word	0xffffeeee
 8005a0c:	42595445 	.word	0x42595445
 8005a10:	240010ac 	.word	0x240010ac
 8005a14:	24001090 	.word	0x24001090

08005a18 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8005a1c:	f000 fb0c 	bl	8006038 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8005a20:	f000 ff24 	bl	800686c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <_tx_initialize_high_level+0x58>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <_tx_initialize_high_level+0x5c>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8005a30:	4b11      	ldr	r3, [pc, #68]	; (8005a78 <_tx_initialize_high_level+0x60>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	4b11      	ldr	r3, [pc, #68]	; (8005a7c <_tx_initialize_high_level+0x64>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8005a3c:	4b10      	ldr	r3, [pc, #64]	; (8005a80 <_tx_initialize_high_level+0x68>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	4b10      	ldr	r3, [pc, #64]	; (8005a84 <_tx_initialize_high_level+0x6c>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8005a48:	4b0f      	ldr	r3, [pc, #60]	; (8005a88 <_tx_initialize_high_level+0x70>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <_tx_initialize_high_level+0x74>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8005a54:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <_tx_initialize_high_level+0x78>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	4b0e      	ldr	r3, [pc, #56]	; (8005a94 <_tx_initialize_high_level+0x7c>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8005a60:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <_tx_initialize_high_level+0x80>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <_tx_initialize_high_level+0x84>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]
#endif
}
 8005a6c:	bf00      	nop
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	2400108c 	.word	0x2400108c
 8005a74:	2400109c 	.word	0x2400109c
 8005a78:	240010a8 	.word	0x240010a8
 8005a7c:	24001088 	.word	0x24001088
 8005a80:	2400107c 	.word	0x2400107c
 8005a84:	240010a0 	.word	0x240010a0
 8005a88:	240010a4 	.word	0x240010a4
 8005a8c:	24001098 	.word	0x24001098
 8005a90:	24001090 	.word	0x24001090
 8005a94:	240010ac 	.word	0x240010ac
 8005a98:	24001084 	.word	0x24001084
 8005a9c:	24001080 	.word	0x24001080

08005aa0 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8005aa4:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <_tx_initialize_kernel_enter+0x48>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8005aac:	d00c      	beq.n	8005ac8 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8005aae:	4b0e      	ldr	r3, [pc, #56]	; (8005ae8 <_tx_initialize_kernel_enter+0x48>)
 8005ab0:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8005ab4:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8005ab6:	f7fa fc1b 	bl	80002f0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8005aba:	f7ff ffad 	bl	8005a18 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <_tx_initialize_kernel_enter+0x4c>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a09      	ldr	r2, [pc, #36]	; (8005aec <_tx_initialize_kernel_enter+0x4c>)
 8005ac6:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8005ac8:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <_tx_initialize_kernel_enter+0x48>)
 8005aca:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8005ace:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8005ad0:	4b07      	ldr	r3, [pc, #28]	; (8005af0 <_tx_initialize_kernel_enter+0x50>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fa feab 	bl	8000830 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8005ada:	4b03      	ldr	r3, [pc, #12]	; (8005ae8 <_tx_initialize_kernel_enter+0x48>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8005ae0:	f7fa fc46 	bl	8000370 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8005ae4:	bf00      	nop
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	240001c8 	.word	0x240001c8
 8005aec:	24001148 	.word	0x24001148
 8005af0:	24001094 	.word	0x24001094

08005af4 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b08e      	sub	sp, #56	; 0x38
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005afe:	f3ef 8310 	mrs	r3, PRIMASK
 8005b02:	623b      	str	r3, [r7, #32]
    return(posture);
 8005b04:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005b06:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005b08:	b672      	cpsid	i
    return(int_posture);
 8005b0a:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8005b0c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b12:	4a33      	ldr	r2, [pc, #204]	; (8005be0 <_tx_semaphore_cleanup+0xec>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d158      	bne.n	8005bca <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d152      	bne.n	8005bca <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d04c      	beq.n	8005bca <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8005b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a2b      	ldr	r2, [pc, #172]	; (8005be4 <_tx_semaphore_cleanup+0xf0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d147      	bne.n	8005bca <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d043      	beq.n	8005bca <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	1e5a      	subs	r2, r3, #1
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d103      	bne.n	8005b66 <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	2200      	movs	r2, #0
 8005b62:	60da      	str	r2, [r3, #12]
 8005b64:	e013      	b.n	8005b8e <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b76:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b7c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d102      	bne.n	8005b8e <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b8c:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	2b06      	cmp	r3, #6
 8005b94:	d119      	bne.n	8005bca <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	220d      	movs	r2, #13
 8005b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <_tx_semaphore_cleanup+0xf4>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	4a10      	ldr	r2, [pc, #64]	; (8005be8 <_tx_semaphore_cleanup+0xf4>)
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005baa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f383 8810 	msr	PRIMASK, r3
}
 8005bb2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fb05 	bl	80061c4 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005bba:	f3ef 8310 	mrs	r3, PRIMASK
 8005bbe:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005bc0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005bc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005bc4:	b672      	cpsid	i
    return(int_posture);
 8005bc6:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8005bc8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bcc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f383 8810 	msr	PRIMASK, r3
}
 8005bd4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005bd6:	bf00      	nop
 8005bd8:	3738      	adds	r7, #56	; 0x38
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	08005af5 	.word	0x08005af5
 8005be4:	53454d41 	.word	0x53454d41
 8005be8:	24001148 	.word	0x24001148

08005bec <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b08a      	sub	sp, #40	; 0x28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8005bf8:	221c      	movs	r2, #28
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f001 faf5 	bl	80071ec <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c12:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005c14:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005c16:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005c18:	b672      	cpsid	i
    return(int_posture);
 8005c1a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <_tx_semaphore_create+0x98>)
 8005c22:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8005c24:	4b18      	ldr	r3, [pc, #96]	; (8005c88 <_tx_semaphore_create+0x9c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d109      	bne.n	8005c40 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8005c2c:	4a17      	ldr	r2, [pc, #92]	; (8005c8c <_tx_semaphore_create+0xa0>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	619a      	str	r2, [r3, #24]
 8005c3e:	e011      	b.n	8005c64 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8005c40:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <_tx_semaphore_create+0xa0>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a3a      	ldr	r2, [r7, #32]
 8005c62:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8005c64:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <_tx_semaphore_create+0x9c>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	4a07      	ldr	r2, [pc, #28]	; (8005c88 <_tx_semaphore_create+0x9c>)
 8005c6c:	6013      	str	r3, [r2, #0]
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	f383 8810 	msr	PRIMASK, r3
}
 8005c78:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3728      	adds	r7, #40	; 0x28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	53454d41 	.word	0x53454d41
 8005c88:	2400109c 	.word	0x2400109c
 8005c8c:	2400108c 	.word	0x2400108c

08005c90 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08e      	sub	sp, #56	; 0x38
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005c9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca2:	623b      	str	r3, [r7, #32]
    return(posture);
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005ca6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005ca8:	b672      	cpsid	i
    return(int_posture);
 8005caa:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8005cac:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	1e5a      	subs	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	609a      	str	r2, [r3, #8]
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f383 8810 	msr	PRIMASK, r3
}
 8005cca:	e068      	b.n	8005d9e <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d05d      	beq.n	8005d8e <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8005cd2:	4b35      	ldr	r3, [pc, #212]	; (8005da8 <_tx_semaphore_get+0x118>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d008      	beq.n	8005cec <_tx_semaphore_get+0x5c>
 8005cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cdc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f383 8810 	msr	PRIMASK, r3
}
 8005ce4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8005ce6:	230d      	movs	r3, #13
 8005ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8005cea:	e058      	b.n	8005d9e <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005cec:	4b2f      	ldr	r3, [pc, #188]	; (8005dac <_tx_semaphore_get+0x11c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	4a2e      	ldr	r2, [pc, #184]	; (8005db0 <_tx_semaphore_get+0x120>)
 8005cf6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8005cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d109      	bne.n	8005d28 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d18:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8005d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d1e:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8005d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d24:	675a      	str	r2, [r3, #116]	; 0x74
 8005d26:	e011      	b.n	8005d4c <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8005d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d32:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8005d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d38:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8005d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3e:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d44:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d4a:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	2206      	movs	r2, #6
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	2201      	movs	r2, #1
 8005d60:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8005d68:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <_tx_semaphore_get+0x118>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <_tx_semaphore_get+0x118>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f383 8810 	msr	PRIMASK, r3
}
 8005d7c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8005d7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005d80:	f000 fb34 	bl	80063ec <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d8c:	e007      	b.n	8005d9e <_tx_semaphore_get+0x10e>
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f383 8810 	msr	PRIMASK, r3
}
 8005d98:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8005d9a:	230d      	movs	r3, #13
 8005d9c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3738      	adds	r7, #56	; 0x38
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	24001148 	.word	0x24001148
 8005dac:	2400114c 	.word	0x2400114c
 8005db0:	08005af5 	.word	0x08005af5

08005db4 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08c      	sub	sp, #48	; 0x30
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc0:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005dc4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005dc6:	b672      	cpsid	i
    return(int_posture);
 8005dc8:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	609a      	str	r2, [r3, #8]
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f383 8810 	msr	PRIMASK, r3
}
 8005dec:	e033      	b.n	8005e56 <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8005df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df6:	3b01      	subs	r3, #1
 8005df8:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	60da      	str	r2, [r3, #12]
 8005e06:	e00e      	b.n	8005e26 <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0c:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a3a      	ldr	r2, [r7, #32]
 8005e12:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e18:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	6a3a      	ldr	r2, [r7, #32]
 8005e24:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e2a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2e:	2200      	movs	r2, #0
 8005e30:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2200      	movs	r2, #0
 8005e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <_tx_semaphore_put+0xac>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	4a07      	ldr	r2, [pc, #28]	; (8005e60 <_tx_semaphore_put+0xac>)
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e46:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f383 8810 	msr	PRIMASK, r3
}
 8005e4e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8005e50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e52:	f000 f9b7 	bl	80061c4 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3730      	adds	r7, #48	; 0x30
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	24001148 	.word	0x24001148

08005e64 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b092      	sub	sp, #72	; 0x48
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8005e72:	2300      	movs	r3, #0
 8005e74:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8005e76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e78:	21ef      	movs	r1, #239	; 0xef
 8005e7a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005e7c:	f001 f9b6 	bl	80071ec <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8005e80:	22b0      	movs	r2, #176	; 0xb0
 8005e82:	2100      	movs	r1, #0
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f001 f9b1 	bl	80071ec <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ea0:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ea6:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eac:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005eba:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ec0:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2220      	movs	r2, #32
 8005ec6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8005eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8005ece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ed4:	4413      	add	r3, r2
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005edc:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ee2:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ee8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2203      	movs	r2, #3
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a48      	ldr	r2, [pc, #288]	; (8006018 <_tx_thread_create+0x1b4>)
 8005ef6:	655a      	str	r2, [r3, #84]	; 0x54
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8005efe:	4947      	ldr	r1, [pc, #284]	; (800601c <_tx_thread_create+0x1b8>)
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7fa fa95 	bl	8000430 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005f06:	f3ef 8310 	mrs	r3, PRIMASK
 8005f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005f10:	b672      	cpsid	i
    return(int_posture);
 8005f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8005f14:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a41      	ldr	r2, [pc, #260]	; (8006020 <_tx_thread_create+0x1bc>)
 8005f1a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8005f1c:	4b41      	ldr	r3, [pc, #260]	; (8006024 <_tx_thread_create+0x1c0>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8005f24:	4a40      	ldr	r2, [pc, #256]	; (8006028 <_tx_thread_create+0x1c4>)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8005f3a:	e016      	b.n	8005f6a <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8005f3c:	4b3a      	ldr	r3, [pc, #232]	; (8006028 <_tx_thread_create+0x1c4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8005f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f48:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8005f6a:	4b2e      	ldr	r3, [pc, #184]	; (8006024 <_tx_thread_create+0x1c0>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	4a2c      	ldr	r2, [pc, #176]	; (8006024 <_tx_thread_create+0x1c0>)
 8005f72:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8005f74:	4b2d      	ldr	r3, [pc, #180]	; (800602c <_tx_thread_create+0x1c8>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	4a2c      	ldr	r2, [pc, #176]	; (800602c <_tx_thread_create+0x1c8>)
 8005f7c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8005f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d129      	bne.n	8005fd8 <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005f84:	f3ef 8305 	mrs	r3, IPSR
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8005f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8005f8c:	4b28      	ldr	r3, [pc, #160]	; (8006030 <_tx_thread_create+0x1cc>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005f96:	d30d      	bcc.n	8005fb4 <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8005f98:	4b26      	ldr	r3, [pc, #152]	; (8006034 <_tx_thread_create+0x1d0>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8005f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d009      	beq.n	8005fb8 <_tx_thread_create+0x154>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8005fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa8:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8005faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fb2:	e001      	b.n	8005fb8 <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	f383 8810 	msr	PRIMASK, r3
}
 8005fc2:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f8fd 	bl	80061c4 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8005fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01e      	beq.n	800600e <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8005fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fd4:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fd6:	e01a      	b.n	800600e <_tx_thread_create+0x1aa>
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fda:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f383 8810 	msr	PRIMASK, r3
}
 8005fe2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005fea:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005fec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005fee:	b672      	cpsid	i
    return(int_posture);
 8005ff0:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8005ff2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8005ff4:	4b0d      	ldr	r3, [pc, #52]	; (800602c <_tx_thread_create+0x1c8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	4a0c      	ldr	r2, [pc, #48]	; (800602c <_tx_thread_create+0x1c8>)
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f383 8810 	msr	PRIMASK, r3
}
 8006008:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800600a:	f000 f8a1 	bl	8006150 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3748      	adds	r7, #72	; 0x48
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	080067b1 	.word	0x080067b1
 800601c:	080060b9 	.word	0x080060b9
 8006020:	54485244 	.word	0x54485244
 8006024:	24001140 	.word	0x24001140
 8006028:	24001138 	.word	0x24001138
 800602c:	24001148 	.word	0x24001148
 8006030:	240001c8 	.word	0x240001c8
 8006034:	24001150 	.word	0x24001150

08006038 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800603c:	4b13      	ldr	r3, [pc, #76]	; (800608c <_tx_thread_initialize+0x54>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8006042:	4b13      	ldr	r3, [pc, #76]	; (8006090 <_tx_thread_initialize+0x58>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <_tx_thread_initialize+0x5c>)
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	4b12      	ldr	r3, [pc, #72]	; (8006098 <_tx_thread_initialize+0x60>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006054:	4b11      	ldr	r3, [pc, #68]	; (800609c <_tx_thread_initialize+0x64>)
 8006056:	2220      	movs	r2, #32
 8006058:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800605a:	2280      	movs	r2, #128	; 0x80
 800605c:	2100      	movs	r1, #0
 800605e:	4810      	ldr	r0, [pc, #64]	; (80060a0 <_tx_thread_initialize+0x68>)
 8006060:	f001 f8c4 	bl	80071ec <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <_tx_thread_initialize+0x6c>)
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800606a:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <_tx_thread_initialize+0x70>)
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8006070:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <_tx_thread_initialize+0x74>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8006076:	4b0e      	ldr	r3, [pc, #56]	; (80060b0 <_tx_thread_initialize+0x78>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <_tx_thread_initialize+0x7c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f043 7381 	orr.w	r3, r3, #16908288	; 0x1020000
    _tx_build_options =  _tx_build_options 
 8006084:	4a0b      	ldr	r2, [pc, #44]	; (80060b4 <_tx_thread_initialize+0x7c>)
 8006086:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8006088:	bf00      	nop
 800608a:	bd80      	pop	{r7, pc}
 800608c:	2400114c 	.word	0x2400114c
 8006090:	24001150 	.word	0x24001150
 8006094:	24001134 	.word	0x24001134
 8006098:	24001158 	.word	0x24001158
 800609c:	24001154 	.word	0x24001154
 80060a0:	240010b0 	.word	0x240010b0
 80060a4:	24001138 	.word	0x24001138
 80060a8:	24001140 	.word	0x24001140
 80060ac:	24001148 	.word	0x24001148
 80060b0:	24001130 	.word	0x24001130
 80060b4:	2400113c 	.word	0x2400113c

080060b8 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80060be:	4b21      	ldr	r3, [pc, #132]	; (8006144 <_tx_thread_shell_entry+0x8c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80060d0:	4b1d      	ldr	r3, [pc, #116]	; (8006148 <_tx_thread_shell_entry+0x90>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80060d8:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <_tx_thread_shell_entry+0x90>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	69f8      	ldr	r0, [r7, #28]
 80060de:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80060e0:	f3ef 8310 	mrs	r3, PRIMASK
 80060e4:	607b      	str	r3, [r7, #4]
    return(posture);
 80060e6:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80060e8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80060ea:	b672      	cpsid	i
    return(int_posture);
 80060ec:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80060ee:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	2201      	movs	r2, #1
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	2201      	movs	r2, #1
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	2200      	movs	r2, #0
 8006100:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006102:	4b12      	ldr	r3, [pc, #72]	; (800614c <_tx_thread_shell_entry+0x94>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3301      	adds	r3, #1
 8006108:	4a10      	ldr	r2, [pc, #64]	; (800614c <_tx_thread_shell_entry+0x94>)
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f383 8810 	msr	PRIMASK, r3
}
 8006116:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8006118:	f3ef 8314 	mrs	r3, CONTROL
 800611c:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800611e:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8006120:	617b      	str	r3, [r7, #20]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0304 	bic.w	r3, r3, #4
 8006128:	617b      	str	r3, [r7, #20]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f383 8814 	msr	CONTROL, r3
}
 8006134:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8006136:	69f8      	ldr	r0, [r7, #28]
 8006138:	f000 f958 	bl	80063ec <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800613c:	bf00      	nop
 800613e:	3720      	adds	r7, #32
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	2400114c 	.word	0x2400114c
 8006148:	24001130 	.word	0x24001130
 800614c:	24001148 	.word	0x24001148

08006150 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8006150:	b480      	push	{r7}
 8006152:	b089      	sub	sp, #36	; 0x24
 8006154:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006156:	4b17      	ldr	r3, [pc, #92]	; (80061b4 <_tx_thread_system_preempt_check+0x64>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d121      	bne.n	80061a6 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <_tx_thread_system_preempt_check+0x68>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8006168:	4b14      	ldr	r3, [pc, #80]	; (80061bc <_tx_thread_system_preempt_check+0x6c>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	429a      	cmp	r2, r3
 8006174:	d017      	beq.n	80061a6 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006176:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <_tx_thread_system_preempt_check+0x70>)
 8006178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800617e:	f3ef 8305 	mrs	r3, IPSR
 8006182:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8006184:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10c      	bne.n	80061a4 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800618a:	f3ef 8310 	mrs	r3, PRIMASK
 800618e:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006190:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8006192:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006194:	b662      	cpsie	i
}
 8006196:	bf00      	nop
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f383 8810 	msr	PRIMASK, r3
}
 80061a2:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80061a4:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80061a6:	bf00      	nop
 80061a8:	3724      	adds	r7, #36	; 0x24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	24001148 	.word	0x24001148
 80061b8:	2400114c 	.word	0x2400114c
 80061bc:	24001150 	.word	0x24001150
 80061c0:	e000ed04 	.word	0xe000ed04

080061c4 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b096      	sub	sp, #88	; 0x58
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80061cc:	f3ef 8310 	mrs	r3, PRIMASK
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80061d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80061d4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80061d6:	b672      	cpsid	i
    return(int_posture);
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80061da:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	334c      	adds	r3, #76	; 0x4c
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 fc1d 	bl	8006a28 <_tx_timer_system_deactivate>
 80061ee:	e002      	b.n	80061f6 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80061f6:	4b75      	ldr	r3, [pc, #468]	; (80063cc <_tx_thread_system_resume+0x208>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	4a73      	ldr	r2, [pc, #460]	; (80063cc <_tx_thread_system_resume+0x208>)
 80061fe:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	f040 8096 	bne.w	8006336 <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80aa 	beq.w	8006368 <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	f040 8085 	bne.w	8006328 <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006228:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800622a:	4a69      	ldr	r2, [pc, #420]	; (80063d0 <_tx_thread_system_resume+0x20c>)
 800622c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006232:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8006234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006236:	2b00      	cmp	r3, #0
 8006238:	d166      	bne.n	8006308 <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800623a:	4965      	ldr	r1, [pc, #404]	; (80063d0 <_tx_thread_system_resume+0x20c>)
 800623c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8006250:	2201      	movs	r2, #1
 8006252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006254:	fa02 f303 	lsl.w	r3, r2, r3
 8006258:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800625a:	4b5e      	ldr	r3, [pc, #376]	; (80063d4 <_tx_thread_system_resume+0x210>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006260:	4313      	orrs	r3, r2
 8006262:	4a5c      	ldr	r2, [pc, #368]	; (80063d4 <_tx_thread_system_resume+0x210>)
 8006264:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8006266:	4b5c      	ldr	r3, [pc, #368]	; (80063d8 <_tx_thread_system_resume+0x214>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800626c:	429a      	cmp	r2, r3
 800626e:	d27b      	bcs.n	8006368 <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8006270:	4a59      	ldr	r2, [pc, #356]	; (80063d8 <_tx_thread_system_resume+0x214>)
 8006272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006274:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8006276:	4b59      	ldr	r3, [pc, #356]	; (80063dc <_tx_thread_system_resume+0x218>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800627c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d103      	bne.n	800628a <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8006282:	4a56      	ldr	r2, [pc, #344]	; (80063dc <_tx_thread_system_resume+0x218>)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	e06e      	b.n	8006368 <_tx_thread_system_resume+0x1a4>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006290:	429a      	cmp	r2, r3
 8006292:	d269      	bcs.n	8006368 <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8006294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006296:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	429a      	cmp	r2, r3
 800629e:	d00b      	beq.n	80062b8 <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 80062a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	2201      	movs	r2, #1
 80062a6:	fa02 f303 	lsl.w	r3, r2, r3
 80062aa:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 80062ac:	4b4c      	ldr	r3, [pc, #304]	; (80063e0 <_tx_thread_system_resume+0x21c>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062b2:	4313      	orrs	r3, r2
 80062b4:	4a4a      	ldr	r2, [pc, #296]	; (80063e0 <_tx_thread_system_resume+0x21c>)
 80062b6:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80062b8:	4a48      	ldr	r2, [pc, #288]	; (80063dc <_tx_thread_system_resume+0x218>)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80062c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c4:	f383 8810 	msr	PRIMASK, r3
}
 80062c8:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80062ca:	4b40      	ldr	r3, [pc, #256]	; (80063cc <_tx_thread_system_resume+0x208>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 80062d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d174      	bne.n	80063c0 <_tx_thread_system_resume+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80062d6:	4b43      	ldr	r3, [pc, #268]	; (80063e4 <_tx_thread_system_resume+0x220>)
 80062d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062dc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80062de:	f3ef 8305 	mrs	r3, IPSR
 80062e2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10c      	bne.n	8006304 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80062ea:	f3ef 8310 	mrs	r3, PRIMASK
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 80062f2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80062f4:	b662      	cpsie	i
}
 80062f6:	bf00      	nop
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f383 8810 	msr	PRIMASK, r3
}
 8006302:	bf00      	nop
}
 8006304:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8006306:	e05b      	b.n	80063c0 <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8006308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800630e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8006314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800631e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006324:	621a      	str	r2, [r3, #32]
 8006326:	e01f      	b.n	8006368 <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2203      	movs	r2, #3
 8006332:	631a      	str	r2, [r3, #48]	; 0x30
 8006334:	e018      	b.n	8006368 <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	2b01      	cmp	r3, #1
 800633c:	d014      	beq.n	8006368 <_tx_thread_system_resume+0x1a4>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006342:	2b02      	cmp	r3, #2
 8006344:	d010      	beq.n	8006368 <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	631a      	str	r2, [r3, #48]	; 0x30
 800635a:	e005      	b.n	8006368 <_tx_thread_system_resume+0x1a4>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2203      	movs	r2, #3
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006368:	4b1f      	ldr	r3, [pc, #124]	; (80063e8 <_tx_thread_system_resume+0x224>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	63bb      	str	r3, [r7, #56]	; 0x38
 800636e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006370:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	f383 8810 	msr	PRIMASK, r3
}
 8006378:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800637a:	4b18      	ldr	r3, [pc, #96]	; (80063dc <_tx_thread_system_resume+0x218>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006380:	429a      	cmp	r2, r3
 8006382:	d020      	beq.n	80063c6 <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006384:	4b11      	ldr	r3, [pc, #68]	; (80063cc <_tx_thread_system_resume+0x208>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800638a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638c:	2b00      	cmp	r3, #0
 800638e:	d11a      	bne.n	80063c6 <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006390:	4b14      	ldr	r3, [pc, #80]	; (80063e4 <_tx_thread_system_resume+0x220>)
 8006392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006396:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006398:	f3ef 8305 	mrs	r3, IPSR
 800639c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800639e:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10f      	bne.n	80063c4 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80063a4:	f3ef 8310 	mrs	r3, PRIMASK
 80063a8:	613b      	str	r3, [r7, #16]
    return(posture);
 80063aa:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80063ac:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80063ae:	b662      	cpsie	i
}
 80063b0:	bf00      	nop
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	f383 8810 	msr	PRIMASK, r3
}
 80063bc:	bf00      	nop
}
 80063be:	e001      	b.n	80063c4 <_tx_thread_system_resume+0x200>
                                return;
 80063c0:	bf00      	nop
 80063c2:	e000      	b.n	80063c6 <_tx_thread_system_resume+0x202>
 80063c4:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80063c6:	3758      	adds	r7, #88	; 0x58
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	24001148 	.word	0x24001148
 80063d0:	240010b0 	.word	0x240010b0
 80063d4:	24001134 	.word	0x24001134
 80063d8:	24001154 	.word	0x24001154
 80063dc:	24001150 	.word	0x24001150
 80063e0:	24001158 	.word	0x24001158
 80063e4:	e000ed04 	.word	0xe000ed04
 80063e8:	2400114c 	.word	0x2400114c

080063ec <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b0a0      	sub	sp, #128	; 0x80
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80063f4:	4b5a      	ldr	r3, [pc, #360]	; (8006560 <_tx_thread_system_suspend+0x174>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80063fa:	f3ef 8310 	mrs	r3, PRIMASK
 80063fe:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 8006400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 8006402:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8006404:	b672      	cpsid	i
    return(int_posture);
 8006406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8006408:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800640e:	429a      	cmp	r2, r3
 8006410:	d112      	bne.n	8006438 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006416:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8006418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800641e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d004      	beq.n	8006430 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	334c      	adds	r3, #76	; 0x4c
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fa9a 	bl	8006964 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	4a4b      	ldr	r2, [pc, #300]	; (8006564 <_tx_thread_system_suspend+0x178>)
 8006436:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006438:	4b4b      	ldr	r3, [pc, #300]	; (8006568 <_tx_thread_system_suspend+0x17c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3b01      	subs	r3, #1
 800643e:	4a4a      	ldr	r2, [pc, #296]	; (8006568 <_tx_thread_system_suspend+0x17c>)
 8006440:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	2b01      	cmp	r3, #1
 8006448:	f040 8122 	bne.w	8006690 <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006456:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800645e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	429a      	cmp	r2, r3
 8006464:	d027      	beq.n	80064b6 <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800646c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006470:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8006472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006474:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006476:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8006478:	4a3c      	ldr	r2, [pc, #240]	; (800656c <_tx_thread_system_suspend+0x180>)
 800647a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800647c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	f040 808b 	bne.w	800659e <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8006488:	4938      	ldr	r1, [pc, #224]	; (800656c <_tx_thread_system_suspend+0x180>)
 800648a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800648c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800648e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8006492:	4b37      	ldr	r3, [pc, #220]	; (8006570 <_tx_thread_system_suspend+0x184>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 8081 	beq.w	800659e <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800649c:	2201      	movs	r2, #1
 800649e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80064a6:	4b32      	ldr	r3, [pc, #200]	; (8006570 <_tx_thread_system_suspend+0x184>)
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064ac:	43db      	mvns	r3, r3
 80064ae:	4013      	ands	r3, r2
 80064b0:	4a2f      	ldr	r2, [pc, #188]	; (8006570 <_tx_thread_system_suspend+0x184>)
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	e073      	b.n	800659e <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80064b6:	4a2d      	ldr	r2, [pc, #180]	; (800656c <_tx_thread_system_suspend+0x180>)
 80064b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ba:	2100      	movs	r1, #0
 80064bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80064c0:	2201      	movs	r2, #1
 80064c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80064ca:	4b2a      	ldr	r3, [pc, #168]	; (8006574 <_tx_thread_system_suspend+0x188>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064d0:	43db      	mvns	r3, r3
 80064d2:	4013      	ands	r3, r2
 80064d4:	4a27      	ldr	r2, [pc, #156]	; (8006574 <_tx_thread_system_suspend+0x188>)
 80064d6:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80064d8:	4b25      	ldr	r3, [pc, #148]	; (8006570 <_tx_thread_system_suspend+0x184>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 80064e0:	2201      	movs	r2, #1
 80064e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 80064ea:	4b21      	ldr	r3, [pc, #132]	; (8006570 <_tx_thread_system_suspend+0x184>)
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064f0:	43db      	mvns	r3, r3
 80064f2:	4013      	ands	r3, r2
 80064f4:	4a1e      	ldr	r2, [pc, #120]	; (8006570 <_tx_thread_system_suspend+0x184>)
 80064f6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80064f8:	2300      	movs	r3, #0
 80064fa:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80064fc:	4b1d      	ldr	r3, [pc, #116]	; (8006574 <_tx_thread_system_suspend+0x188>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8006502:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006504:	2b00      	cmp	r3, #0
 8006506:	d13d      	bne.n	8006584 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006508:	4b1b      	ldr	r3, [pc, #108]	; (8006578 <_tx_thread_system_suspend+0x18c>)
 800650a:	2220      	movs	r2, #32
 800650c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800650e:	4b1b      	ldr	r3, [pc, #108]	; (800657c <_tx_thread_system_suspend+0x190>)
 8006510:	2200      	movs	r2, #0
 8006512:	601a      	str	r2, [r3, #0]
 8006514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006516:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800651a:	f383 8810 	msr	PRIMASK, r3
}
 800651e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006520:	4b11      	ldr	r3, [pc, #68]	; (8006568 <_tx_thread_system_suspend+0x17c>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 8006526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006528:	2b00      	cmp	r3, #0
 800652a:	f040 80db 	bne.w	80066e4 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800652e:	4b14      	ldr	r3, [pc, #80]	; (8006580 <_tx_thread_system_suspend+0x194>)
 8006530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006534:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006536:	f3ef 8305 	mrs	r3, IPSR
 800653a:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 800653c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10c      	bne.n	800655c <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006542:	f3ef 8310 	mrs	r3, PRIMASK
 8006546:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8006548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 800654a:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 800654c:	b662      	cpsie	i
}
 800654e:	bf00      	nop
 8006550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006552:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006556:	f383 8810 	msr	PRIMASK, r3
}
 800655a:	bf00      	nop
}
 800655c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800655e:	e0c1      	b.n	80066e4 <_tx_thread_system_suspend+0x2f8>
 8006560:	2400114c 	.word	0x2400114c
 8006564:	240011e4 	.word	0x240011e4
 8006568:	24001148 	.word	0x24001148
 800656c:	240010b0 	.word	0x240010b0
 8006570:	24001158 	.word	0x24001158
 8006574:	24001134 	.word	0x24001134
 8006578:	24001154 	.word	0x24001154
 800657c:	24001150 	.word	0x24001150
 8006580:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8006584:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006586:	fa93 f3a3 	rbit	r3, r3
 800658a:	663b      	str	r3, [r7, #96]	; 0x60
 800658c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800658e:	fab3 f383 	clz	r3, r3
 8006592:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8006594:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006596:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006598:	4413      	add	r3, r2
 800659a:	4a56      	ldr	r2, [pc, #344]	; (80066f4 <_tx_thread_system_suspend+0x308>)
 800659c:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800659e:	4b56      	ldr	r3, [pc, #344]	; (80066f8 <_tx_thread_system_suspend+0x30c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d173      	bne.n	8006690 <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80065a8:	4b52      	ldr	r3, [pc, #328]	; (80066f4 <_tx_thread_system_suspend+0x308>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a53      	ldr	r2, [pc, #332]	; (80066fc <_tx_thread_system_suspend+0x310>)
 80065ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b2:	4a51      	ldr	r2, [pc, #324]	; (80066f8 <_tx_thread_system_suspend+0x30c>)
 80065b4:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 80065b6:	4b52      	ldr	r3, [pc, #328]	; (8006700 <_tx_thread_system_suspend+0x314>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d043      	beq.n	8006646 <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 80065be:	4b51      	ldr	r3, [pc, #324]	; (8006704 <_tx_thread_system_suspend+0x318>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a4f      	ldr	r2, [pc, #316]	; (8006704 <_tx_thread_system_suspend+0x318>)
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065ca:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	f383 8810 	msr	PRIMASK, r3
}
 80065d2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80065d4:	f3ef 8310 	mrs	r3, PRIMASK
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80065dc:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80065de:	b672      	cpsid	i
    return(int_posture);
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 80065e2:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 80065e4:	4b47      	ldr	r3, [pc, #284]	; (8006704 <_tx_thread_system_suspend+0x318>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	4a46      	ldr	r2, [pc, #280]	; (8006704 <_tx_thread_system_suspend+0x318>)
 80065ec:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 80065ee:	2300      	movs	r3, #0
 80065f0:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 80065f2:	4b43      	ldr	r3, [pc, #268]	; (8006700 <_tx_thread_system_suspend+0x314>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80065f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065fa:	fa93 f3a3 	rbit	r3, r3
 80065fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006602:	fab3 f383 	clz	r3, r3
 8006606:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8006608:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800660a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800660c:	4413      	add	r3, r2
 800660e:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8006610:	4a3a      	ldr	r2, [pc, #232]	; (80066fc <_tx_thread_system_suspend+0x310>)
 8006612:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800661a:	4b36      	ldr	r3, [pc, #216]	; (80066f4 <_tx_thread_system_suspend+0x308>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d811      	bhi.n	8006646 <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8006622:	4a36      	ldr	r2, [pc, #216]	; (80066fc <_tx_thread_system_suspend+0x310>)
 8006624:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662a:	4a33      	ldr	r2, [pc, #204]	; (80066f8 <_tx_thread_system_suspend+0x30c>)
 800662c:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800662e:	2201      	movs	r2, #1
 8006630:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8006638:	4b31      	ldr	r3, [pc, #196]	; (8006700 <_tx_thread_system_suspend+0x314>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800663e:	43db      	mvns	r3, r3
 8006640:	4013      	ands	r3, r2
 8006642:	4a2f      	ldr	r2, [pc, #188]	; (8006700 <_tx_thread_system_suspend+0x314>)
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006648:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	f383 8810 	msr	PRIMASK, r3
}
 8006650:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006652:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <_tx_thread_system_suspend+0x318>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 8006658:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d144      	bne.n	80066e8 <_tx_thread_system_suspend+0x2fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800665e:	4b2a      	ldr	r3, [pc, #168]	; (8006708 <_tx_thread_system_suspend+0x31c>)
 8006660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006664:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006666:	f3ef 8305 	mrs	r3, IPSR
 800666a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800666c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10c      	bne.n	800668c <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006672:	f3ef 8310 	mrs	r3, PRIMASK
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800667a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800667c:	b662      	cpsie	i
}
 800667e:	bf00      	nop
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	f383 8810 	msr	PRIMASK, r3
}
 800668a:	bf00      	nop
}
 800668c:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800668e:	e02b      	b.n	80066e8 <_tx_thread_system_suspend+0x2fc>
 8006690:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006692:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f383 8810 	msr	PRIMASK, r3
}
 800669a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800669c:	4b16      	ldr	r3, [pc, #88]	; (80066f8 <_tx_thread_system_suspend+0x30c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d022      	beq.n	80066ec <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80066a6:	4b17      	ldr	r3, [pc, #92]	; (8006704 <_tx_thread_system_suspend+0x318>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 80066ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d11c      	bne.n	80066ec <_tx_thread_system_suspend+0x300>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <_tx_thread_system_suspend+0x31c>)
 80066b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066b8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80066ba:	f3ef 8305 	mrs	r3, IPSR
 80066be:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80066c0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10c      	bne.n	80066e0 <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80066c6:	f3ef 8310 	mrs	r3, PRIMASK
 80066ca:	613b      	str	r3, [r7, #16]
    return(posture);
 80066cc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80066ce:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80066d0:	b662      	cpsie	i
}
 80066d2:	bf00      	nop
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f383 8810 	msr	PRIMASK, r3
}
 80066de:	bf00      	nop
}
 80066e0:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80066e2:	e003      	b.n	80066ec <_tx_thread_system_suspend+0x300>
                return;
 80066e4:	bf00      	nop
 80066e6:	e002      	b.n	80066ee <_tx_thread_system_suspend+0x302>
            return;
 80066e8:	bf00      	nop
 80066ea:	e000      	b.n	80066ee <_tx_thread_system_suspend+0x302>
    return;
 80066ec:	bf00      	nop
}
 80066ee:	3780      	adds	r7, #128	; 0x80
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	24001154 	.word	0x24001154
 80066f8:	24001150 	.word	0x24001150
 80066fc:	240010b0 	.word	0x240010b0
 8006700:	24001158 	.word	0x24001158
 8006704:	24001148 	.word	0x24001148
 8006708:	e000ed04 	.word	0xe000ed04

0800670c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006712:	4b21      	ldr	r3, [pc, #132]	; (8006798 <_tx_thread_time_slice+0x8c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006718:	f3ef 8310 	mrs	r3, PRIMASK
 800671c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800671e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8006720:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006722:	b672      	cpsid	i
    return(int_posture);
 8006724:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8006726:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8006728:	4b1c      	ldr	r3, [pc, #112]	; (800679c <_tx_thread_time_slice+0x90>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d024      	beq.n	800677e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	2b00      	cmp	r3, #0
 800673a:	d120      	bne.n	800677e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	69da      	ldr	r2, [r3, #28]
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <_tx_thread_time_slice+0x94>)
 800674a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	429a      	cmp	r2, r3
 8006754:	d013      	beq.n	800677e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675e:	429a      	cmp	r2, r3
 8006760:	d10d      	bne.n	800677e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	6a12      	ldr	r2, [r2, #32]
 800676a:	490e      	ldr	r1, [pc, #56]	; (80067a4 <_tx_thread_time_slice+0x98>)
 800676c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006770:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <_tx_thread_time_slice+0x9c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a0b      	ldr	r2, [pc, #44]	; (80067a4 <_tx_thread_time_slice+0x98>)
 8006776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800677a:	4a0c      	ldr	r2, [pc, #48]	; (80067ac <_tx_thread_time_slice+0xa0>)
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f383 8810 	msr	PRIMASK, r3
}
 8006788:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800678a:	bf00      	nop
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	2400114c 	.word	0x2400114c
 800679c:	240016b8 	.word	0x240016b8
 80067a0:	240011e4 	.word	0x240011e4
 80067a4:	240010b0 	.word	0x240010b0
 80067a8:	24001154 	.word	0x24001154
 80067ac:	24001150 	.word	0x24001150

080067b0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08a      	sub	sp, #40	; 0x28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80067bc:	f3ef 8310 	mrs	r3, PRIMASK
 80067c0:	617b      	str	r3, [r7, #20]
    return(posture);
 80067c2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 80067c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 80067c6:	b672      	cpsid	i
    return(int_posture);
 80067c8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 80067ca:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d10e      	bne.n	80067f2 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80067d4:	4b13      	ldr	r3, [pc, #76]	; (8006824 <_tx_thread_timeout+0x74>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3301      	adds	r3, #1
 80067da:	4a12      	ldr	r2, [pc, #72]	; (8006824 <_tx_thread_timeout+0x74>)
 80067dc:	6013      	str	r3, [r2, #0]
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f383 8810 	msr	PRIMASK, r3
}
 80067e8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80067ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067ec:	f7ff fcea 	bl	80061c4 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80067f0:	e013      	b.n	800681a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f6:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	6a3b      	ldr	r3, [r7, #32]
 8006802:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f383 8810 	msr	PRIMASK, r3
}
 800680a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	69b9      	ldr	r1, [r7, #24]
 8006816:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006818:	4798      	blx	r3
}
 800681a:	bf00      	nop
 800681c:	3728      	adds	r7, #40	; 0x28
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	24001148 	.word	0x24001148

08006828 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800682e:	f3ef 8310 	mrs	r3, PRIMASK
 8006832:	607b      	str	r3, [r7, #4]
    return(posture);
 8006834:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8006836:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006838:	b672      	cpsid	i
    return(int_posture);
 800683a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800683c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <_tx_timer_expiration_process+0x3c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3301      	adds	r3, #1
 8006844:	4a07      	ldr	r2, [pc, #28]	; (8006864 <_tx_timer_expiration_process+0x3c>)
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f383 8810 	msr	PRIMASK, r3
}
 8006852:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8006854:	4804      	ldr	r0, [pc, #16]	; (8006868 <_tx_timer_expiration_process+0x40>)
 8006856:	f7ff fcb5 	bl	80061c4 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	24001148 	.word	0x24001148
 8006868:	240011f0 	.word	0x240011f0

0800686c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800686c:	b590      	push	{r4, r7, lr}
 800686e:	b089      	sub	sp, #36	; 0x24
 8006870:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8006872:	4b28      	ldr	r3, [pc, #160]	; (8006914 <_tx_timer_initialize+0xa8>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8006878:	4b27      	ldr	r3, [pc, #156]	; (8006918 <_tx_timer_initialize+0xac>)
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800687e:	4b27      	ldr	r3, [pc, #156]	; (800691c <_tx_timer_initialize+0xb0>)
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8006884:	4b26      	ldr	r3, [pc, #152]	; (8006920 <_tx_timer_initialize+0xb4>)
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800688a:	4b26      	ldr	r3, [pc, #152]	; (8006924 <_tx_timer_initialize+0xb8>)
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8006890:	2280      	movs	r2, #128	; 0x80
 8006892:	2100      	movs	r1, #0
 8006894:	4824      	ldr	r0, [pc, #144]	; (8006928 <_tx_timer_initialize+0xbc>)
 8006896:	f000 fca9 	bl	80071ec <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800689a:	4b24      	ldr	r3, [pc, #144]	; (800692c <_tx_timer_initialize+0xc0>)
 800689c:	4a22      	ldr	r2, [pc, #136]	; (8006928 <_tx_timer_initialize+0xbc>)
 800689e:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80068a0:	4b23      	ldr	r3, [pc, #140]	; (8006930 <_tx_timer_initialize+0xc4>)
 80068a2:	4a21      	ldr	r2, [pc, #132]	; (8006928 <_tx_timer_initialize+0xbc>)
 80068a4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80068a6:	4b23      	ldr	r3, [pc, #140]	; (8006934 <_tx_timer_initialize+0xc8>)
 80068a8:	4a23      	ldr	r2, [pc, #140]	; (8006938 <_tx_timer_initialize+0xcc>)
 80068aa:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80068ac:	4b21      	ldr	r3, [pc, #132]	; (8006934 <_tx_timer_initialize+0xc8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3304      	adds	r3, #4
 80068b2:	4a20      	ldr	r2, [pc, #128]	; (8006934 <_tx_timer_initialize+0xc8>)
 80068b4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80068b6:	4b21      	ldr	r3, [pc, #132]	; (800693c <_tx_timer_initialize+0xd0>)
 80068b8:	4a21      	ldr	r2, [pc, #132]	; (8006940 <_tx_timer_initialize+0xd4>)
 80068ba:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80068bc:	4b21      	ldr	r3, [pc, #132]	; (8006944 <_tx_timer_initialize+0xd8>)
 80068be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068c2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80068c4:	4b20      	ldr	r3, [pc, #128]	; (8006948 <_tx_timer_initialize+0xdc>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80068ca:	4b1c      	ldr	r3, [pc, #112]	; (800693c <_tx_timer_initialize+0xd0>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1d      	ldr	r2, [pc, #116]	; (8006944 <_tx_timer_initialize+0xd8>)
 80068d0:	6812      	ldr	r2, [r2, #0]
 80068d2:	491d      	ldr	r1, [pc, #116]	; (8006948 <_tx_timer_initialize+0xdc>)
 80068d4:	6809      	ldr	r1, [r1, #0]
 80068d6:	481c      	ldr	r0, [pc, #112]	; (8006948 <_tx_timer_initialize+0xdc>)
 80068d8:	6800      	ldr	r0, [r0, #0]
 80068da:	2400      	movs	r4, #0
 80068dc:	9405      	str	r4, [sp, #20]
 80068de:	2400      	movs	r4, #0
 80068e0:	9404      	str	r4, [sp, #16]
 80068e2:	9003      	str	r0, [sp, #12]
 80068e4:	9102      	str	r1, [sp, #8]
 80068e6:	9201      	str	r2, [sp, #4]
 80068e8:	9300      	str	r3, [sp, #0]
 80068ea:	4b18      	ldr	r3, [pc, #96]	; (800694c <_tx_timer_initialize+0xe0>)
 80068ec:	4a18      	ldr	r2, [pc, #96]	; (8006950 <_tx_timer_initialize+0xe4>)
 80068ee:	4919      	ldr	r1, [pc, #100]	; (8006954 <_tx_timer_initialize+0xe8>)
 80068f0:	4819      	ldr	r0, [pc, #100]	; (8006958 <_tx_timer_initialize+0xec>)
 80068f2:	f7ff fab7 	bl	8005e64 <_tx_thread_create>
 80068f6:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e5      	bne.n	80068ca <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80068fe:	4b17      	ldr	r3, [pc, #92]	; (800695c <_tx_timer_initialize+0xf0>)
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8006904:	4b16      	ldr	r3, [pc, #88]	; (8006960 <_tx_timer_initialize+0xf4>)
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	bd90      	pop	{r4, r7, pc}
 8006912:	bf00      	nop
 8006914:	240016bc 	.word	0x240016bc
 8006918:	240011e4 	.word	0x240011e4
 800691c:	240016b8 	.word	0x240016b8
 8006920:	240011e0 	.word	0x240011e0
 8006924:	240012a0 	.word	0x240012a0
 8006928:	24001160 	.word	0x24001160
 800692c:	240012a4 	.word	0x240012a4
 8006930:	2400115c 	.word	0x2400115c
 8006934:	240011ec 	.word	0x240011ec
 8006938:	240011dc 	.word	0x240011dc
 800693c:	240016b0 	.word	0x240016b0
 8006940:	240012b0 	.word	0x240012b0
 8006944:	240012ac 	.word	0x240012ac
 8006948:	240011e8 	.word	0x240011e8
 800694c:	4154494d 	.word	0x4154494d
 8006950:	08006a99 	.word	0x08006a99
 8006954:	0800724c 	.word	0x0800724c
 8006958:	240011f0 	.word	0x240011f0
 800695c:	240012a8 	.word	0x240012a8
 8006960:	240016b4 	.word	0x240016b4

08006964 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8006964:	b480      	push	{r7}
 8006966:	b089      	sub	sp, #36	; 0x24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d04a      	beq.n	8006a0e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697e:	d046      	beq.n	8006a0e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	699b      	ldr	r3, [r3, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d142      	bne.n	8006a0e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2b20      	cmp	r3, #32
 800698c:	d902      	bls.n	8006994 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800698e:	231f      	movs	r3, #31
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	e002      	b.n	800699a <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	3b01      	subs	r3, #1
 8006998:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800699a:	4b20      	ldr	r3, [pc, #128]	; (8006a1c <_tx_timer_system_activate+0xb8>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80069a6:	4b1e      	ldr	r3, [pc, #120]	; (8006a20 <_tx_timer_system_activate+0xbc>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d30b      	bcc.n	80069c8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80069b0:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <_tx_timer_system_activate+0xbc>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	109b      	asrs	r3, r3, #2
 80069ba:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80069bc:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <_tx_timer_system_activate+0xc0>)
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d109      	bne.n	80069e4 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e011      	b.n	8006a08 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	69fa      	ldr	r2, [r7, #28]
 8006a0c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8006a0e:	bf00      	nop
 8006a10:	3724      	adds	r7, #36	; 0x24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	2400115c 	.word	0x2400115c
 8006a20:	240011ec 	.word	0x240011ec
 8006a24:	240012a4 	.word	0x240012a4

08006a28 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b087      	sub	sp, #28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	699b      	ldr	r3, [r3, #24]
 8006a34:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d026      	beq.n	8006a8a <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d108      	bne.n	8006a5c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d117      	bne.n	8006a84 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]
 8006a5a:	e013      	b.n	8006a84 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d105      	bne.n	8006a84 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	619a      	str	r2, [r3, #24]
    }
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b098      	sub	sp, #96	; 0x60
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a73      	ldr	r2, [pc, #460]	; (8006c74 <_tx_timer_thread_entry+0x1dc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	f040 80de 	bne.w	8006c6a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006aae:	f3ef 8310 	mrs	r3, PRIMASK
 8006ab2:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8006ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ab8:	b672      	cpsid	i
    return(int_posture);
 8006aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8006abc:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8006abe:	4b6e      	ldr	r3, [pc, #440]	; (8006c78 <_tx_timer_thread_entry+0x1e0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f107 020c 	add.w	r2, r7, #12
 8006ad2:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8006ad4:	4b68      	ldr	r3, [pc, #416]	; (8006c78 <_tx_timer_thread_entry+0x1e0>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8006adc:	4b66      	ldr	r3, [pc, #408]	; (8006c78 <_tx_timer_thread_entry+0x1e0>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	4a65      	ldr	r2, [pc, #404]	; (8006c78 <_tx_timer_thread_entry+0x1e0>)
 8006ae4:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8006ae6:	4b64      	ldr	r3, [pc, #400]	; (8006c78 <_tx_timer_thread_entry+0x1e0>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4b64      	ldr	r3, [pc, #400]	; (8006c7c <_tx_timer_thread_entry+0x1e4>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d103      	bne.n	8006afa <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8006af2:	4b63      	ldr	r3, [pc, #396]	; (8006c80 <_tx_timer_thread_entry+0x1e8>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a60      	ldr	r2, [pc, #384]	; (8006c78 <_tx_timer_thread_entry+0x1e0>)
 8006af8:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8006afa:	4b62      	ldr	r3, [pc, #392]	; (8006c84 <_tx_timer_thread_entry+0x1ec>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	f383 8810 	msr	PRIMASK, r3
}
 8006b0a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b10:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b16:	b672      	cpsid	i
    return(int_posture);
 8006b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8006b1a:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8006b1c:	e07f      	b.n	8006c1e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8006b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d102      	bne.n	8006b3a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e00e      	b.n	8006b58 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8006b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8006b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b44:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8006b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8006b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b4e:	f107 020c 	add.w	r2, r7, #12
 8006b52:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8006b54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b56:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8006b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b20      	cmp	r3, #32
 8006b5e:	d911      	bls.n	8006b84 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8006b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8006b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b72:	f107 0208 	add.w	r2, r7, #8
 8006b76:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8006b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b7c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8006b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	e01a      	b.n	8006bba <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8006b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8006b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b96:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8006b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d009      	beq.n	8006bb4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8006ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba2:	f107 0208 	add.w	r2, r7, #8
 8006ba6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8006ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006baa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bac:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	60bb      	str	r3, [r7, #8]
 8006bb2:	e002      	b.n	8006bba <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8006bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8006bba:	4a33      	ldr	r2, [pc, #204]	; (8006c88 <_tx_timer_thread_entry+0x1f0>)
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	f383 8810 	msr	PRIMASK, r3
}
 8006bca:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8006bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8006bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bd4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006bd6:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8006be0:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8006be2:	b672      	cpsid	i
    return(int_posture);
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8006be6:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8006be8:	4b27      	ldr	r3, [pc, #156]	; (8006c88 <_tx_timer_thread_entry+0x1f0>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d105      	bne.n	8006c02 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8006bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8006bfc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006bfe:	f7ff feb1 	bl	8006964 <_tx_timer_system_activate>
 8006c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c04:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	f383 8810 	msr	PRIMASK, r3
}
 8006c0c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c12:	623b      	str	r3, [r7, #32]
    return(posture);
 8006c14:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006c16:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006c18:	b672      	cpsid	i
    return(int_posture);
 8006c1a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8006c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f47f af7c 	bne.w	8006b1e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8006c26:	4b17      	ldr	r3, [pc, #92]	; (8006c84 <_tx_timer_thread_entry+0x1ec>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d116      	bne.n	8006c5c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8006c2e:	4b17      	ldr	r3, [pc, #92]	; (8006c8c <_tx_timer_thread_entry+0x1f4>)
 8006c30:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8006c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c34:	2203      	movs	r2, #3
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8006c3e:	4b14      	ldr	r3, [pc, #80]	; (8006c90 <_tx_timer_thread_entry+0x1f8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	4a12      	ldr	r2, [pc, #72]	; (8006c90 <_tx_timer_thread_entry+0x1f8>)
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c4a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f383 8810 	msr	PRIMASK, r3
}
 8006c52:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8006c54:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006c56:	f7ff fbc9 	bl	80063ec <_tx_thread_system_suspend>
 8006c5a:	e728      	b.n	8006aae <_tx_timer_thread_entry+0x16>
 8006c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c5e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	f383 8810 	msr	PRIMASK, r3
}
 8006c66:	bf00      	nop
            TX_DISABLE
 8006c68:	e721      	b.n	8006aae <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8006c6a:	bf00      	nop
 8006c6c:	3760      	adds	r7, #96	; 0x60
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	4154494d 	.word	0x4154494d
 8006c78:	2400115c 	.word	0x2400115c
 8006c7c:	240011ec 	.word	0x240011ec
 8006c80:	240012a4 	.word	0x240012a4
 8006c84:	240011e0 	.word	0x240011e0
 8006c88:	240012a0 	.word	0x240012a0
 8006c8c:	240011f0 	.word	0x240011f0
 8006c90:	24001148 	.word	0x24001148

08006c94 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b092      	sub	sp, #72	; 0x48
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d102      	bne.n	8006cb2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8006cac:	2302      	movs	r3, #2
 8006cae:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb0:	e075      	b.n	8006d9e <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8006cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cb4:	2b34      	cmp	r3, #52	; 0x34
 8006cb6:	d002      	beq.n	8006cbe <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	647b      	str	r3, [r7, #68]	; 0x44
 8006cbc:	e06f      	b.n	8006d9e <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8006cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8006cc8:	b672      	cpsid	i
    return(int_posture);
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8006ccc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8006cce:	4b3b      	ldr	r3, [pc, #236]	; (8006dbc <_txe_byte_pool_create+0x128>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a39      	ldr	r2, [pc, #228]	; (8006dbc <_txe_byte_pool_create+0x128>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cda:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cde:	f383 8810 	msr	PRIMASK, r3
}
 8006ce2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8006ce4:	4b36      	ldr	r3, [pc, #216]	; (8006dc0 <_txe_byte_pool_create+0x12c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8006cea:	2300      	movs	r3, #0
 8006cec:	643b      	str	r3, [r7, #64]	; 0x40
 8006cee:	e009      	b.n	8006d04 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d00b      	beq.n	8006d10 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8006cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d00:	3301      	adds	r3, #1
 8006d02:	643b      	str	r3, [r7, #64]	; 0x40
 8006d04:	4b2f      	ldr	r3, [pc, #188]	; (8006dc4 <_txe_byte_pool_create+0x130>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d3f0      	bcc.n	8006cf0 <_txe_byte_pool_create+0x5c>
 8006d0e:	e000      	b.n	8006d12 <_txe_byte_pool_create+0x7e>
                break;
 8006d10:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006d12:	f3ef 8310 	mrs	r3, PRIMASK
 8006d16:	623b      	str	r3, [r7, #32]
    return(posture);
 8006d18:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006d1a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006d1c:	b672      	cpsid	i
    return(int_posture);
 8006d1e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8006d20:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8006d22:	4b26      	ldr	r3, [pc, #152]	; (8006dbc <_txe_byte_pool_create+0x128>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	4a24      	ldr	r2, [pc, #144]	; (8006dbc <_txe_byte_pool_create+0x128>)
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d32:	f383 8810 	msr	PRIMASK, r3
}
 8006d36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006d38:	f7ff fa0a 	bl	8006150 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d102      	bne.n	8006d4a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8006d44:	2302      	movs	r3, #2
 8006d46:	647b      	str	r3, [r7, #68]	; 0x44
 8006d48:	e029      	b.n	8006d9e <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d102      	bne.n	8006d56 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8006d50:	2303      	movs	r3, #3
 8006d52:	647b      	str	r3, [r7, #68]	; 0x44
 8006d54:	e023      	b.n	8006d9e <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b63      	cmp	r3, #99	; 0x63
 8006d5a:	d802      	bhi.n	8006d62 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8006d5c:	2305      	movs	r3, #5
 8006d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d60:	e01d      	b.n	8006d9e <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006d62:	4b19      	ldr	r3, [pc, #100]	; (8006dc8 <_txe_byte_pool_create+0x134>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8006d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6a:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <_txe_byte_pool_create+0x138>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d101      	bne.n	8006d74 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8006d70:	2313      	movs	r3, #19
 8006d72:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006d74:	f3ef 8305 	mrs	r3, IPSR
 8006d78:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8006d7a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006d7c:	4b14      	ldr	r3, [pc, #80]	; (8006dd0 <_txe_byte_pool_create+0x13c>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00b      	beq.n	8006d9e <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006d86:	f3ef 8305 	mrs	r3, IPSR
 8006d8a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006d8c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006d8e:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <_txe_byte_pool_create+0x13c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006d98:	d201      	bcs.n	8006d9e <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8006d9a:	2313      	movs	r3, #19
 8006d9c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006d9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f7fe fd9e 	bl	80058ec <_tx_byte_pool_create>
 8006db0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8006db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3748      	adds	r7, #72	; 0x48
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	24001148 	.word	0x24001148
 8006dc0:	24001090 	.word	0x24001090
 8006dc4:	240010ac 	.word	0x240010ac
 8006dc8:	2400114c 	.word	0x2400114c
 8006dcc:	240011f0 	.word	0x240011f0
 8006dd0:	240001c8 	.word	0x240001c8

08006dd4 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b092      	sub	sp, #72	; 0x48
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006de2:	2300      	movs	r3, #0
 8006de4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d102      	bne.n	8006df2 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006dec:	230c      	movs	r3, #12
 8006dee:	647b      	str	r3, [r7, #68]	; 0x44
 8006df0:	e054      	b.n	8006e9c <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2b1c      	cmp	r3, #28
 8006df6:	d002      	beq.n	8006dfe <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006df8:	230c      	movs	r3, #12
 8006dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8006dfc:	e04e      	b.n	8006e9c <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8006e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8006e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8006e06:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8006e08:	b672      	cpsid	i
    return(int_posture);
 8006e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8006e0c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8006e0e:	4b36      	ldr	r3, [pc, #216]	; (8006ee8 <_txe_semaphore_create+0x114>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	4a34      	ldr	r2, [pc, #208]	; (8006ee8 <_txe_semaphore_create+0x114>)
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1e:	f383 8810 	msr	PRIMASK, r3
}
 8006e22:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8006e24:	4b31      	ldr	r3, [pc, #196]	; (8006eec <_txe_semaphore_create+0x118>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e2e:	e009      	b.n	8006e44 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d00b      	beq.n	8006e50 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8006e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8006e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e40:	3301      	adds	r3, #1
 8006e42:	643b      	str	r3, [r7, #64]	; 0x40
 8006e44:	4b2a      	ldr	r3, [pc, #168]	; (8006ef0 <_txe_semaphore_create+0x11c>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d3f0      	bcc.n	8006e30 <_txe_semaphore_create+0x5c>
 8006e4e:	e000      	b.n	8006e52 <_txe_semaphore_create+0x7e>
                break;
 8006e50:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006e52:	f3ef 8310 	mrs	r3, PRIMASK
 8006e56:	623b      	str	r3, [r7, #32]
    return(posture);
 8006e58:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8006e5a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006e5c:	b672      	cpsid	i
    return(int_posture);
 8006e5e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8006e60:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8006e62:	4b21      	ldr	r3, [pc, #132]	; (8006ee8 <_txe_semaphore_create+0x114>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	4a1f      	ldr	r2, [pc, #124]	; (8006ee8 <_txe_semaphore_create+0x114>)
 8006e6a:	6013      	str	r3, [r2, #0]
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	f383 8810 	msr	PRIMASK, r3
}
 8006e76:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006e78:	f7ff f96a 	bl	8006150 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d102      	bne.n	8006e8a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8006e84:	230c      	movs	r3, #12
 8006e86:	647b      	str	r3, [r7, #68]	; 0x44
 8006e88:	e008      	b.n	8006e9c <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006e8a:	4b1a      	ldr	r3, [pc, #104]	; (8006ef4 <_txe_semaphore_create+0x120>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <_txe_semaphore_create+0x124>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d101      	bne.n	8006e9c <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8006e98:	2313      	movs	r3, #19
 8006e9a:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d114      	bne.n	8006ecc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006ea2:	f3ef 8305 	mrs	r3, IPSR
 8006ea6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8006ea8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006eaa:	4b14      	ldr	r3, [pc, #80]	; (8006efc <_txe_semaphore_create+0x128>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00b      	beq.n	8006ecc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006eb4:	f3ef 8305 	mrs	r3, IPSR
 8006eb8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006eba:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <_txe_semaphore_create+0x128>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006ec6:	d201      	bcs.n	8006ecc <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8006ec8:	2313      	movs	r3, #19
 8006eca:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d105      	bne.n	8006ede <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7fe fe88 	bl	8005bec <_tx_semaphore_create>
 8006edc:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8006ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3748      	adds	r7, #72	; 0x48
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	24001148 	.word	0x24001148
 8006eec:	2400108c 	.word	0x2400108c
 8006ef0:	2400109c 	.word	0x2400109c
 8006ef4:	2400114c 	.word	0x2400114c
 8006ef8:	240011f0 	.word	0x240011f0
 8006efc:	240001c8 	.word	0x240001c8

08006f00 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006f14:	230c      	movs	r3, #12
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	e01f      	b.n	8006f5a <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a15      	ldr	r2, [pc, #84]	; (8006f74 <_txe_semaphore_get+0x74>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d002      	beq.n	8006f2a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006f24:	230c      	movs	r3, #12
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	e017      	b.n	8006f5a <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d014      	beq.n	8006f5a <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006f30:	f3ef 8305 	mrs	r3, IPSR
 8006f34:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8006f36:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006f38:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <_txe_semaphore_get+0x78>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8006f42:	2304      	movs	r3, #4
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	e008      	b.n	8006f5a <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8006f48:	4b0c      	ldr	r3, [pc, #48]	; (8006f7c <_txe_semaphore_get+0x7c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4a0b      	ldr	r2, [pc, #44]	; (8006f80 <_txe_semaphore_get+0x80>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d101      	bne.n	8006f5a <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8006f56:	2304      	movs	r3, #4
 8006f58:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7fe fe94 	bl	8005c90 <_tx_semaphore_get>
 8006f68:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8006f6a:	697b      	ldr	r3, [r7, #20]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	53454d41 	.word	0x53454d41
 8006f78:	240001c8 	.word	0x240001c8
 8006f7c:	2400114c 	.word	0x2400114c
 8006f80:	240011f0 	.word	0x240011f0

08006f84 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006f92:	230c      	movs	r3, #12
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	e00b      	b.n	8006fb0 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a07      	ldr	r2, [pc, #28]	; (8006fbc <_txe_semaphore_put+0x38>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d002      	beq.n	8006fa8 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006fa2:	230c      	movs	r3, #12
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	e003      	b.n	8006fb0 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fe ff03 	bl	8005db4 <_tx_semaphore_put>
 8006fae:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	53454d41 	.word	0x53454d41

08006fc0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b09a      	sub	sp, #104	; 0x68
 8006fc4:	af06      	add	r7, sp, #24
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d102      	bne.n	8006fde <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8006fd8:	230e      	movs	r3, #14
 8006fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fdc:	e0bb      	b.n	8007156 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8006fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fe0:	2bb0      	cmp	r3, #176	; 0xb0
 8006fe2:	d002      	beq.n	8006fea <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8006fe4:	230e      	movs	r3, #14
 8006fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe8:	e0b5      	b.n	8007156 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006fea:	f3ef 8310 	mrs	r3, PRIMASK
 8006fee:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8006ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8006ff4:	b672      	cpsid	i
    return(int_posture);
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8006ffa:	4b64      	ldr	r3, [pc, #400]	; (800718c <_txe_thread_create+0x1cc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3301      	adds	r3, #1
 8007000:	4a62      	ldr	r2, [pc, #392]	; (800718c <_txe_thread_create+0x1cc>)
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800700a:	f383 8810 	msr	PRIMASK, r3
}
 800700e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8007010:	2300      	movs	r3, #0
 8007012:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8007014:	4b5e      	ldr	r3, [pc, #376]	; (8007190 <_txe_thread_create+0x1d0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800701a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800701c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800701e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007020:	3b01      	subs	r3, #1
 8007022:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007024:	4413      	add	r3, r2
 8007026:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8007028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800702c:	2300      	movs	r3, #0
 800702e:	647b      	str	r3, [r7, #68]	; 0x44
 8007030:	e02b      	b.n	800708a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007036:	429a      	cmp	r2, r3
 8007038:	d101      	bne.n	800703e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800703a:	2301      	movs	r3, #1
 800703c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800703e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007040:	2b01      	cmp	r3, #1
 8007042:	d028      	beq.n	8007096 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8007044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800704a:	429a      	cmp	r2, r3
 800704c:	d308      	bcc.n	8007060 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800704e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007054:	429a      	cmp	r2, r3
 8007056:	d203      	bcs.n	8007060 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8007058:	2300      	movs	r3, #0
 800705a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800705c:	2301      	movs	r3, #1
 800705e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8007060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007066:	429a      	cmp	r2, r3
 8007068:	d308      	bcc.n	800707c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800706a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007070:	429a      	cmp	r2, r3
 8007072:	d203      	bcs.n	800707c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8007074:	2300      	movs	r3, #0
 8007076:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800707c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007082:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8007084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007086:	3301      	adds	r3, #1
 8007088:	647b      	str	r3, [r7, #68]	; 0x44
 800708a:	4b42      	ldr	r3, [pc, #264]	; (8007194 <_txe_thread_create+0x1d4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007090:	429a      	cmp	r2, r3
 8007092:	d3ce      	bcc.n	8007032 <_txe_thread_create+0x72>
 8007094:	e000      	b.n	8007098 <_txe_thread_create+0xd8>
                break;
 8007096:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007098:	f3ef 8310 	mrs	r3, PRIMASK
 800709c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800709e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80070a0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80070a2:	b672      	cpsid	i
    return(int_posture);
 80070a4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80070a8:	4b38      	ldr	r3, [pc, #224]	; (800718c <_txe_thread_create+0x1cc>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4a37      	ldr	r2, [pc, #220]	; (800718c <_txe_thread_create+0x1cc>)
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	f383 8810 	msr	PRIMASK, r3
}
 80070bc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80070be:	f7ff f847 	bl	8006150 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d102      	bne.n	80070d0 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80070ca:	230e      	movs	r3, #14
 80070cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070ce:	e042      	b.n	8007156 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80070d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d102      	bne.n	80070dc <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80070d6:	2303      	movs	r3, #3
 80070d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070da:	e03c      	b.n	8007156 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d102      	bne.n	80070e8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80070e2:	2303      	movs	r3, #3
 80070e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070e6:	e036      	b.n	8007156 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80070e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ea:	2bc7      	cmp	r3, #199	; 0xc7
 80070ec:	d802      	bhi.n	80070f4 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80070ee:	2305      	movs	r3, #5
 80070f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f2:	e030      	b.n	8007156 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80070f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070f6:	2b1f      	cmp	r3, #31
 80070f8:	d902      	bls.n	8007100 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80070fa:	230f      	movs	r3, #15
 80070fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070fe:	e02a      	b.n	8007156 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8007100:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007104:	429a      	cmp	r2, r3
 8007106:	d902      	bls.n	800710e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8007108:	2318      	movs	r3, #24
 800710a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800710c:	e023      	b.n	8007156 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800710e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007110:	2b01      	cmp	r3, #1
 8007112:	d902      	bls.n	800711a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8007114:	2310      	movs	r3, #16
 8007116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007118:	e01d      	b.n	8007156 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800711a:	4b1f      	ldr	r3, [pc, #124]	; (8007198 <_txe_thread_create+0x1d8>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007122:	4a1e      	ldr	r2, [pc, #120]	; (800719c <_txe_thread_create+0x1dc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d101      	bne.n	800712c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007128:	2313      	movs	r3, #19
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800712c:	f3ef 8305 	mrs	r3, IPSR
 8007130:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007132:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007134:	4b1a      	ldr	r3, [pc, #104]	; (80071a0 <_txe_thread_create+0x1e0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4313      	orrs	r3, r2
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800713e:	f3ef 8305 	mrs	r3, IPSR
 8007142:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8007144:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007146:	4b16      	ldr	r3, [pc, #88]	; (80071a0 <_txe_thread_create+0x1e0>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4313      	orrs	r3, r2
 800714c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007150:	d201      	bcs.n	8007156 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8007152:	2313      	movs	r3, #19
 8007154:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d112      	bne.n	8007182 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800715c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715e:	9305      	str	r3, [sp, #20]
 8007160:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800716a:	9302      	str	r3, [sp, #8]
 800716c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800716e:	9301      	str	r3, [sp, #4]
 8007170:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	68b9      	ldr	r1, [r7, #8]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f7fe fe72 	bl	8005e64 <_tx_thread_create>
 8007180:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8007182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007184:	4618      	mov	r0, r3
 8007186:	3750      	adds	r7, #80	; 0x50
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	24001148 	.word	0x24001148
 8007190:	24001138 	.word	0x24001138
 8007194:	24001140 	.word	0x24001140
 8007198:	2400114c 	.word	0x2400114c
 800719c:	240011f0 	.word	0x240011f0
 80071a0:	240001c8 	.word	0x240001c8

080071a4 <__libc_init_array>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	4d0d      	ldr	r5, [pc, #52]	; (80071dc <__libc_init_array+0x38>)
 80071a8:	4c0d      	ldr	r4, [pc, #52]	; (80071e0 <__libc_init_array+0x3c>)
 80071aa:	1b64      	subs	r4, r4, r5
 80071ac:	10a4      	asrs	r4, r4, #2
 80071ae:	2600      	movs	r6, #0
 80071b0:	42a6      	cmp	r6, r4
 80071b2:	d109      	bne.n	80071c8 <__libc_init_array+0x24>
 80071b4:	4d0b      	ldr	r5, [pc, #44]	; (80071e4 <__libc_init_array+0x40>)
 80071b6:	4c0c      	ldr	r4, [pc, #48]	; (80071e8 <__libc_init_array+0x44>)
 80071b8:	f000 f820 	bl	80071fc <_init>
 80071bc:	1b64      	subs	r4, r4, r5
 80071be:	10a4      	asrs	r4, r4, #2
 80071c0:	2600      	movs	r6, #0
 80071c2:	42a6      	cmp	r6, r4
 80071c4:	d105      	bne.n	80071d2 <__libc_init_array+0x2e>
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071cc:	4798      	blx	r3
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7ee      	b.n	80071b0 <__libc_init_array+0xc>
 80071d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d6:	4798      	blx	r3
 80071d8:	3601      	adds	r6, #1
 80071da:	e7f2      	b.n	80071c2 <__libc_init_array+0x1e>
 80071dc:	080072a0 	.word	0x080072a0
 80071e0:	080072a0 	.word	0x080072a0
 80071e4:	080072a0 	.word	0x080072a0
 80071e8:	080072a4 	.word	0x080072a4

080071ec <memset>:
 80071ec:	4402      	add	r2, r0
 80071ee:	4603      	mov	r3, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d100      	bne.n	80071f6 <memset+0xa>
 80071f4:	4770      	bx	lr
 80071f6:	f803 1b01 	strb.w	r1, [r3], #1
 80071fa:	e7f9      	b.n	80071f0 <memset+0x4>

080071fc <_init>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	bf00      	nop
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr

08007208 <_fini>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr
