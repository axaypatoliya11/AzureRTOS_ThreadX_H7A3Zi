
H7A3Zi_AzureRTOS_ThreadX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077e0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08007a90  08007a90  00017a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007b5c  08007b5c  00017b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000064  24000000  08007b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ae4  24000064  08007bc4  00020064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001b48  08007bc4  00021b48  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 10 .debug_info   00041991  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000074b1  00000000  00000000  00061a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001478  00000000  00000000  00068ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001148  00000000  00000000  0006a350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034790  00000000  00000000  0006b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000218f6  00000000  00000000  0009fc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00145bf0  00000000  00000000  000c151e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020710e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004a24  00000000  00000000  00207164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000064 	.word	0x24000064
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08007a78 	.word	0x08007a78

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000068 	.word	0x24000068
 80002ec:	08007a78 	.word	0x08007a78

080002f0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002f0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002f2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002f6:	4919      	ldr	r1, [pc, #100]	; (800035c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002f8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002fc:	4818      	ldr	r0, [pc, #96]	; (8000360 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002fe:	4917      	ldr	r1, [pc, #92]	; (800035c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000300:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000302:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000304:	4817      	ldr	r0, [pc, #92]	; (8000364 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000306:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000308:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800030c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800030e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000312:	4915      	ldr	r1, [pc, #84]	; (8000368 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000314:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000316:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800031a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800031c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000320:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000324:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000328:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800032c:	490f      	ldr	r1, [pc, #60]	; (800036c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800032e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000332:	4770      	bx	lr

08000334 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000334:	f7ff bffe 	b.w	8000334 <__tx_BadHandler>

08000338 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000338:	f7ff bffe 	b.w	8000338 <__tx_HardfaultHandler>

0800033c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800033c:	f7ff bffe 	b.w	800033c <__tx_SVCallHandler>

08000340 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000340:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000342:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000346:	4770      	bx	lr

08000348 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000348:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800034a:	f000 f891 	bl	8000470 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800034e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000352:	4770      	bx	lr

08000354 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000354:	f7ff bffe 	b.w	8000354 <__tx_NMIHandler>

08000358 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000358:	f7ff bffe 	b.w	8000358 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800035c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000360:	240015cc 	.word	0x240015cc
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000364:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000368:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800036c:	40ff0000 	.word	0x40ff0000

08000370 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000370:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000374:	4a2a      	ldr	r2, [pc, #168]	; (8000420 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000376:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000378:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800037c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000380:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000384:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000386:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800038a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800038e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000392:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000396:	f3bf 8f6f 	isb	sy

0800039a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800039a:	e7fe      	b.n	800039a <__tx_wait_here>

0800039c <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800039c:	4821      	ldr	r0, [pc, #132]	; (8000424 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800039e:	4a22      	ldr	r2, [pc, #136]	; (8000428 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80003a0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80003a4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80003a6:	b191      	cbz	r1, 80003ce <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80003a8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80003aa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80003ae:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003b2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003b6:	d101      	bne.n	80003bc <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003b8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003bc <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003bc:	4c1b      	ldr	r4, [pc, #108]	; (800042c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003be:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003c2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003c4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003c8:	b10d      	cbz	r5, 80003ce <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ca:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003cc:	6023      	str	r3, [r4, #0]

080003ce <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 80003ce:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003d0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003d2:	b1b1      	cbz	r1, 8000402 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003d4:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 80003d6:	b662      	cpsie	i

080003d8 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003d8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003da:	4c14      	ldr	r4, [pc, #80]	; (800042c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003dc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003de:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003e2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003e4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003e6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003ea:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003ee:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003f2:	d101      	bne.n	80003f8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003f4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003f8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003f8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003fc:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000400:	4770      	bx	lr

08000402 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000402:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000404:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000406:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000408:	b909      	cbnz	r1, 800040e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800040c:	e7f9      	b.n	8000402 <__tx_ts_wait>

0800040e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800040e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000412:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000416:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800041a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800041c:	e7dc      	b.n	80003d8 <__tx_ts_restore>

0800041e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800041e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000420:	240015d0 	.word	0x240015d0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000424:	240015d4 	.word	0x240015d4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000428:	240015d8 	.word	0x240015d8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800042c:	2400166c 	.word	0x2400166c

08000430 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000430:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000432:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000436:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800043a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800043e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000440:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000444:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000446:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000448:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800044a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800044c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800044e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000450:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000452:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000454:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000456:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000458:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800045a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800045c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000462:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000464:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000466:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800046a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800046c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800046e:	4770      	bx	lr

08000470 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000470:	4922      	ldr	r1, [pc, #136]	; (80004fc <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000472:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000474:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000478:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800047a:	4b21      	ldr	r3, [pc, #132]	; (8000500 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800047c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800047e:	b13a      	cbz	r2, 8000490 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000480:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000484:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000486:	b91a      	cbnz	r2, 8000490 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800048a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800048e:	6018      	str	r0, [r3, #0]

08000490 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000490:	491d      	ldr	r1, [pc, #116]	; (8000508 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000492:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000494:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000496:	b122      	cbz	r2, 80004a2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000498:	4b1c      	ldr	r3, [pc, #112]	; (800050c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800049a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800049e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80004a0:	e008      	b.n	80004b4 <__tx_timer_done>

080004a2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80004a2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80004a8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80004aa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80004ac:	d101      	bne.n	80004b2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004ae:	4b19      	ldr	r3, [pc, #100]	; (8000514 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004b0:	6818      	ldr	r0, [r3, #0]

080004b2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004b2:	6008      	str	r0, [r1, #0]

080004b4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004b6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004b8:	b912      	cbnz	r2, 80004c0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004ba:	4914      	ldr	r1, [pc, #80]	; (800050c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004bc:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004be:	b1d0      	cbz	r0, 80004f6 <__tx_timer_nothing_expired>

080004c0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004c0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004c4:	4911      	ldr	r1, [pc, #68]	; (800050c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004c6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004c8:	b108      	cbz	r0, 80004ce <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ca:	f006 fd77 	bl	8006fbc <_tx_timer_expiration_process>

080004ce <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004ce:	4b0d      	ldr	r3, [pc, #52]	; (8000504 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004d0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004d2:	b172      	cbz	r2, 80004f2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004d4:	f006 fce4 	bl	8006ea0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004d8:	480f      	ldr	r0, [pc, #60]	; (8000518 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004da:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004dc:	b949      	cbnz	r1, 80004f2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004de:	480f      	ldr	r0, [pc, #60]	; (800051c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004e0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004e2:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004e4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004e6:	480f      	ldr	r0, [pc, #60]	; (8000524 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004ec:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004ee:	d000      	beq.n	80004f2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004f0:	6002      	str	r2, [r0, #0]

080004f2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004f6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004f6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004fa:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004fc:	24001b44 	.word	0x24001b44
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000500:	2400166c 	.word	0x2400166c
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000504:	24001b40 	.word	0x24001b40
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000508:	240015e4 	.word	0x240015e4
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800050c:	24001668 	.word	0x24001668
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000510:	24001674 	.word	0x24001674
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000514:	2400172c 	.word	0x2400172c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000518:	240015d0 	.word	0x240015d0
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800051c:	240015d4 	.word	0x240015d4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000520:	240015d8 	.word	0x240015d8
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000524:	e000ed04 	.word	0xe000ed04

08000528 <strlen>:
 8000528:	4603      	mov	r3, r0
 800052a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800052e:	2a00      	cmp	r2, #0
 8000530:	d1fb      	bne.n	800052a <strlen+0x2>
 8000532:	1a18      	subs	r0, r3, r0
 8000534:	3801      	subs	r0, #1
 8000536:	4770      	bx	lr

08000538 <__aeabi_uldivmod>:
 8000538:	b953      	cbnz	r3, 8000550 <__aeabi_uldivmod+0x18>
 800053a:	b94a      	cbnz	r2, 8000550 <__aeabi_uldivmod+0x18>
 800053c:	2900      	cmp	r1, #0
 800053e:	bf08      	it	eq
 8000540:	2800      	cmpeq	r0, #0
 8000542:	bf1c      	itt	ne
 8000544:	f04f 31ff 	movne.w	r1, #4294967295
 8000548:	f04f 30ff 	movne.w	r0, #4294967295
 800054c:	f000 b96e 	b.w	800082c <__aeabi_idiv0>
 8000550:	f1ad 0c08 	sub.w	ip, sp, #8
 8000554:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000558:	f000 f806 	bl	8000568 <__udivmoddi4>
 800055c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000560:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000564:	b004      	add	sp, #16
 8000566:	4770      	bx	lr

08000568 <__udivmoddi4>:
 8000568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800056c:	9d08      	ldr	r5, [sp, #32]
 800056e:	4604      	mov	r4, r0
 8000570:	468c      	mov	ip, r1
 8000572:	2b00      	cmp	r3, #0
 8000574:	f040 8083 	bne.w	800067e <__udivmoddi4+0x116>
 8000578:	428a      	cmp	r2, r1
 800057a:	4617      	mov	r7, r2
 800057c:	d947      	bls.n	800060e <__udivmoddi4+0xa6>
 800057e:	fab2 f282 	clz	r2, r2
 8000582:	b142      	cbz	r2, 8000596 <__udivmoddi4+0x2e>
 8000584:	f1c2 0020 	rsb	r0, r2, #32
 8000588:	fa24 f000 	lsr.w	r0, r4, r0
 800058c:	4091      	lsls	r1, r2
 800058e:	4097      	lsls	r7, r2
 8000590:	ea40 0c01 	orr.w	ip, r0, r1
 8000594:	4094      	lsls	r4, r2
 8000596:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800059a:	0c23      	lsrs	r3, r4, #16
 800059c:	fbbc f6f8 	udiv	r6, ip, r8
 80005a0:	fa1f fe87 	uxth.w	lr, r7
 80005a4:	fb08 c116 	mls	r1, r8, r6, ip
 80005a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005ac:	fb06 f10e 	mul.w	r1, r6, lr
 80005b0:	4299      	cmp	r1, r3
 80005b2:	d909      	bls.n	80005c8 <__udivmoddi4+0x60>
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80005ba:	f080 8119 	bcs.w	80007f0 <__udivmoddi4+0x288>
 80005be:	4299      	cmp	r1, r3
 80005c0:	f240 8116 	bls.w	80007f0 <__udivmoddi4+0x288>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	443b      	add	r3, r7
 80005c8:	1a5b      	subs	r3, r3, r1
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d0:	fb08 3310 	mls	r3, r8, r0, r3
 80005d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	45a6      	cmp	lr, r4
 80005de:	d909      	bls.n	80005f4 <__udivmoddi4+0x8c>
 80005e0:	193c      	adds	r4, r7, r4
 80005e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80005e6:	f080 8105 	bcs.w	80007f4 <__udivmoddi4+0x28c>
 80005ea:	45a6      	cmp	lr, r4
 80005ec:	f240 8102 	bls.w	80007f4 <__udivmoddi4+0x28c>
 80005f0:	3802      	subs	r0, #2
 80005f2:	443c      	add	r4, r7
 80005f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005f8:	eba4 040e 	sub.w	r4, r4, lr
 80005fc:	2600      	movs	r6, #0
 80005fe:	b11d      	cbz	r5, 8000608 <__udivmoddi4+0xa0>
 8000600:	40d4      	lsrs	r4, r2
 8000602:	2300      	movs	r3, #0
 8000604:	e9c5 4300 	strd	r4, r3, [r5]
 8000608:	4631      	mov	r1, r6
 800060a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060e:	b902      	cbnz	r2, 8000612 <__udivmoddi4+0xaa>
 8000610:	deff      	udf	#255	; 0xff
 8000612:	fab2 f282 	clz	r2, r2
 8000616:	2a00      	cmp	r2, #0
 8000618:	d150      	bne.n	80006bc <__udivmoddi4+0x154>
 800061a:	1bcb      	subs	r3, r1, r7
 800061c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000620:	fa1f f887 	uxth.w	r8, r7
 8000624:	2601      	movs	r6, #1
 8000626:	fbb3 fcfe 	udiv	ip, r3, lr
 800062a:	0c21      	lsrs	r1, r4, #16
 800062c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000630:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000634:	fb08 f30c 	mul.w	r3, r8, ip
 8000638:	428b      	cmp	r3, r1
 800063a:	d907      	bls.n	800064c <__udivmoddi4+0xe4>
 800063c:	1879      	adds	r1, r7, r1
 800063e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000642:	d202      	bcs.n	800064a <__udivmoddi4+0xe2>
 8000644:	428b      	cmp	r3, r1
 8000646:	f200 80e9 	bhi.w	800081c <__udivmoddi4+0x2b4>
 800064a:	4684      	mov	ip, r0
 800064c:	1ac9      	subs	r1, r1, r3
 800064e:	b2a3      	uxth	r3, r4
 8000650:	fbb1 f0fe 	udiv	r0, r1, lr
 8000654:	fb0e 1110 	mls	r1, lr, r0, r1
 8000658:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800065c:	fb08 f800 	mul.w	r8, r8, r0
 8000660:	45a0      	cmp	r8, r4
 8000662:	d907      	bls.n	8000674 <__udivmoddi4+0x10c>
 8000664:	193c      	adds	r4, r7, r4
 8000666:	f100 33ff 	add.w	r3, r0, #4294967295
 800066a:	d202      	bcs.n	8000672 <__udivmoddi4+0x10a>
 800066c:	45a0      	cmp	r8, r4
 800066e:	f200 80d9 	bhi.w	8000824 <__udivmoddi4+0x2bc>
 8000672:	4618      	mov	r0, r3
 8000674:	eba4 0408 	sub.w	r4, r4, r8
 8000678:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800067c:	e7bf      	b.n	80005fe <__udivmoddi4+0x96>
 800067e:	428b      	cmp	r3, r1
 8000680:	d909      	bls.n	8000696 <__udivmoddi4+0x12e>
 8000682:	2d00      	cmp	r5, #0
 8000684:	f000 80b1 	beq.w	80007ea <__udivmoddi4+0x282>
 8000688:	2600      	movs	r6, #0
 800068a:	e9c5 0100 	strd	r0, r1, [r5]
 800068e:	4630      	mov	r0, r6
 8000690:	4631      	mov	r1, r6
 8000692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000696:	fab3 f683 	clz	r6, r3
 800069a:	2e00      	cmp	r6, #0
 800069c:	d14a      	bne.n	8000734 <__udivmoddi4+0x1cc>
 800069e:	428b      	cmp	r3, r1
 80006a0:	d302      	bcc.n	80006a8 <__udivmoddi4+0x140>
 80006a2:	4282      	cmp	r2, r0
 80006a4:	f200 80b8 	bhi.w	8000818 <__udivmoddi4+0x2b0>
 80006a8:	1a84      	subs	r4, r0, r2
 80006aa:	eb61 0103 	sbc.w	r1, r1, r3
 80006ae:	2001      	movs	r0, #1
 80006b0:	468c      	mov	ip, r1
 80006b2:	2d00      	cmp	r5, #0
 80006b4:	d0a8      	beq.n	8000608 <__udivmoddi4+0xa0>
 80006b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80006ba:	e7a5      	b.n	8000608 <__udivmoddi4+0xa0>
 80006bc:	f1c2 0320 	rsb	r3, r2, #32
 80006c0:	fa20 f603 	lsr.w	r6, r0, r3
 80006c4:	4097      	lsls	r7, r2
 80006c6:	fa01 f002 	lsl.w	r0, r1, r2
 80006ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006ce:	40d9      	lsrs	r1, r3
 80006d0:	4330      	orrs	r0, r6
 80006d2:	0c03      	lsrs	r3, r0, #16
 80006d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80006d8:	fa1f f887 	uxth.w	r8, r7
 80006dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80006e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006e4:	fb06 f108 	mul.w	r1, r6, r8
 80006e8:	4299      	cmp	r1, r3
 80006ea:	fa04 f402 	lsl.w	r4, r4, r2
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x19c>
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80006f6:	f080 808d 	bcs.w	8000814 <__udivmoddi4+0x2ac>
 80006fa:	4299      	cmp	r1, r3
 80006fc:	f240 808a 	bls.w	8000814 <__udivmoddi4+0x2ac>
 8000700:	3e02      	subs	r6, #2
 8000702:	443b      	add	r3, r7
 8000704:	1a5b      	subs	r3, r3, r1
 8000706:	b281      	uxth	r1, r0
 8000708:	fbb3 f0fe 	udiv	r0, r3, lr
 800070c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000710:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000714:	fb00 f308 	mul.w	r3, r0, r8
 8000718:	428b      	cmp	r3, r1
 800071a:	d907      	bls.n	800072c <__udivmoddi4+0x1c4>
 800071c:	1879      	adds	r1, r7, r1
 800071e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000722:	d273      	bcs.n	800080c <__udivmoddi4+0x2a4>
 8000724:	428b      	cmp	r3, r1
 8000726:	d971      	bls.n	800080c <__udivmoddi4+0x2a4>
 8000728:	3802      	subs	r0, #2
 800072a:	4439      	add	r1, r7
 800072c:	1acb      	subs	r3, r1, r3
 800072e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000732:	e778      	b.n	8000626 <__udivmoddi4+0xbe>
 8000734:	f1c6 0c20 	rsb	ip, r6, #32
 8000738:	fa03 f406 	lsl.w	r4, r3, r6
 800073c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000740:	431c      	orrs	r4, r3
 8000742:	fa20 f70c 	lsr.w	r7, r0, ip
 8000746:	fa01 f306 	lsl.w	r3, r1, r6
 800074a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800074e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000752:	431f      	orrs	r7, r3
 8000754:	0c3b      	lsrs	r3, r7, #16
 8000756:	fbb1 f9fe 	udiv	r9, r1, lr
 800075a:	fa1f f884 	uxth.w	r8, r4
 800075e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000762:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000766:	fb09 fa08 	mul.w	sl, r9, r8
 800076a:	458a      	cmp	sl, r1
 800076c:	fa02 f206 	lsl.w	r2, r2, r6
 8000770:	fa00 f306 	lsl.w	r3, r0, r6
 8000774:	d908      	bls.n	8000788 <__udivmoddi4+0x220>
 8000776:	1861      	adds	r1, r4, r1
 8000778:	f109 30ff 	add.w	r0, r9, #4294967295
 800077c:	d248      	bcs.n	8000810 <__udivmoddi4+0x2a8>
 800077e:	458a      	cmp	sl, r1
 8000780:	d946      	bls.n	8000810 <__udivmoddi4+0x2a8>
 8000782:	f1a9 0902 	sub.w	r9, r9, #2
 8000786:	4421      	add	r1, r4
 8000788:	eba1 010a 	sub.w	r1, r1, sl
 800078c:	b2bf      	uxth	r7, r7
 800078e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000792:	fb0e 1110 	mls	r1, lr, r0, r1
 8000796:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800079a:	fb00 f808 	mul.w	r8, r0, r8
 800079e:	45b8      	cmp	r8, r7
 80007a0:	d907      	bls.n	80007b2 <__udivmoddi4+0x24a>
 80007a2:	19e7      	adds	r7, r4, r7
 80007a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80007a8:	d22e      	bcs.n	8000808 <__udivmoddi4+0x2a0>
 80007aa:	45b8      	cmp	r8, r7
 80007ac:	d92c      	bls.n	8000808 <__udivmoddi4+0x2a0>
 80007ae:	3802      	subs	r0, #2
 80007b0:	4427      	add	r7, r4
 80007b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007b6:	eba7 0708 	sub.w	r7, r7, r8
 80007ba:	fba0 8902 	umull	r8, r9, r0, r2
 80007be:	454f      	cmp	r7, r9
 80007c0:	46c6      	mov	lr, r8
 80007c2:	4649      	mov	r1, r9
 80007c4:	d31a      	bcc.n	80007fc <__udivmoddi4+0x294>
 80007c6:	d017      	beq.n	80007f8 <__udivmoddi4+0x290>
 80007c8:	b15d      	cbz	r5, 80007e2 <__udivmoddi4+0x27a>
 80007ca:	ebb3 020e 	subs.w	r2, r3, lr
 80007ce:	eb67 0701 	sbc.w	r7, r7, r1
 80007d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80007d6:	40f2      	lsrs	r2, r6
 80007d8:	ea4c 0202 	orr.w	r2, ip, r2
 80007dc:	40f7      	lsrs	r7, r6
 80007de:	e9c5 2700 	strd	r2, r7, [r5]
 80007e2:	2600      	movs	r6, #0
 80007e4:	4631      	mov	r1, r6
 80007e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ea:	462e      	mov	r6, r5
 80007ec:	4628      	mov	r0, r5
 80007ee:	e70b      	b.n	8000608 <__udivmoddi4+0xa0>
 80007f0:	4606      	mov	r6, r0
 80007f2:	e6e9      	b.n	80005c8 <__udivmoddi4+0x60>
 80007f4:	4618      	mov	r0, r3
 80007f6:	e6fd      	b.n	80005f4 <__udivmoddi4+0x8c>
 80007f8:	4543      	cmp	r3, r8
 80007fa:	d2e5      	bcs.n	80007c8 <__udivmoddi4+0x260>
 80007fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000800:	eb69 0104 	sbc.w	r1, r9, r4
 8000804:	3801      	subs	r0, #1
 8000806:	e7df      	b.n	80007c8 <__udivmoddi4+0x260>
 8000808:	4608      	mov	r0, r1
 800080a:	e7d2      	b.n	80007b2 <__udivmoddi4+0x24a>
 800080c:	4660      	mov	r0, ip
 800080e:	e78d      	b.n	800072c <__udivmoddi4+0x1c4>
 8000810:	4681      	mov	r9, r0
 8000812:	e7b9      	b.n	8000788 <__udivmoddi4+0x220>
 8000814:	4666      	mov	r6, ip
 8000816:	e775      	b.n	8000704 <__udivmoddi4+0x19c>
 8000818:	4630      	mov	r0, r6
 800081a:	e74a      	b.n	80006b2 <__udivmoddi4+0x14a>
 800081c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000820:	4439      	add	r1, r7
 8000822:	e713      	b.n	800064c <__udivmoddi4+0xe4>
 8000824:	3802      	subs	r0, #2
 8000826:	443c      	add	r4, r7
 8000828:	e724      	b.n	8000674 <__udivmoddi4+0x10c>
 800082a:	bf00      	nop

0800082c <__aeabi_idiv0>:
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af02      	add	r7, sp, #8
 8000836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800083c:	2334      	movs	r3, #52	; 0x34
 800083e:	9300      	str	r3, [sp, #0]
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <tx_application_define+0x40>)
 8000846:	490b      	ldr	r1, [pc, #44]	; (8000874 <tx_application_define+0x44>)
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <tx_application_define+0x48>)
 800084a:	f006 fe61 	bl	8007510 <_txe_byte_pool_create>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d109      	bne.n	8000868 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <tx_application_define+0x48>)
 8000856:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8000858:	68b8      	ldr	r0, [r7, #8]
 800085a:	f000 f80f 	bl	800087c <App_ThreadX_Init>
 800085e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d000      	beq.n	8000868 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8000866:	e7fe      	b.n	8000866 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	24000080 	.word	0x24000080
 8000874:	08007a90 	.word	0x08007a90
 8000878:	24001080 	.word	0x24001080

0800087c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08e      	sub	sp, #56	; 0x38
 8000880:	af08      	add	r7, sp, #32
 8000882:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN App_ThreadX_Init */
  CHAR *pointer;

  /* <!-- create a semaphore --> */
    if(tx_semaphore_create(&semaphore_1, "semaphore-1", 0) != TX_SUCCESS){
 800088c:	231c      	movs	r3, #28
 800088e:	2200      	movs	r2, #0
 8000890:	4965      	ldr	r1, [pc, #404]	; (8000a28 <App_ThreadX_Init+0x1ac>)
 8000892:	4866      	ldr	r0, [pc, #408]	; (8000a2c <App_ThreadX_Init+0x1b0>)
 8000894:	f006 fedc 	bl	8007650 <_txe_semaphore_create>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <App_ThreadX_Init+0x26>
  	  ret = TX_POOL_ERROR;
 800089e:	2302      	movs	r3, #2
 80008a0:	617b      	str	r3, [r7, #20]
    }
    if(tx_semaphore_create(&semaphore_2, "semaphore-2", 0) != TX_SUCCESS){
 80008a2:	231c      	movs	r3, #28
 80008a4:	2200      	movs	r2, #0
 80008a6:	4962      	ldr	r1, [pc, #392]	; (8000a30 <App_ThreadX_Init+0x1b4>)
 80008a8:	4862      	ldr	r0, [pc, #392]	; (8000a34 <App_ThreadX_Init+0x1b8>)
 80008aa:	f006 fed1 	bl	8007650 <_txe_semaphore_create>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <App_ThreadX_Init+0x3c>
	  ret = TX_POOL_ERROR;
 80008b4:	2302      	movs	r3, #2
 80008b6:	617b      	str	r3, [r7, #20]
	}
    if(tx_semaphore_create(&semaphore_3, "semaphore-3", 0) != TX_SUCCESS){
 80008b8:	231c      	movs	r3, #28
 80008ba:	2200      	movs	r2, #0
 80008bc:	495e      	ldr	r1, [pc, #376]	; (8000a38 <App_ThreadX_Init+0x1bc>)
 80008be:	485f      	ldr	r0, [pc, #380]	; (8000a3c <App_ThreadX_Init+0x1c0>)
 80008c0:	f006 fec6 	bl	8007650 <_txe_semaphore_create>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <App_ThreadX_Init+0x52>
	  ret = TX_POOL_ERROR;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
	}
    if(tx_semaphore_create(&semaphore_4, "semaphore-4", 0) != TX_SUCCESS){
 80008ce:	231c      	movs	r3, #28
 80008d0:	2200      	movs	r2, #0
 80008d2:	495b      	ldr	r1, [pc, #364]	; (8000a40 <App_ThreadX_Init+0x1c4>)
 80008d4:	485b      	ldr	r0, [pc, #364]	; (8000a44 <App_ThreadX_Init+0x1c8>)
 80008d6:	f006 febb 	bl	8007650 <_txe_semaphore_create>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <App_ThreadX_Init+0x68>
	  ret = TX_POOL_ERROR;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
	}

    /* <!-- allocate memory to thread-1 from memory pool -->
    NOTE: byte_pool is already created above. We just have to change the value of TX_APP_MEM_POOL_SIZE in the App/app_azure_rtos_config.h file */
    if(tx_byte_allocate(byte_pool, (void **)&pointer, THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 80008e4:	f107 010c 	add.w	r1, r7, #12
 80008e8:	2300      	movs	r3, #0
 80008ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ee:	6938      	ldr	r0, [r7, #16]
 80008f0:	f006 fd9a 	bl	8007428 <_txe_byte_allocate>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <App_ThreadX_Init+0x82>
  	  ret = TX_POOL_ERROR;
 80008fa:	2302      	movs	r3, #2
 80008fc:	617b      	str	r3, [r7, #20]
    }
    if(tx_thread_create(&thread_ptr1, "thread-1", (void*)thread1_entry_func, 0x0000, pointer, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START) != TX_SUCCESS){
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	22b0      	movs	r2, #176	; 0xb0
 8000902:	9206      	str	r2, [sp, #24]
 8000904:	2201      	movs	r2, #1
 8000906:	9205      	str	r2, [sp, #20]
 8000908:	2201      	movs	r2, #1
 800090a:	9204      	str	r2, [sp, #16]
 800090c:	220f      	movs	r2, #15
 800090e:	9203      	str	r2, [sp, #12]
 8000910:	220f      	movs	r2, #15
 8000912:	9202      	str	r2, [sp, #8]
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	9201      	str	r2, [sp, #4]
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	4a4a      	ldr	r2, [pc, #296]	; (8000a48 <App_ThreadX_Init+0x1cc>)
 8000920:	494a      	ldr	r1, [pc, #296]	; (8000a4c <App_ThreadX_Init+0x1d0>)
 8000922:	484b      	ldr	r0, [pc, #300]	; (8000a50 <App_ThreadX_Init+0x1d4>)
 8000924:	f006 ff8a 	bl	800783c <_txe_thread_create>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <App_ThreadX_Init+0xb6>
  	  ret = TX_POOL_ERROR;
 800092e:	2302      	movs	r3, #2
 8000930:	617b      	str	r3, [r7, #20]
    }

    /* <!-- allocate memory to thread-2 from memory pool --> */
    if(tx_byte_allocate(byte_pool, (void **)&pointer, THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8000932:	f107 010c 	add.w	r1, r7, #12
 8000936:	2300      	movs	r3, #0
 8000938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093c:	6938      	ldr	r0, [r7, #16]
 800093e:	f006 fd73 	bl	8007428 <_txe_byte_allocate>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <App_ThreadX_Init+0xd0>
  	  ret = TX_POOL_ERROR;
 8000948:	2302      	movs	r3, #2
 800094a:	617b      	str	r3, [r7, #20]
    }
    if(tx_thread_create(&thread_ptr2, "thread-2", (void*)thread2_entry_func, 0x0000, pointer, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START) != TX_SUCCESS){
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	22b0      	movs	r2, #176	; 0xb0
 8000950:	9206      	str	r2, [sp, #24]
 8000952:	2201      	movs	r2, #1
 8000954:	9205      	str	r2, [sp, #20]
 8000956:	2201      	movs	r2, #1
 8000958:	9204      	str	r2, [sp, #16]
 800095a:	220f      	movs	r2, #15
 800095c:	9203      	str	r2, [sp, #12]
 800095e:	220f      	movs	r2, #15
 8000960:	9202      	str	r2, [sp, #8]
 8000962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000966:	9201      	str	r2, [sp, #4]
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	2300      	movs	r3, #0
 800096c:	4a39      	ldr	r2, [pc, #228]	; (8000a54 <App_ThreadX_Init+0x1d8>)
 800096e:	493a      	ldr	r1, [pc, #232]	; (8000a58 <App_ThreadX_Init+0x1dc>)
 8000970:	483a      	ldr	r0, [pc, #232]	; (8000a5c <App_ThreadX_Init+0x1e0>)
 8000972:	f006 ff63 	bl	800783c <_txe_thread_create>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <App_ThreadX_Init+0x104>
  	  ret = TX_POOL_ERROR;
 800097c:	2302      	movs	r3, #2
 800097e:	617b      	str	r3, [r7, #20]
    }

    /* <!-- allocate memory to thread-3 from memory pool --> */
	if(tx_byte_allocate(byte_pool, (void **)&pointer, THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 8000980:	f107 010c 	add.w	r1, r7, #12
 8000984:	2300      	movs	r3, #0
 8000986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098a:	6938      	ldr	r0, [r7, #16]
 800098c:	f006 fd4c 	bl	8007428 <_txe_byte_allocate>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <App_ThreadX_Init+0x11e>
	  ret = TX_POOL_ERROR;
 8000996:	2302      	movs	r3, #2
 8000998:	617b      	str	r3, [r7, #20]
	}
	if(tx_thread_create(&thread_ptr3, "thread-3", (void*)thread3_entry_func, 0x0000, pointer, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START) != TX_SUCCESS){
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	22b0      	movs	r2, #176	; 0xb0
 800099e:	9206      	str	r2, [sp, #24]
 80009a0:	2201      	movs	r2, #1
 80009a2:	9205      	str	r2, [sp, #20]
 80009a4:	2201      	movs	r2, #1
 80009a6:	9204      	str	r2, [sp, #16]
 80009a8:	220f      	movs	r2, #15
 80009aa:	9203      	str	r2, [sp, #12]
 80009ac:	220f      	movs	r2, #15
 80009ae:	9202      	str	r2, [sp, #8]
 80009b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b4:	9201      	str	r2, [sp, #4]
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	4a29      	ldr	r2, [pc, #164]	; (8000a60 <App_ThreadX_Init+0x1e4>)
 80009bc:	4929      	ldr	r1, [pc, #164]	; (8000a64 <App_ThreadX_Init+0x1e8>)
 80009be:	482a      	ldr	r0, [pc, #168]	; (8000a68 <App_ThreadX_Init+0x1ec>)
 80009c0:	f006 ff3c 	bl	800783c <_txe_thread_create>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <App_ThreadX_Init+0x152>
	  ret = TX_POOL_ERROR;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
	}

	/* <!-- allocate memory to thread-4 from memory pool --> */
	if(tx_byte_allocate(byte_pool, (void **)&pointer, THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 80009ce:	f107 010c 	add.w	r1, r7, #12
 80009d2:	2300      	movs	r3, #0
 80009d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d8:	6938      	ldr	r0, [r7, #16]
 80009da:	f006 fd25 	bl	8007428 <_txe_byte_allocate>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <App_ThreadX_Init+0x16c>
	  ret = TX_POOL_ERROR;
 80009e4:	2302      	movs	r3, #2
 80009e6:	617b      	str	r3, [r7, #20]
	}
	if(tx_thread_create(&thread_ptr4, "thread-4", (void*)thread4_entry_func, 0x0000, pointer, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START) != TX_SUCCESS){
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	22b0      	movs	r2, #176	; 0xb0
 80009ec:	9206      	str	r2, [sp, #24]
 80009ee:	2201      	movs	r2, #1
 80009f0:	9205      	str	r2, [sp, #20]
 80009f2:	2201      	movs	r2, #1
 80009f4:	9204      	str	r2, [sp, #16]
 80009f6:	220f      	movs	r2, #15
 80009f8:	9203      	str	r2, [sp, #12]
 80009fa:	220f      	movs	r2, #15
 80009fc:	9202      	str	r2, [sp, #8]
 80009fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a02:	9201      	str	r2, [sp, #4]
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <App_ThreadX_Init+0x1f0>)
 8000a0a:	4919      	ldr	r1, [pc, #100]	; (8000a70 <App_ThreadX_Init+0x1f4>)
 8000a0c:	4819      	ldr	r0, [pc, #100]	; (8000a74 <App_ThreadX_Init+0x1f8>)
 8000a0e:	f006 ff15 	bl	800783c <_txe_thread_create>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <App_ThreadX_Init+0x1a0>
	  ret = TX_POOL_ERROR;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
	}
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000a1c:	697b      	ldr	r3, [r7, #20]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3718      	adds	r7, #24
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	08007aa4 	.word	0x08007aa4
 8000a2c:	240010dc 	.word	0x240010dc
 8000a30:	08007ab0 	.word	0x08007ab0
 8000a34:	24001238 	.word	0x24001238
 8000a38:	08007abc 	.word	0x08007abc
 8000a3c:	24001328 	.word	0x24001328
 8000a40:	08007ac8 	.word	0x08007ac8
 8000a44:	240010b4 	.word	0x240010b4
 8000a48:	08000a85 	.word	0x08000a85
 8000a4c:	08007ad4 	.word	0x08007ad4
 8000a50:	240013fc 	.word	0x240013fc
 8000a54:	08000b09 	.word	0x08000b09
 8000a58:	08007ae0 	.word	0x08007ae0
 8000a5c:	24001264 	.word	0x24001264
 8000a60:	08000b7d 	.word	0x08000b7d
 8000a64:	08007aec 	.word	0x08007aec
 8000a68:	24001188 	.word	0x24001188
 8000a6c:	08000bf1 	.word	0x08000bf1
 8000a70:	08007af8 	.word	0x08007af8
 8000a74:	2400134c 	.word	0x2400134c

08000a78 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000a7c:	f005 fb5a 	bl	8006134 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <thread1_entry_func>:

/* USER CODE BEGIN 1 */
void thread1_entry_func(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	while(1){
		status = tx_semaphore_put(&semaphore_1);
 8000a88:	4818      	ldr	r0, [pc, #96]	; (8000aec <thread1_entry_func+0x68>)
 8000a8a:	f006 feb9 	bl	8007800 <_txe_semaphore_put>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <thread1_entry_func+0x6c>)
 8000a94:	601a      	str	r2, [r3, #0]
		status = tx_semaphore_get(&semaphore_1, TX_WAIT_FOREVER);
 8000a96:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <thread1_entry_func+0x68>)
 8000a9c:	f006 fe6e 	bl	800777c <_txe_semaphore_get>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <thread1_entry_func+0x6c>)
 8000aa6:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)message1, strlen(message1), 100);
 8000aa8:	4812      	ldr	r0, [pc, #72]	; (8000af4 <thread1_entry_func+0x70>)
 8000aaa:	f7ff fd3d 	bl	8000528 <strlen>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	2364      	movs	r3, #100	; 0x64
 8000ab4:	490f      	ldr	r1, [pc, #60]	; (8000af4 <thread1_entry_func+0x70>)
 8000ab6:	4810      	ldr	r0, [pc, #64]	; (8000af8 <thread1_entry_func+0x74>)
 8000ab8:	f003 fe66 	bl	8004788 <HAL_UART_Transmit>
		tx_thread_sleep(50); //delay of 500 ms
 8000abc:	2032      	movs	r0, #50	; 0x32
 8000abe:	f005 fe91 	bl	80067e4 <_tx_thread_sleep>

#ifdef __PATTERN_1_3_2_4__
		status = tx_semaphore_put(&semaphore_3);
#else
		if(pattern_flag == 1){
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <thread1_entry_func+0x78>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d107      	bne.n	8000ada <thread1_entry_func+0x56>
			status = tx_semaphore_put(&semaphore_4);
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <thread1_entry_func+0x7c>)
 8000acc:	f006 fe98 	bl	8007800 <_txe_semaphore_put>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <thread1_entry_func+0x6c>)
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e7d6      	b.n	8000a88 <thread1_entry_func+0x4>
		}
		else{
			status = tx_semaphore_put(&semaphore_2);
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <thread1_entry_func+0x80>)
 8000adc:	f006 fe90 	bl	8007800 <_txe_semaphore_put>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <thread1_entry_func+0x6c>)
 8000ae6:	601a      	str	r2, [r3, #0]
		status = tx_semaphore_put(&semaphore_1);
 8000ae8:	e7ce      	b.n	8000a88 <thread1_entry_func+0x4>
 8000aea:	bf00      	nop
 8000aec:	240010dc 	.word	0x240010dc
 8000af0:	240014ac 	.word	0x240014ac
 8000af4:	24000000 	.word	0x24000000
 8000af8:	240010f8 	.word	0x240010f8
 8000afc:	240014b0 	.word	0x240014b0
 8000b00:	240010b4 	.word	0x240010b4
 8000b04:	24001238 	.word	0x24001238

08000b08 <thread2_entry_func>:
#endif

	}
}

void thread2_entry_func(void){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	status = tx_semaphore_get(&semaphore_2, TX_WAIT_FOREVER);
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	4813      	ldr	r0, [pc, #76]	; (8000b60 <thread2_entry_func+0x58>)
 8000b12:	f006 fe33 	bl	800777c <_txe_semaphore_get>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <thread2_entry_func+0x5c>)
 8000b1c:	601a      	str	r2, [r3, #0]
	while(1){
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000b1e:	4812      	ldr	r0, [pc, #72]	; (8000b68 <thread2_entry_func+0x60>)
 8000b20:	f7ff fd02 	bl	8000528 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	490f      	ldr	r1, [pc, #60]	; (8000b68 <thread2_entry_func+0x60>)
 8000b2c:	480f      	ldr	r0, [pc, #60]	; (8000b6c <thread2_entry_func+0x64>)
 8000b2e:	f003 fe2b 	bl	8004788 <HAL_UART_Transmit>
		tx_thread_sleep(50); //delay of 500 ms
 8000b32:	2032      	movs	r0, #50	; 0x32
 8000b34:	f005 fe56 	bl	80067e4 <_tx_thread_sleep>

#ifdef __PATTERN_1_3_2_4__
		status = tx_semaphore_put(&semaphore_4);
#else
		if(pattern_flag == 1){
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <thread2_entry_func+0x68>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d107      	bne.n	8000b50 <thread2_entry_func+0x48>
			status = tx_semaphore_put(&semaphore_1);
 8000b40:	480c      	ldr	r0, [pc, #48]	; (8000b74 <thread2_entry_func+0x6c>)
 8000b42:	f006 fe5d 	bl	8007800 <_txe_semaphore_put>
 8000b46:	4603      	mov	r3, r0
 8000b48:	461a      	mov	r2, r3
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <thread2_entry_func+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e7e6      	b.n	8000b1e <thread2_entry_func+0x16>
		}
		else{
			status = tx_semaphore_put(&semaphore_3);
 8000b50:	4809      	ldr	r0, [pc, #36]	; (8000b78 <thread2_entry_func+0x70>)
 8000b52:	f006 fe55 	bl	8007800 <_txe_semaphore_put>
 8000b56:	4603      	mov	r3, r0
 8000b58:	461a      	mov	r2, r3
 8000b5a:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <thread2_entry_func+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)message2, strlen(message2), 100);
 8000b5e:	e7de      	b.n	8000b1e <thread2_entry_func+0x16>
 8000b60:	24001238 	.word	0x24001238
 8000b64:	240014ac 	.word	0x240014ac
 8000b68:	24000014 	.word	0x24000014
 8000b6c:	240010f8 	.word	0x240010f8
 8000b70:	240014b0 	.word	0x240014b0
 8000b74:	240010dc 	.word	0x240010dc
 8000b78:	24001328 	.word	0x24001328

08000b7c <thread3_entry_func>:
#endif

	}
}

void thread3_entry_func(void){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	while(1){
		status = tx_semaphore_get(&semaphore_3, TX_WAIT_FOREVER);
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <thread3_entry_func+0x58>)
 8000b86:	f006 fdf9 	bl	800777c <_txe_semaphore_get>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <thread3_entry_func+0x5c>)
 8000b90:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)message3, strlen(message3), 100);
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <thread3_entry_func+0x60>)
 8000b94:	f7ff fcc8 	bl	8000528 <strlen>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	490f      	ldr	r1, [pc, #60]	; (8000bdc <thread3_entry_func+0x60>)
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <thread3_entry_func+0x64>)
 8000ba2:	f003 fdf1 	bl	8004788 <HAL_UART_Transmit>
		tx_thread_sleep(50); //delay of 500 ms
 8000ba6:	2032      	movs	r0, #50	; 0x32
 8000ba8:	f005 fe1c 	bl	80067e4 <_tx_thread_sleep>

#ifdef __PATTERN_1_3_2_4__
		status = tx_semaphore_put(&semaphore_2);
#else
		if(pattern_flag == 1){
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <thread3_entry_func+0x68>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d107      	bne.n	8000bc4 <thread3_entry_func+0x48>
			status = tx_semaphore_put(&semaphore_2);
 8000bb4:	480c      	ldr	r0, [pc, #48]	; (8000be8 <thread3_entry_func+0x6c>)
 8000bb6:	f006 fe23 	bl	8007800 <_txe_semaphore_put>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <thread3_entry_func+0x5c>)
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e7dd      	b.n	8000b80 <thread3_entry_func+0x4>
		}
		else{
			status = tx_semaphore_put(&semaphore_4);
 8000bc4:	4809      	ldr	r0, [pc, #36]	; (8000bec <thread3_entry_func+0x70>)
 8000bc6:	f006 fe1b 	bl	8007800 <_txe_semaphore_put>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <thread3_entry_func+0x5c>)
 8000bd0:	601a      	str	r2, [r3, #0]
		status = tx_semaphore_get(&semaphore_3, TX_WAIT_FOREVER);
 8000bd2:	e7d5      	b.n	8000b80 <thread3_entry_func+0x4>
 8000bd4:	24001328 	.word	0x24001328
 8000bd8:	240014ac 	.word	0x240014ac
 8000bdc:	24000028 	.word	0x24000028
 8000be0:	240010f8 	.word	0x240010f8
 8000be4:	240014b0 	.word	0x240014b0
 8000be8:	24001238 	.word	0x24001238
 8000bec:	240010b4 	.word	0x240010b4

08000bf0 <thread4_entry_func>:
#endif

	}
}

void thread4_entry_func(void){
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	while(1){
		/* get the suspended semaphore */
		status = tx_semaphore_get(&semaphore_4, TX_WAIT_FOREVER);
 8000bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf8:	4813      	ldr	r0, [pc, #76]	; (8000c48 <thread4_entry_func+0x58>)
 8000bfa:	f006 fdbf 	bl	800777c <_txe_semaphore_get>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <thread4_entry_func+0x5c>)
 8000c04:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)message4, strlen(message4), 100);
 8000c06:	4812      	ldr	r0, [pc, #72]	; (8000c50 <thread4_entry_func+0x60>)
 8000c08:	f7ff fc8e 	bl	8000528 <strlen>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	2364      	movs	r3, #100	; 0x64
 8000c12:	490f      	ldr	r1, [pc, #60]	; (8000c50 <thread4_entry_func+0x60>)
 8000c14:	480f      	ldr	r0, [pc, #60]	; (8000c54 <thread4_entry_func+0x64>)
 8000c16:	f003 fdb7 	bl	8004788 <HAL_UART_Transmit>
		tx_thread_sleep(50); //delay of 500 ms
 8000c1a:	2032      	movs	r0, #50	; 0x32
 8000c1c:	f005 fde2 	bl	80067e4 <_tx_thread_sleep>

#ifdef __PATTERN_1_3_2_4__
//		status = tx_semaphore_put(&semaphore);
#else
		if(pattern_flag == 1){
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <thread4_entry_func+0x68>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d107      	bne.n	8000c38 <thread4_entry_func+0x48>
			status = tx_semaphore_put(&semaphore_3);
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <thread4_entry_func+0x6c>)
 8000c2a:	f006 fde9 	bl	8007800 <_txe_semaphore_put>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	461a      	mov	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <thread4_entry_func+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	e7dd      	b.n	8000bf4 <thread4_entry_func+0x4>
		}
		else{
			status = tx_semaphore_put(&semaphore_1);
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <thread4_entry_func+0x70>)
 8000c3a:	f006 fde1 	bl	8007800 <_txe_semaphore_put>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <thread4_entry_func+0x5c>)
 8000c44:	601a      	str	r2, [r3, #0]
		status = tx_semaphore_get(&semaphore_4, TX_WAIT_FOREVER);
 8000c46:	e7d5      	b.n	8000bf4 <thread4_entry_func+0x4>
 8000c48:	240010b4 	.word	0x240010b4
 8000c4c:	240014ac 	.word	0x240014ac
 8000c50:	2400003c 	.word	0x2400003c
 8000c54:	240010f8 	.word	0x240010f8
 8000c58:	240014b0 	.word	0x240014b0
 8000c5c:	24001328 	.word	0x24001328
 8000c60:	240010dc 	.word	0x240010dc

08000c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c68:	f000 fbd0 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c6c:	f000 f808 	bl	8000c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c70:	f000 f8c6 	bl	8000e00 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c74:	f000 f878 	bl	8000d68 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000c78:	f7ff fefe 	bl	8000a78 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <main+0x18>
	...

08000c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09c      	sub	sp, #112	; 0x70
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8a:	224c      	movs	r2, #76	; 0x4c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f006 feea 	bl	8007a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2220      	movs	r2, #32
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f006 fee4 	bl	8007a68 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <SystemClock_Config+0xe0>)
 8000ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000caa:	2004      	movs	r0, #4
 8000cac:	f000 fee8 	bl	8001a80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	4b2b      	ldr	r3, [pc, #172]	; (8000d64 <SystemClock_Config+0xe4>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a2a      	ldr	r2, [pc, #168]	; (8000d64 <SystemClock_Config+0xe4>)
 8000cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b28      	ldr	r3, [pc, #160]	; (8000d64 <SystemClock_Config+0xe4>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ccc:	bf00      	nop
 8000cce:	4b25      	ldr	r3, [pc, #148]	; (8000d64 <SystemClock_Config+0xe4>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cda:	d1f8      	bne.n	8000cce <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce4:	2340      	movs	r3, #64	; 0x40
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cec:	2300      	movs	r3, #0
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cf0:	2304      	movs	r3, #4
 8000cf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d00:	2302      	movs	r3, #2
 8000d02:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d04:	230c      	movs	r3, #12
 8000d06:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 ff0d 	bl	8001b34 <HAL_RCC_OscConfig>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d20:	f000 f9b8 	bl	8001094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d24:	233f      	movs	r3, #63	; 0x3f
 8000d26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2101      	movs	r1, #1
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 faf7 	bl	800233c <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000d54:	f000 f99e 	bl	8001094 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3770      	adds	r7, #112	; 0x70
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58024800 	.word	0x58024800

08000d68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d6e:	4a23      	ldr	r2, [pc, #140]	; (8000dfc <MX_USART3_UART_Init+0x94>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000daa:	4b13      	ldr	r3, [pc, #76]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db0:	4811      	ldr	r0, [pc, #68]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000db2:	f003 fc99 	bl	80046e8 <HAL_UART_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000dbc:	f000 f96a 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000dc4:	f004 fdc2 	bl	800594c <HAL_UARTEx_SetTxFifoThreshold>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dce:	f000 f961 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000dd6:	f004 fdf7 	bl	80059c8 <HAL_UARTEx_SetRxFifoThreshold>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000de0:	f000 f958 	bl	8001094 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_USART3_UART_Init+0x90>)
 8000de6:	f004 fd78 	bl	80058da <HAL_UARTEx_DisableFifoMode>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000df0:	f000 f950 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	240010f8 	.word	0x240010f8
 8000dfc:	40004800 	.word	0x40004800

08000e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	; 0x38
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	4b7e      	ldr	r3, [pc, #504]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e18:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1c:	4a7c      	ldr	r2, [pc, #496]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e26:	4b7a      	ldr	r3, [pc, #488]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e28:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	623b      	str	r3, [r7, #32]
 8000e32:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e34:	4b76      	ldr	r3, [pc, #472]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e36:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e3a:	4a75      	ldr	r2, [pc, #468]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e44:	4b72      	ldr	r3, [pc, #456]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e4a:	f003 0320 	and.w	r3, r3, #32
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e52:	4b6f      	ldr	r3, [pc, #444]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e58:	4a6d      	ldr	r2, [pc, #436]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e5e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e62:	4b6b      	ldr	r3, [pc, #428]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e64:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b67      	ldr	r3, [pc, #412]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e76:	4a66      	ldr	r2, [pc, #408]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e80:	4b63      	ldr	r3, [pc, #396]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e82:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8e:	4b60      	ldr	r3, [pc, #384]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e94:	4a5e      	ldr	r2, [pc, #376]	; (8001010 <MX_GPIO_Init+0x210>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e9e:	4b5c      	ldr	r3, [pc, #368]	; (8001010 <MX_GPIO_Init+0x210>)
 8000ea0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eac:	4b58      	ldr	r3, [pc, #352]	; (8001010 <MX_GPIO_Init+0x210>)
 8000eae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb2:	4a57      	ldr	r2, [pc, #348]	; (8001010 <MX_GPIO_Init+0x210>)
 8000eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eb8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ebc:	4b54      	ldr	r3, [pc, #336]	; (8001010 <MX_GPIO_Init+0x210>)
 8000ebe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	4b51      	ldr	r3, [pc, #324]	; (8001010 <MX_GPIO_Init+0x210>)
 8000ecc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed0:	4a4f      	ldr	r2, [pc, #316]	; (8001010 <MX_GPIO_Init+0x210>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eda:	4b4d      	ldr	r3, [pc, #308]	; (8001010 <MX_GPIO_Init+0x210>)
 8000edc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee8:	4b49      	ldr	r3, [pc, #292]	; (8001010 <MX_GPIO_Init+0x210>)
 8000eea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eee:	4a48      	ldr	r2, [pc, #288]	; (8001010 <MX_GPIO_Init+0x210>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ef8:	4b45      	ldr	r3, [pc, #276]	; (8001010 <MX_GPIO_Init+0x210>)
 8000efa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f0c:	4841      	ldr	r0, [pc, #260]	; (8001014 <MX_GPIO_Init+0x214>)
 8000f0e:	f000 fd69 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f18:	483f      	ldr	r0, [pc, #252]	; (8001018 <MX_GPIO_Init+0x218>)
 8000f1a:	f000 fd63 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2102      	movs	r1, #2
 8000f22:	483e      	ldr	r0, [pc, #248]	; (800101c <MX_GPIO_Init+0x21c>)
 8000f24:	f000 fd5e 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4838      	ldr	r0, [pc, #224]	; (8001020 <MX_GPIO_Init+0x220>)
 8000f40:	f000 fba0 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	482d      	ldr	r0, [pc, #180]	; (8001014 <MX_GPIO_Init+0x214>)
 8000f5e:	f000 fb91 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f62:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4827      	ldr	r0, [pc, #156]	; (8001018 <MX_GPIO_Init+0x218>)
 8000f7c:	f000 fb82 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4619      	mov	r1, r3
 8000f94:	4823      	ldr	r0, [pc, #140]	; (8001024 <MX_GPIO_Init+0x224>)
 8000f96:	f000 fb75 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000fac:	230a      	movs	r3, #10
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481c      	ldr	r0, [pc, #112]	; (8001028 <MX_GPIO_Init+0x228>)
 8000fb8:	f000 fb64 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000fbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4814      	ldr	r0, [pc, #80]	; (8001028 <MX_GPIO_Init+0x228>)
 8000fd6:	f000 fb55 	bl	8001684 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480a      	ldr	r0, [pc, #40]	; (800101c <MX_GPIO_Init+0x21c>)
 8000ff2:	f000 fb47 	bl	8001684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2028      	movs	r0, #40	; 0x28
 8000ffc:	f000 fb1a 	bl	8001634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001000:	2028      	movs	r0, #40	; 0x28
 8001002:	f000 fb31 	bl	8001668 <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	58024400 	.word	0x58024400
 8001014:	58021400 	.word	0x58021400
 8001018:	58020400 	.word	0x58020400
 800101c:	58021000 	.word	0x58021000
 8001020:	58020800 	.word	0x58020800
 8001024:	58021800 	.word	0x58021800
 8001028:	58020000 	.word	0x58020000

0800102c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_13) // If The INT Source Is EXTI Line9 (A9 Pin)
 8001036:	88fb      	ldrh	r3, [r7, #6]
 8001038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800103c:	d10f      	bne.n	800105e <HAL_GPIO_EXTI_Callback+0x32>
    {
    	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); // Toggle The Output (LED) Pin
 800103e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001044:	f000 fce7 	bl	8001a16 <HAL_GPIO_TogglePin>
    	if(pattern_flag == 0){
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_GPIO_EXTI_Callback+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d103      	bne.n	8001058 <HAL_GPIO_EXTI_Callback+0x2c>
    		pattern_flag = 1;
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_GPIO_EXTI_Callback+0x40>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
    	}
    	else{
    		pattern_flag = 0;
    	}
    }
}
 8001056:	e002      	b.n	800105e <HAL_GPIO_EXTI_Callback+0x32>
    		pattern_flag = 0;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <HAL_GPIO_EXTI_Callback+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	58020400 	.word	0x58020400
 800106c:	240014b0 	.word	0x240014b0

08001070 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001082:	f000 f9ff 	bl	8001484 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40001000 	.word	0x40001000

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_MspInit+0x30>)
 80010a8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010ac:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_MspInit+0x30>)
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_MspInit+0x30>)
 80010b8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	58024400 	.word	0x58024400

080010d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0b8      	sub	sp, #224	; 0xe0
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	22b8      	movs	r2, #184	; 0xb8
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f006 fcb7 	bl	8007a68 <memset>
  if(huart->Instance==USART3)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a25      	ldr	r2, [pc, #148]	; (8001194 <HAL_UART_MspInit+0xc0>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d142      	bne.n	800118a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	4618      	mov	r0, r3
 8001114:	f001 fce0 	bl	8002ad8 <HAL_RCCEx_PeriphCLKConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800111e:	f7ff ffb9 	bl	8001094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001122:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001124:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <HAL_UART_MspInit+0xc4>)
 800112a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112e:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001134:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001142:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001146:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <HAL_UART_MspInit+0xc4>)
 8001152:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001156:	f003 0308 	and.w	r3, r3, #8
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800115e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001178:	2307      	movs	r3, #7
 800117a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_UART_MspInit+0xc8>)
 8001186:	f000 fa7d 	bl	8001684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800118a:	bf00      	nop
 800118c:	37e0      	adds	r7, #224	; 0xe0
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40004800 	.word	0x40004800
 8001198:	58024400 	.word	0x58024400
 800119c:	58020c00 	.word	0x58020c00

080011a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b090      	sub	sp, #64	; 0x40
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b0f      	cmp	r3, #15
 80011ac:	d827      	bhi.n	80011fe <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80011ae:	2200      	movs	r2, #0
 80011b0:	6879      	ldr	r1, [r7, #4]
 80011b2:	2036      	movs	r0, #54	; 0x36
 80011b4:	f000 fa3e 	bl	8001634 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011b8:	2036      	movs	r0, #54	; 0x36
 80011ba:	f000 fa55 	bl	8001668 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80011be:	4a29      	ldr	r2, [pc, #164]	; (8001264 <HAL_InitTick+0xc4>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011c4:	4b28      	ldr	r3, [pc, #160]	; (8001268 <HAL_InitTick+0xc8>)
 80011c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011ca:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_InitTick+0xc8>)
 80011cc:	f043 0310 	orr.w	r3, r3, #16
 80011d0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80011d4:	4b24      	ldr	r3, [pc, #144]	; (8001268 <HAL_InitTick+0xc8>)
 80011d6:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011e2:	f107 0210 	add.w	r2, r7, #16
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fc31 	bl	8002a54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f4:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d106      	bne.n	800120a <HAL_InitTick+0x6a>
 80011fc:	e001      	b.n	8001202 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e02b      	b.n	800125a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001202:	f001 fbfb 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 8001206:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001208:	e004      	b.n	8001214 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800120a:	f001 fbf7 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 800120e:	4603      	mov	r3, r0
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_InitTick+0xcc>)
 8001218:	fba2 2303 	umull	r2, r3, r2, r3
 800121c:	0c9b      	lsrs	r3, r3, #18
 800121e:	3b01      	subs	r3, #1
 8001220:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_InitTick+0xd0>)
 8001224:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_InitTick+0xd4>)
 8001226:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_InitTick+0xd0>)
 800122a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800122e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001230:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <HAL_InitTick+0xd0>)
 8001232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001234:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_InitTick+0xd0>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_InitTick+0xd0>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001242:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_InitTick+0xd0>)
 8001244:	f002 ff76 	bl	8004134 <HAL_TIM_Base_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d104      	bne.n	8001258 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <HAL_InitTick+0xd0>)
 8001250:	f002 ffd2 	bl	80041f8 <HAL_TIM_Base_Start_IT>
 8001254:	4603      	mov	r3, r0
 8001256:	e000      	b.n	800125a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	3740      	adds	r7, #64	; 0x40
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	24000058 	.word	0x24000058
 8001268:	58024400 	.word	0x58024400
 800126c:	431bde83 	.word	0x431bde83
 8001270:	240014b4 	.word	0x240014b4
 8001274:	40001000 	.word	0x40001000

08001278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800127c:	e7fe      	b.n	800127c <NMI_Handler+0x4>

0800127e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <HardFault_Handler+0x4>

08001284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <MemManage_Handler+0x4>

0800128a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <UsageFault_Handler+0x4>

08001296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80012a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012ac:	f000 fbcd 	bl	8001a4a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <TIM6_DAC_IRQHandler+0x10>)
 80012ba:	f003 f815 	bl	80042e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	240014b4 	.word	0x240014b4

080012c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <SystemInit+0xd0>)
 80012ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <SystemInit+0xd0>)
 80012d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <SystemInit+0xd4>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 030f 	and.w	r3, r3, #15
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d807      	bhi.n	80012f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <SystemInit+0xd4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 030f 	bic.w	r3, r3, #15
 80012f0:	4a2a      	ldr	r2, [pc, #168]	; (800139c <SystemInit+0xd4>)
 80012f2:	f043 0303 	orr.w	r3, r3, #3
 80012f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <SystemInit+0xd8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a28      	ldr	r2, [pc, #160]	; (80013a0 <SystemInit+0xd8>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <SystemInit+0xd8>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <SystemInit+0xd8>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4924      	ldr	r1, [pc, #144]	; (80013a0 <SystemInit+0xd8>)
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <SystemInit+0xdc>)
 8001312:	4013      	ands	r3, r2
 8001314:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <SystemInit+0xd4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d007      	beq.n	8001332 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <SystemInit+0xd4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 030f 	bic.w	r3, r3, #15
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <SystemInit+0xd4>)
 800132c:	f043 0303 	orr.w	r3, r3, #3
 8001330:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001332:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <SystemInit+0xd8>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <SystemInit+0xd8>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800133e:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <SystemInit+0xd8>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001344:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <SystemInit+0xd8>)
 8001346:	4a18      	ldr	r2, [pc, #96]	; (80013a8 <SystemInit+0xe0>)
 8001348:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <SystemInit+0xd8>)
 800134c:	4a17      	ldr	r2, [pc, #92]	; (80013ac <SystemInit+0xe4>)
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001350:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <SystemInit+0xd8>)
 8001352:	4a17      	ldr	r2, [pc, #92]	; (80013b0 <SystemInit+0xe8>)
 8001354:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001356:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <SystemInit+0xd8>)
 8001358:	2200      	movs	r2, #0
 800135a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800135c:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <SystemInit+0xd8>)
 800135e:	4a14      	ldr	r2, [pc, #80]	; (80013b0 <SystemInit+0xe8>)
 8001360:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <SystemInit+0xd8>)
 8001364:	2200      	movs	r2, #0
 8001366:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <SystemInit+0xd8>)
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <SystemInit+0xe8>)
 800136c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <SystemInit+0xd8>)
 8001370:	2200      	movs	r2, #0
 8001372:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <SystemInit+0xd8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <SystemInit+0xd8>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001380:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <SystemInit+0xd8>)
 8001382:	2200      	movs	r2, #0
 8001384:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <SystemInit+0xec>)
 8001388:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800138c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00
 800139c:	52002000 	.word	0x52002000
 80013a0:	58024400 	.word	0x58024400
 80013a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013a8:	02020200 	.word	0x02020200
 80013ac:	01ff0000 	.word	0x01ff0000
 80013b0:	01010280 	.word	0x01010280
 80013b4:	52004000 	.word	0x52004000

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013bc:	f7ff ff84 	bl	80012c8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	; (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013e6:	f006 fb1b 	bl	8007a20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff fc3b 	bl	8000c64 <main>
  bx  lr
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 80013f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013f8:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80013fc:	08007b60 	.word	0x08007b60
  ldr r2, =_sbss
 8001400:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 8001404:	24001b48 	.word	0x24001b48

08001408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001412:	2003      	movs	r0, #3
 8001414:	f000 f903 	bl	800161e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001418:	f001 f946 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 800141c:	4602      	mov	r2, r0
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_Init+0x68>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	4913      	ldr	r1, [pc, #76]	; (8001478 <HAL_Init+0x6c>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
 8001434:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_Init+0x68>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_Init+0x6c>)
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_Init+0x70>)
 800144e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_Init+0x74>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	200f      	movs	r0, #15
 8001458:	f7ff fea2 	bl	80011a0 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e002      	b.n	800146c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001466:	f7ff fe1b 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58024400 	.word	0x58024400
 8001478:	08007b18 	.word	0x08007b18
 800147c:	24000054 	.word	0x24000054
 8001480:	24000050 	.word	0x24000050

08001484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x20>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x24>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_IncTick+0x24>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2400005c 	.word	0x2400005c
 80014a8:	24001500 	.word	0x24001500

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	24001500 	.word	0x24001500

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <__NVIC_SetPriorityGrouping+0x40>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f2:	4a04      	ldr	r2, [pc, #16]	; (8001504 <__NVIC_SetPriorityGrouping+0x40>)
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	60d3      	str	r3, [r2, #12]
}
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00
 8001508:	05fa0000 	.word	0x05fa0000

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4907      	ldr	r1, [pc, #28]	; (8001560 <__NVIC_EnableIRQ+0x38>)
 8001542:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	e000e100 	.word	0xe000e100

08001564 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	6039      	str	r1, [r7, #0]
 800156e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001574:	2b00      	cmp	r3, #0
 8001576:	db0a      	blt.n	800158e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	490c      	ldr	r1, [pc, #48]	; (80015b0 <__NVIC_SetPriority+0x4c>)
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	0112      	lsls	r2, r2, #4
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	440b      	add	r3, r1
 8001588:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800158c:	e00a      	b.n	80015a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4908      	ldr	r1, [pc, #32]	; (80015b4 <__NVIC_SetPriority+0x50>)
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	f003 030f 	and.w	r3, r3, #15
 800159a:	3b04      	subs	r3, #4
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	440b      	add	r3, r1
 80015a2:	761a      	strb	r2, [r3, #24]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000e100 	.word	0xe000e100
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f1c3 0307 	rsb	r3, r3, #7
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	bf28      	it	cs
 80015d6:	2304      	movcs	r3, #4
 80015d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	3304      	adds	r3, #4
 80015de:	2b06      	cmp	r3, #6
 80015e0:	d902      	bls.n	80015e8 <NVIC_EncodePriority+0x30>
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3b03      	subs	r3, #3
 80015e6:	e000      	b.n	80015ea <NVIC_EncodePriority+0x32>
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43da      	mvns	r2, r3
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001600:	f04f 31ff 	mov.w	r1, #4294967295
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	fa01 f303 	lsl.w	r3, r1, r3
 800160a:	43d9      	mvns	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001610:	4313      	orrs	r3, r2
         );
}
 8001612:	4618      	mov	r0, r3
 8001614:	3724      	adds	r7, #36	; 0x24
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff4c 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
 8001640:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001642:	f7ff ff63 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001646:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f7ff ffb3 	bl	80015b8 <NVIC_EncodePriority>
 8001652:	4602      	mov	r2, r0
 8001654:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff82 	bl	8001564 <__NVIC_SetPriority>
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff56 	bl	8001528 <__NVIC_EnableIRQ>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001692:	4b89      	ldr	r3, [pc, #548]	; (80018b8 <HAL_GPIO_Init+0x234>)
 8001694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001696:	e194      	b.n	80019c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8186 	beq.w	80019bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d005      	beq.n	80016c8 <HAL_GPIO_Init+0x44>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d130      	bne.n	800172a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016fe:	2201      	movs	r2, #1
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	f003 0201 	and.w	r2, r3, #1
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b03      	cmp	r3, #3
 8001734:	d017      	beq.n	8001766 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d123      	bne.n	80017ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	08da      	lsrs	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3208      	adds	r2, #8
 80017b4:	69b9      	ldr	r1, [r7, #24]
 80017b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0203 	and.w	r2, r3, #3
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80e0 	beq.w	80019bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_GPIO_Init+0x238>)
 80017fe:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001802:	4a2e      	ldr	r2, [pc, #184]	; (80018bc <HAL_GPIO_Init+0x238>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_GPIO_Init+0x238>)
 800180e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181a:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <HAL_GPIO_Init+0x23c>)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <HAL_GPIO_Init+0x240>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d052      	beq.n	80018ec <HAL_GPIO_Init+0x268>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_GPIO_Init+0x244>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d031      	beq.n	80018b2 <HAL_GPIO_Init+0x22e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <HAL_GPIO_Init+0x248>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d02b      	beq.n	80018ae <HAL_GPIO_Init+0x22a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_GPIO_Init+0x24c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d025      	beq.n	80018aa <HAL_GPIO_Init+0x226>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <HAL_GPIO_Init+0x250>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01f      	beq.n	80018a6 <HAL_GPIO_Init+0x222>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <HAL_GPIO_Init+0x254>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d019      	beq.n	80018a2 <HAL_GPIO_Init+0x21e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_GPIO_Init+0x258>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0x21a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_GPIO_Init+0x25c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00d      	beq.n	800189a <HAL_GPIO_Init+0x216>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <HAL_GPIO_Init+0x260>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d007      	beq.n	8001896 <HAL_GPIO_Init+0x212>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_GPIO_Init+0x264>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_GPIO_Init+0x20e>
 800188e:	2309      	movs	r3, #9
 8001890:	e02d      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 8001892:	230a      	movs	r3, #10
 8001894:	e02b      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 8001896:	2308      	movs	r3, #8
 8001898:	e029      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 800189a:	2307      	movs	r3, #7
 800189c:	e027      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 800189e:	2306      	movs	r3, #6
 80018a0:	e025      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e023      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e021      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e01f      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e01d      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e01b      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018b6:	bf00      	nop
 80018b8:	58000080 	.word	0x58000080
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58000400 	.word	0x58000400
 80018c4:	58020000 	.word	0x58020000
 80018c8:	58020400 	.word	0x58020400
 80018cc:	58020800 	.word	0x58020800
 80018d0:	58020c00 	.word	0x58020c00
 80018d4:	58021000 	.word	0x58021000
 80018d8:	58021400 	.word	0x58021400
 80018dc:	58021800 	.word	0x58021800
 80018e0:	58021c00 	.word	0x58021c00
 80018e4:	58022000 	.word	0x58022000
 80018e8:	58022400 	.word	0x58022400
 80018ec:	2300      	movs	r3, #0
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018fe:	4938      	ldr	r1, [pc, #224]	; (80019e0 <HAL_GPIO_Init+0x35c>)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3301      	adds	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f47f ae63 	bne.w	8001698 <HAL_GPIO_Init+0x14>
  }
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	3724      	adds	r7, #36	; 0x24
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	58000400 	.word	0x58000400

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a00:	e003      	b.n	8001a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	041a      	lsls	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	619a      	str	r2, [r3, #24]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	041a      	lsls	r2, r3, #16
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43d9      	mvns	r1, r3
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	400b      	ands	r3, r1
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	619a      	str	r2, [r3, #24]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fadb 	bl	800102c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	2b06      	cmp	r3, #6
 8001a92:	d00a      	beq.n	8001aaa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a94:	4b26      	ldr	r3, [pc, #152]	; (8001b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e040      	b.n	8001b28 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e03e      	b.n	8001b28 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001aaa:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001ab2:	491f      	ldr	r1, [pc, #124]	; (8001b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001aba:	f7ff fcf7 	bl	80014ac <HAL_GetTick>
 8001abe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ac0:	e009      	b.n	8001ad6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ac2:	f7ff fcf3 	bl	80014ac <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ad0:	d901      	bls.n	8001ad6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e028      	b.n	8001b28 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ae2:	d1ee      	bne.n	8001ac2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b1e      	cmp	r3, #30
 8001ae8:	d008      	beq.n	8001afc <HAL_PWREx_ConfigSupply+0x7c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b2e      	cmp	r3, #46	; 0x2e
 8001aee:	d005      	beq.n	8001afc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b1d      	cmp	r3, #29
 8001af4:	d002      	beq.n	8001afc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b2d      	cmp	r3, #45	; 0x2d
 8001afa:	d114      	bne.n	8001b26 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001afc:	f7ff fcd6 	bl	80014ac <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b02:	e009      	b.n	8001b18 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b04:	f7ff fcd2 	bl	80014ac <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b12:	d901      	bls.n	8001b18 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e007      	b.n	8001b28 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d1ee      	bne.n	8001b04 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	58024800 	.word	0x58024800

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	; 0x30
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e3f3      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80b3 	beq.w	8001cba <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b54:	4b9e      	ldr	r3, [pc, #632]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b5e:	4b9c      	ldr	r3, [pc, #624]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d007      	beq.n	8001b7a <HAL_RCC_OscConfig+0x46>
 8001b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b6c:	2b18      	cmp	r3, #24
 8001b6e:	d112      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62>
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d10d      	bne.n	8001b96 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7a:	4b95      	ldr	r3, [pc, #596]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8098 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x184>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f040 8093 	bne.w	8001cb8 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e3cb      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x7a>
 8001ba0:	4b8b      	ldr	r3, [pc, #556]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a8a      	ldr	r2, [pc, #552]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	e058      	b.n	8001c60 <HAL_RCC_OscConfig+0x12c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d112      	bne.n	8001bdc <HAL_RCC_OscConfig+0xa8>
 8001bb6:	4b86      	ldr	r3, [pc, #536]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a85      	ldr	r2, [pc, #532]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b83      	ldr	r3, [pc, #524]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a82      	ldr	r2, [pc, #520]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001bc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b80      	ldr	r3, [pc, #512]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a7f      	ldr	r2, [pc, #508]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e041      	b.n	8001c60 <HAL_RCC_OscConfig+0x12c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be4:	d112      	bne.n	8001c0c <HAL_RCC_OscConfig+0xd8>
 8001be6:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a79      	ldr	r2, [pc, #484]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	4b77      	ldr	r3, [pc, #476]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a76      	ldr	r2, [pc, #472]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001bf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b74      	ldr	r3, [pc, #464]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a73      	ldr	r2, [pc, #460]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e029      	b.n	8001c60 <HAL_RCC_OscConfig+0x12c>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001c14:	d112      	bne.n	8001c3c <HAL_RCC_OscConfig+0x108>
 8001c16:	4b6e      	ldr	r3, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a6d      	ldr	r2, [pc, #436]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b6b      	ldr	r3, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	e011      	b.n	8001c60 <HAL_RCC_OscConfig+0x12c>
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a60      	ldr	r2, [pc, #384]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a5d      	ldr	r2, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c5a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fc20 	bl	80014ac <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fc1c 	bl	80014ac <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e355      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x13c>
 8001c8e:	e014      	b.n	8001cba <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7ff fc0c 	bl	80014ac <HAL_GetTick>
 8001c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fc08 	bl	80014ac <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e341      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001caa:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x164>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 808c 	beq.w	8001de0 <HAL_RCC_OscConfig+0x2ac>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cc8:	4b41      	ldr	r3, [pc, #260]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cd0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cd2:	4b3f      	ldr	r3, [pc, #252]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_RCC_OscConfig+0x1ba>
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	2b18      	cmp	r3, #24
 8001ce2:	d137      	bne.n	8001d54 <HAL_RCC_OscConfig+0x220>
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d132      	bne.n	8001d54 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1d2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x1d2>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e313      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d06:	4b32      	ldr	r3, [pc, #200]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 0219 	bic.w	r2, r3, #25
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	492f      	ldr	r1, [pc, #188]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d18:	f7ff fbc8 	bl	80014ac <HAL_GetTick>
 8001d1c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1fe>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fbc4 	bl	80014ac <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1fe>
            {
              return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e2fd      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x1ec>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3e:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	061b      	lsls	r3, r3, #24
 8001d4c:	4920      	ldr	r1, [pc, #128]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d52:	e045      	b.n	8001de0 <HAL_RCC_OscConfig+0x2ac>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d026      	beq.n	8001daa <HAL_RCC_OscConfig+0x276>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f023 0219 	bic.w	r2, r3, #25
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4919      	ldr	r1, [pc, #100]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff fb9d 	bl	80014ac <HAL_GetTick>
 8001d72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d76:	f7ff fb99 	bl	80014ac <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e2d2      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x242>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	490b      	ldr	r1, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	604b      	str	r3, [r1, #4]
 8001da8:	e01a      	b.n	8001de0 <HAL_RCC_OscConfig+0x2ac>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a08      	ldr	r2, [pc, #32]	; (8001dd0 <HAL_RCC_OscConfig+0x29c>)
 8001db0:	f023 0301 	bic.w	r3, r3, #1
 8001db4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db6:	f7ff fb79 	bl	80014ac <HAL_GetTick>
 8001dba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dbc:	e00a      	b.n	8001dd4 <HAL_RCC_OscConfig+0x2a0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbe:	f7ff fb75 	bl	80014ac <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d903      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x2a0>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e2ae      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
 8001dd0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dd4:	4b99      	ldr	r3, [pc, #612]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1ee      	bne.n	8001dbe <HAL_RCC_OscConfig+0x28a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d06a      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x38e>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dec:	4b93      	ldr	r3, [pc, #588]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001df4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001df6:	4b91      	ldr	r3, [pc, #580]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d007      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2de>
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b18      	cmp	r3, #24
 8001e06:	d11b      	bne.n	8001e40 <HAL_RCC_OscConfig+0x30c>
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x30c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e12:	4b8a      	ldr	r3, [pc, #552]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x2f6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2b80      	cmp	r3, #128	; 0x80
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e281      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e2a:	4b84      	ldr	r3, [pc, #528]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	061b      	lsls	r3, r3, #24
 8001e38:	4980      	ldr	r1, [pc, #512]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e3e:	e040      	b.n	8001ec2 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d023      	beq.n	8001e90 <HAL_RCC_OscConfig+0x35c>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e48:	4b7c      	ldr	r3, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a7b      	ldr	r2, [pc, #492]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff fb2a 	bl	80014ac <HAL_GetTick>
 8001e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x33a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001e5c:	f7ff fb26 	bl	80014ac <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x33a>
          {
            return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e25f      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e6e:	4b73      	ldr	r3, [pc, #460]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x328>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e7a:	4b70      	ldr	r3, [pc, #448]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	061b      	lsls	r3, r3, #24
 8001e88:	496c      	ldr	r1, [pc, #432]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60cb      	str	r3, [r1, #12]
 8001e8e:	e018      	b.n	8001ec2 <HAL_RCC_OscConfig+0x38e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e90:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a69      	ldr	r2, [pc, #420]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fb06 	bl	80014ac <HAL_GetTick>
 8001ea0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x382>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fb02 	bl	80014ac <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x382>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e23b      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001eb6:	4b61      	ldr	r3, [pc, #388]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x370>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d036      	beq.n	8001f3c <HAL_RCC_OscConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d019      	beq.n	8001f0a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed6:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eda:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fae3 	bl	80014ac <HAL_GetTick>
 8001ee6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eea:	f7ff fadf 	bl	80014ac <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e218      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001efc:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x3b6>
 8001f08:	e018      	b.n	8001f3c <HAL_RCC_OscConfig+0x408>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0a:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0e:	4a4b      	ldr	r2, [pc, #300]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f16:	f7ff fac9 	bl	80014ac <HAL_GetTick>
 8001f1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f1c:	e008      	b.n	8001f30 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1e:	f7ff fac5 	bl	80014ac <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e1fe      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f30:	4b42      	ldr	r3, [pc, #264]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001f32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1f0      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3ea>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0320 	and.w	r3, r3, #32
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d036      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d019      	beq.n	8001f84 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f50:	4b3a      	ldr	r3, [pc, #232]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a39      	ldr	r2, [pc, #228]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001f56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff faa6 	bl	80014ac <HAL_GetTick>
 8001f60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f64:	f7ff faa2 	bl	80014ac <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1db      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x430>
 8001f82:	e018      	b.n	8001fb6 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f84:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f90:	f7ff fa8c 	bl	80014ac <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x476>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001f98:	f7ff fa88 	bl	80014ac <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x476>
        {
          return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e1c1      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001faa:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 80af 	beq.w	8002122 <HAL_RCC_OscConfig+0x5ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fc4:	4b1e      	ldr	r3, [pc, #120]	; (8002040 <HAL_RCC_OscConfig+0x50c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a1d      	ldr	r2, [pc, #116]	; (8002040 <HAL_RCC_OscConfig+0x50c>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fd0:	f7ff fa6c 	bl	80014ac <HAL_GetTick>
 8001fd4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x4b6>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001fd8:	f7ff fa68 	bl	80014ac <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x4b6>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e1a1      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <HAL_RCC_OscConfig+0x50c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4a4>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d106      	bne.n	800200c <HAL_RCC_OscConfig+0x4d8>
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8002000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002002:	4a0e      	ldr	r2, [pc, #56]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6713      	str	r3, [r2, #112]	; 0x70
 800200a:	e05b      	b.n	80020c4 <HAL_RCC_OscConfig+0x590>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d117      	bne.n	8002044 <HAL_RCC_OscConfig+0x510>
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_RCC_OscConfig+0x508>)
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	4a05      	ldr	r2, [pc, #20]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8002026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800202a:	6713      	str	r3, [r2, #112]	; 0x70
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_RCC_OscConfig+0x508>)
 800202e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002030:	4a02      	ldr	r2, [pc, #8]	; (800203c <HAL_RCC_OscConfig+0x508>)
 8002032:	f023 0304 	bic.w	r3, r3, #4
 8002036:	6713      	str	r3, [r2, #112]	; 0x70
 8002038:	e044      	b.n	80020c4 <HAL_RCC_OscConfig+0x590>
 800203a:	bf00      	nop
 800203c:	58024400 	.word	0x58024400
 8002040:	58024800 	.word	0x58024800
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b05      	cmp	r3, #5
 800204a:	d112      	bne.n	8002072 <HAL_RCC_OscConfig+0x53e>
 800204c:	4b95      	ldr	r3, [pc, #596]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	4a94      	ldr	r2, [pc, #592]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	6713      	str	r3, [r2, #112]	; 0x70
 8002058:	4b92      	ldr	r3, [pc, #584]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	4a91      	ldr	r2, [pc, #580]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800205e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002062:	6713      	str	r3, [r2, #112]	; 0x70
 8002064:	4b8f      	ldr	r3, [pc, #572]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a8e      	ldr	r2, [pc, #568]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	e028      	b.n	80020c4 <HAL_RCC_OscConfig+0x590>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b85      	cmp	r3, #133	; 0x85
 8002078:	d112      	bne.n	80020a0 <HAL_RCC_OscConfig+0x56c>
 800207a:	4b8a      	ldr	r3, [pc, #552]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	4a89      	ldr	r2, [pc, #548]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	6713      	str	r3, [r2, #112]	; 0x70
 8002086:	4b87      	ldr	r3, [pc, #540]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	4a86      	ldr	r2, [pc, #536]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002090:	6713      	str	r3, [r2, #112]	; 0x70
 8002092:	4b84      	ldr	r3, [pc, #528]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002096:	4a83      	ldr	r2, [pc, #524]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6713      	str	r3, [r2, #112]	; 0x70
 800209e:	e011      	b.n	80020c4 <HAL_RCC_OscConfig+0x590>
 80020a0:	4b80      	ldr	r3, [pc, #512]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a7f      	ldr	r2, [pc, #508]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80020a6:	f023 0301 	bic.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	4b7d      	ldr	r3, [pc, #500]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80020ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020b0:	4a7c      	ldr	r2, [pc, #496]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80020b2:	f023 0304 	bic.w	r3, r3, #4
 80020b6:	6713      	str	r3, [r2, #112]	; 0x70
 80020b8:	4b7a      	ldr	r3, [pc, #488]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	4a79      	ldr	r2, [pc, #484]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80020be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d015      	beq.n	80020f8 <HAL_RCC_OscConfig+0x5c4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020cc:	f7ff f9ee 	bl	80014ac <HAL_GetTick>
 80020d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_OscConfig+0x5b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d4:	f7ff f9ea 	bl	80014ac <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x5b6>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e121      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020ea:	4b6e      	ldr	r3, [pc, #440]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80020ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ee      	beq.n	80020d4 <HAL_RCC_OscConfig+0x5a0>
 80020f6:	e014      	b.n	8002122 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f9d8 	bl	80014ac <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x5e2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff f9d4 	bl	80014ac <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x5e2>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e10b      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002116:	4b63      	ldr	r3, [pc, #396]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ee      	bne.n	8002100 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 8100 	beq.w	800232c <HAL_RCC_OscConfig+0x7f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800212c:	4b5d      	ldr	r3, [pc, #372]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002134:	2b18      	cmp	r3, #24
 8002136:	f000 80bb 	beq.w	80022b0 <HAL_RCC_OscConfig+0x77c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2b02      	cmp	r3, #2
 8002140:	f040 8095 	bne.w	800226e <HAL_RCC_OscConfig+0x73a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a56      	ldr	r2, [pc, #344]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800214a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7ff f9ac 	bl	80014ac <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f9a8 	bl	80014ac <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0e1      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800216a:	4b4e      	ldr	r3, [pc, #312]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x624>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002176:	4b4b      	ldr	r3, [pc, #300]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800217a:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <HAL_RCC_OscConfig+0x774>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002186:	0112      	lsls	r2, r2, #4
 8002188:	430a      	orrs	r2, r1
 800218a:	4946      	ldr	r1, [pc, #280]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800218c:	4313      	orrs	r3, r2
 800218e:	628b      	str	r3, [r1, #40]	; 0x28
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	3b01      	subs	r3, #1
 8002196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219e:	3b01      	subs	r3, #1
 80021a0:	025b      	lsls	r3, r3, #9
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	3b01      	subs	r3, #1
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b8:	3b01      	subs	r3, #1
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80021c0:	4938      	ldr	r1, [pc, #224]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	4a36      	ldr	r2, [pc, #216]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80021d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d6:	4b35      	ldr	r3, [pc, #212]	; (80022ac <HAL_RCC_OscConfig+0x778>)
 80021d8:	4013      	ands	r3, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021de:	00d2      	lsls	r2, r2, #3
 80021e0:	4930      	ldr	r1, [pc, #192]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	f023 020c 	bic.w	r2, r3, #12
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	492c      	ldr	r1, [pc, #176]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f023 0202 	bic.w	r2, r3, #2
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002204:	4927      	ldr	r1, [pc, #156]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002206:	4313      	orrs	r3, r2
 8002208:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800220a:	4b26      	ldr	r3, [pc, #152]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002222:	4b20      	ldr	r3, [pc, #128]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800222e:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7ff f931 	bl	80014ac <HAL_GetTick>
 800224a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x72c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff f92d 	bl	80014ac <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x72c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e066      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002260:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x71a>
 800226c:	e05e      	b.n	800232c <HAL_RCC_OscConfig+0x7f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f7ff f917 	bl	80014ac <HAL_GetTick>
 800227e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x760>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002282:	f7ff f913 	bl	80014ac <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x760>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e04c      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_RCC_OscConfig+0x770>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f0      	bne.n	8002282 <HAL_RCC_OscConfig+0x74e>
 80022a0:	e044      	b.n	800232c <HAL_RCC_OscConfig+0x7f8>
 80022a2:	bf00      	nop
 80022a4:	58024400 	.word	0x58024400
 80022a8:	fffffc0c 	.word	0xfffffc0c
 80022ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80022b0:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_RCC_OscConfig+0x804>)
 80022b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80022b6:	4b20      	ldr	r3, [pc, #128]	; (8002338 <HAL_RCC_OscConfig+0x804>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d031      	beq.n	8002328 <HAL_RCC_OscConfig+0x7f4>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0203 	and.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d12a      	bne.n	8002328 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d122      	bne.n	8002328 <HAL_RCC_OscConfig+0x7f4>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d11a      	bne.n	8002328 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0a5b      	lsrs	r3, r3, #9
 80022f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002300:	429a      	cmp	r2, r3
 8002302:	d111      	bne.n	8002328 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d108      	bne.n	8002328 <HAL_RCC_OscConfig+0x7f4>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0e1b      	lsrs	r3, r3, #24
 800231a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002322:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x7f8>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x7fa>
      }
    }
  }
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3730      	adds	r7, #48	; 0x30
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	58024400 	.word	0x58024400

0800233c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e19c      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002350:	4b8a      	ldr	r3, [pc, #552]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d910      	bls.n	8002380 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b87      	ldr	r3, [pc, #540]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 020f 	bic.w	r2, r3, #15
 8002366:	4985      	ldr	r1, [pc, #532]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b83      	ldr	r3, [pc, #524]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e184      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691a      	ldr	r2, [r3, #16]
 8002390:	4b7b      	ldr	r3, [pc, #492]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002398:	429a      	cmp	r2, r3
 800239a:	d908      	bls.n	80023ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800239c:	4b78      	ldr	r3, [pc, #480]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	691b      	ldr	r3, [r3, #16]
 80023a8:	4975      	ldr	r1, [pc, #468]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	4b70      	ldr	r3, [pc, #448]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d908      	bls.n	80023dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023ca:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	496a      	ldr	r1, [pc, #424]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	4b64      	ldr	r3, [pc, #400]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d908      	bls.n	800240a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023f8:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	495e      	ldr	r1, [pc, #376]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002406:	4313      	orrs	r3, r2
 8002408:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0320 	and.w	r3, r3, #32
 8002412:	2b00      	cmp	r3, #0
 8002414:	d010      	beq.n	8002438 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69da      	ldr	r2, [r3, #28]
 800241a:	4b59      	ldr	r3, [pc, #356]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002422:	429a      	cmp	r2, r3
 8002424:	d908      	bls.n	8002438 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002426:	4b56      	ldr	r3, [pc, #344]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	4953      	ldr	r1, [pc, #332]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002434:	4313      	orrs	r3, r2
 8002436:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d010      	beq.n	8002466 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68da      	ldr	r2, [r3, #12]
 8002448:	4b4d      	ldr	r3, [pc, #308]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	429a      	cmp	r2, r3
 8002452:	d908      	bls.n	8002466 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f023 020f 	bic.w	r2, r3, #15
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4947      	ldr	r1, [pc, #284]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002462:	4313      	orrs	r3, r2
 8002464:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d055      	beq.n	800251e <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002472:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4940      	ldr	r1, [pc, #256]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002480:	4313      	orrs	r3, r2
 8002482:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d107      	bne.n	800249c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800248c:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d121      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0f6      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d107      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d115      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0ea      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d107      	bne.n	80024cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024bc:	4b30      	ldr	r3, [pc, #192]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0de      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024cc:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0d6      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f023 0207 	bic.w	r2, r3, #7
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4925      	ldr	r1, [pc, #148]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7fe ffdd 	bl	80014ac <HAL_GetTick>
 80024f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f4:	e00a      	b.n	800250c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f6:	f7fe ffd9 	bl	80014ac <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0be      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	429a      	cmp	r2, r3
 800251c:	d1eb      	bne.n	80024f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d010      	beq.n	800254c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	4b14      	ldr	r3, [pc, #80]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	429a      	cmp	r2, r3
 8002538:	d208      	bcs.n	800254c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800253a:	4b11      	ldr	r3, [pc, #68]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	f023 020f 	bic.w	r2, r3, #15
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	490e      	ldr	r1, [pc, #56]	; (8002580 <HAL_RCC_ClockConfig+0x244>)
 8002548:	4313      	orrs	r3, r2
 800254a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d214      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 020f 	bic.w	r2, r3, #15
 8002562:	4906      	ldr	r1, [pc, #24]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <HAL_RCC_ClockConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e086      	b.n	800268a <HAL_RCC_ClockConfig+0x34e>
 800257c:	52002000 	.word	0x52002000
 8002580:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d010      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691a      	ldr	r2, [r3, #16]
 8002594:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800259c:	429a      	cmp	r2, r3
 800259e:	d208      	bcs.n	80025b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025a0:	4b3c      	ldr	r3, [pc, #240]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	4939      	ldr	r1, [pc, #228]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d010      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d208      	bcs.n	80025e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025ce:	4b31      	ldr	r3, [pc, #196]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	492e      	ldr	r1, [pc, #184]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d010      	beq.n	800260e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d208      	bcs.n	800260e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	4922      	ldr	r1, [pc, #136]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 800260a:	4313      	orrs	r3, r2
 800260c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0320 	and.w	r3, r3, #32
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69da      	ldr	r2, [r3, #28]
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002626:	429a      	cmp	r2, r3
 8002628:	d208      	bcs.n	800263c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4917      	ldr	r1, [pc, #92]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 8002638:	4313      	orrs	r3, r2
 800263a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800263c:	f000 f834 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	f003 030f 	and.w	r3, r3, #15
 800264c:	4912      	ldr	r1, [pc, #72]	; (8002698 <HAL_RCC_ClockConfig+0x35c>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	f003 031f 	and.w	r3, r3, #31
 8002654:	fa22 f303 	lsr.w	r3, r2, r3
 8002658:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800265a:	4b0e      	ldr	r3, [pc, #56]	; (8002694 <HAL_RCC_ClockConfig+0x358>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <HAL_RCC_ClockConfig+0x35c>)
 8002664:	5cd3      	ldrb	r3, [r2, r3]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_RCC_ClockConfig+0x360>)
 8002672:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <HAL_RCC_ClockConfig+0x364>)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800267a:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x368>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fd8e 	bl	80011a0 <HAL_InitTick>
 8002684:	4603      	mov	r3, r0
 8002686:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	58024400 	.word	0x58024400
 8002698:	08007b18 	.word	0x08007b18
 800269c:	24000054 	.word	0x24000054
 80026a0:	24000050 	.word	0x24000050
 80026a4:	24000058 	.word	0x24000058

080026a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b089      	sub	sp, #36	; 0x24
 80026ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ae:	4bb3      	ldr	r3, [pc, #716]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026b6:	2b18      	cmp	r3, #24
 80026b8:	f200 8155 	bhi.w	8002966 <HAL_RCC_GetSysClockFreq+0x2be>
 80026bc:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	08002729 	.word	0x08002729
 80026c8:	08002967 	.word	0x08002967
 80026cc:	08002967 	.word	0x08002967
 80026d0:	08002967 	.word	0x08002967
 80026d4:	08002967 	.word	0x08002967
 80026d8:	08002967 	.word	0x08002967
 80026dc:	08002967 	.word	0x08002967
 80026e0:	08002967 	.word	0x08002967
 80026e4:	0800274f 	.word	0x0800274f
 80026e8:	08002967 	.word	0x08002967
 80026ec:	08002967 	.word	0x08002967
 80026f0:	08002967 	.word	0x08002967
 80026f4:	08002967 	.word	0x08002967
 80026f8:	08002967 	.word	0x08002967
 80026fc:	08002967 	.word	0x08002967
 8002700:	08002967 	.word	0x08002967
 8002704:	08002755 	.word	0x08002755
 8002708:	08002967 	.word	0x08002967
 800270c:	08002967 	.word	0x08002967
 8002710:	08002967 	.word	0x08002967
 8002714:	08002967 	.word	0x08002967
 8002718:	08002967 	.word	0x08002967
 800271c:	08002967 	.word	0x08002967
 8002720:	08002967 	.word	0x08002967
 8002724:	0800275b 	.word	0x0800275b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002728:	4b94      	ldr	r3, [pc, #592]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d009      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002734:	4b91      	ldr	r3, [pc, #580]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	4a90      	ldr	r2, [pc, #576]	; (8002980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002746:	e111      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002748:	4b8d      	ldr	r3, [pc, #564]	; (8002980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800274a:	61bb      	str	r3, [r7, #24]
    break;
 800274c:	e10e      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800274e:	4b8d      	ldr	r3, [pc, #564]	; (8002984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002750:	61bb      	str	r3, [r7, #24]
    break;
 8002752:	e10b      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002754:	4b8c      	ldr	r3, [pc, #560]	; (8002988 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002756:	61bb      	str	r3, [r7, #24]
    break;
 8002758:	e108      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800275a:	4b88      	ldr	r3, [pc, #544]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002764:	4b85      	ldr	r3, [pc, #532]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800276e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002770:	4b82      	ldr	r3, [pc, #520]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800277a:	4b80      	ldr	r3, [pc, #512]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	08db      	lsrs	r3, r3, #3
 8002780:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002792:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80e1 	beq.w	8002960 <HAL_RCC_GetSysClockFreq+0x2b8>
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	f000 8083 	beq.w	80028ac <HAL_RCC_GetSysClockFreq+0x204>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f200 80a1 	bhi.w	80028f0 <HAL_RCC_GetSysClockFreq+0x248>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x114>
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d056      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x1c0>
 80027ba:	e099      	b.n	80028f0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027bc:	4b6f      	ldr	r3, [pc, #444]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02d      	beq.n	8002824 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80027c8:	4b6c      	ldr	r3, [pc, #432]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	4a6b      	ldr	r2, [pc, #428]	; (8002980 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
 80027d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027f2:	4b62      	ldr	r3, [pc, #392]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002802:	ed97 6a02 	vldr	s12, [r7, #8]
 8002806:	eddf 5a61 	vldr	s11, [pc, #388]	; 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 800280a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800280e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002822:	e087      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002990 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002836:	4b51      	ldr	r3, [pc, #324]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002846:	ed97 6a02 	vldr	s12, [r7, #8]
 800284a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 800284e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800285a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002862:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002866:	e065      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002872:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002994 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287a:	4b40      	ldr	r3, [pc, #256]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288a:	ed97 6a02 	vldr	s12, [r7, #8]
 800288e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800289a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800289e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028aa:	e043      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002998 <HAL_RCC_GetSysClockFreq+0x2f0>
 80028ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028be:	4b2f      	ldr	r3, [pc, #188]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80028d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028ee:	e021      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002994 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002912:	ed97 6a02 	vldr	s12, [r7, #8]
 8002916:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800298c <HAL_RCC_GetSysClockFreq+0x2e4>
 800291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002932:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	0a5b      	lsrs	r3, r3, #9
 800293a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800293e:	3301      	adds	r3, #1
 8002940:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	ee07 3a90 	vmov	s15, r3
 8002948:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800294c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002958:	ee17 3a90 	vmov	r3, s15
 800295c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800295e:	e005      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	61bb      	str	r3, [r7, #24]
    break;
 8002964:	e002      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002966:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002968:	61bb      	str	r3, [r7, #24]
    break;
 800296a:	bf00      	nop
  }

  return sysclockfreq;
 800296c:	69bb      	ldr	r3, [r7, #24]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3724      	adds	r7, #36	; 0x24
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	58024400 	.word	0x58024400
 8002980:	03d09000 	.word	0x03d09000
 8002984:	003d0900 	.word	0x003d0900
 8002988:	007a1200 	.word	0x007a1200
 800298c:	46000000 	.word	0x46000000
 8002990:	4c742400 	.word	0x4c742400
 8002994:	4a742400 	.word	0x4a742400
 8002998:	4af42400 	.word	0x4af42400

0800299c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80029a2:	f7ff fe81 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <HAL_RCC_GetHCLKFreq+0x50>)
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490f      	ldr	r1, [pc, #60]	; (80029f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	f003 031f 	and.w	r3, r3, #31
 80029ba:	fa22 f303 	lsr.w	r3, r2, r3
 80029be:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80029c0:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <HAL_RCC_GetHCLKFreq+0x50>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	fa22 f303 	lsr.w	r3, r2, r3
 80029d6:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80029d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029da:	4a07      	ldr	r2, [pc, #28]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80029e2:	681b      	ldr	r3, [r3, #0]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	58024400 	.word	0x58024400
 80029f0:	08007b18 	.word	0x08007b18
 80029f4:	24000054 	.word	0x24000054
 80029f8:	24000050 	.word	0x24000050

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8002a00:	f7ff ffcc 	bl	800299c <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b06      	ldr	r3, [pc, #24]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	091b      	lsrs	r3, r3, #4
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4904      	ldr	r1, [pc, #16]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	58024400 	.word	0x58024400
 8002a24:	08007b18 	.word	0x08007b18

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8002a2c:	f7ff ffb6 	bl	800299c <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4904      	ldr	r1, [pc, #16]	; (8002a50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	f003 031f 	and.w	r3, r3, #31
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	58024400 	.word	0x58024400
 8002a50:	08007b18 	.word	0x08007b18

08002a54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	223f      	movs	r2, #63	; 0x3f
 8002a62:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0207 	and.w	r2, r3, #7
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	605a      	str	r2, [r3, #4]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
#else
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE);
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE);
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE);
 8002a88:	4b11      	ldr	r3, [pc, #68]	; (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1);
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2);
 8002aa0:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_RCC_GetClockConfig+0x7c>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	61da      	str	r2, [r3, #28]
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCC_GetClockConfig+0x80>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	601a      	str	r2, [r3, #0]
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	52002000 	.word	0x52002000

08002ad8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d03f      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002af8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002afc:	d02a      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002afe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002b02:	d824      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b08:	d018      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b0e:	d81e      	bhi.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b18:	d007      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b1a:	e018      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b1c:	4ba6      	ldr	r3, [pc, #664]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	4aa5      	ldr	r2, [pc, #660]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b28:	e015      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 f99b 	bl	8003e6c <RCCEx_PLL2_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b3a:	e00c      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3324      	adds	r3, #36	; 0x24
 8002b40:	2102      	movs	r1, #2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f001 fa44 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002b4c:	e003      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
      break;
 8002b52:	e000      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b5c:	4b96      	ldr	r3, [pc, #600]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b68:	4993      	ldr	r1, [pc, #588]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	650b      	str	r3, [r1, #80]	; 0x50
 8002b6e:	e001      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d03d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d826      	bhi.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002b88:	a201      	add	r2, pc, #4	; (adr r2, 8002b90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8e:	bf00      	nop
 8002b90:	08002ba5 	.word	0x08002ba5
 8002b94:	08002bb3 	.word	0x08002bb3
 8002b98:	08002bc5 	.word	0x08002bc5
 8002b9c:	08002bdd 	.word	0x08002bdd
 8002ba0:	08002bdd 	.word	0x08002bdd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba4:	4b84      	ldr	r3, [pc, #528]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	4a83      	ldr	r2, [pc, #524]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bb0:	e015      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f001 f957 	bl	8003e6c <RCCEx_PLL2_Config>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bc2:	e00c      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3324      	adds	r3, #36	; 0x24
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f001 fa00 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bd4:	e003      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bda:	e000      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002bdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002be4:	4b74      	ldr	r3, [pc, #464]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002be6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be8:	f023 0207 	bic.w	r2, r3, #7
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf0:	4971      	ldr	r1, [pc, #452]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	650b      	str	r3, [r1, #80]	; 0x50
 8002bf6:	e001      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d04a      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c10:	d031      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8002c12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c16:	d82b      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002c18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1c:	d02d      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c22:	d825      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002c24:	2bc0      	cmp	r3, #192	; 0xc0
 8002c26:	d02a      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c28:	2bc0      	cmp	r3, #192	; 0xc0
 8002c2a:	d821      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002c2c:	2b80      	cmp	r3, #128	; 0x80
 8002c2e:	d016      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002c30:	2b80      	cmp	r3, #128	; 0x80
 8002c32:	d81d      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d007      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002c3c:	e018      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c3e:	4b5e      	ldr	r3, [pc, #376]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c42:	4a5d      	ldr	r2, [pc, #372]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002c4a:	e019      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3304      	adds	r3, #4
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 f90a 	bl	8003e6c <RCCEx_PLL2_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002c5c:	e010      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3324      	adds	r3, #36	; 0x24
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f001 f9b3 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 8002c6e:	e007      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	75fb      	strb	r3, [r7, #23]
      break;
 8002c74:	e004      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002c76:	bf00      	nop
 8002c78:	e002      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e000      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8002c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8002c86:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	4949      	ldr	r1, [pc, #292]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	650b      	str	r3, [r1, #80]	; 0x50
 8002c98:	e001      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d04f      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cae:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002cb2:	d036      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8002cb4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002cb8:	d830      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cbe:	d032      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8002cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc4:	d82a      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002cc6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002cca:	d02e      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x252>
 8002ccc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002cd0:	d824      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd6:	d018      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x232>
 8002cd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cdc:	d81e      	bhi.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x212>
 8002ce2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce6:	d007      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 8002ce8:	e018      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cea:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	4a32      	ldr	r2, [pc, #200]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002cf6:	e019      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 f8b4 	bl	8003e6c <RCCEx_PLL2_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002d08:	e010      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3324      	adds	r3, #36	; 0x24
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 f95d 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 8002d1a:	e007      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002d20:	e004      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002d22:	bf00      	nop
 8002d24:	e002      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8002d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8002d32:	4b21      	ldr	r3, [pc, #132]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d36:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3e:	491e      	ldr	r1, [pc, #120]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	650b      	str	r3, [r1, #80]	; 0x50
 8002d44:	e001      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d46:	7dfb      	ldrb	r3, [r7, #23]
 8002d48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d034      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	2b30      	cmp	r3, #48	; 0x30
 8002d5c:	d01c      	beq.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 8002d5e:	2b30      	cmp	r3, #48	; 0x30
 8002d60:	d817      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d00c      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d813      	bhi.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d016      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 8002d6e:	2b10      	cmp	r3, #16
 8002d70:	d10f      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	4a10      	ldr	r2, [pc, #64]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002d7e:	e00e      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	2102      	movs	r1, #2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 f870 	bl	8003e6c <RCCEx_PLL2_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8002d90:	e005      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	75fb      	strb	r3, [r7, #23]
      break;
 8002d96:	e002      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002d98:	bf00      	nop
 8002d9a:	e000      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8002d9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d9e:	7dfb      	ldrb	r3, [r7, #23]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	4901      	ldr	r1, [pc, #4]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002db6:	e003      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8002db8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d047      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dd4:	d030      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dda:	d82a      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002ddc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002de0:	d02c      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8002de2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002de6:	d824      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dec:	d018      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df2:	d81e      	bhi.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfc:	d007      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002dfe:	e018      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e00:	4bb0      	ldr	r3, [pc, #704]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	4aaf      	ldr	r2, [pc, #700]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e0c:	e017      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 f829 	bl	8003e6c <RCCEx_PLL2_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e1e:	e00e      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3324      	adds	r3, #36	; 0x24
 8002e24:	2100      	movs	r1, #0
 8002e26:	4618      	mov	r0, r3
 8002e28:	f001 f8d2 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002e30:	e005      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002e38:	bf00      	nop
 8002e3a:	e000      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8002e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002e44:	4b9f      	ldr	r3, [pc, #636]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e48:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	499c      	ldr	r1, [pc, #624]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	650b      	str	r3, [r1, #80]	; 0x50
 8002e56:	e001      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e58:	7dfb      	ldrb	r3, [r7, #23]
 8002e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d049      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e70:	d02e      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002e72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e76:	d828      	bhi.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002e78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e7c:	d02a      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8002e7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e82:	d822      	bhi.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002e84:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e88:	d026      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002e8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e8e:	d81c      	bhi.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e94:	d010      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002e96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e9a:	d816      	bhi.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d01d      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d111      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2101      	movs	r1, #1
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 ffdd 	bl	8003e6c <RCCEx_PLL2_Config>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002eb6:	e012      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3324      	adds	r3, #36	; 0x24
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f001 f886 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002ec8:	e009      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ece:	e006      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002ed0:	bf00      	nop
 8002ed2:	e004      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002ed4:	bf00      	nop
 8002ed6:	e002      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002ed8:	bf00      	nop
 8002eda:	e000      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 8002edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ede:	7dfb      	ldrb	r3, [r7, #23]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002ee4:	4b77      	ldr	r3, [pc, #476]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ef0:	4974      	ldr	r1, [pc, #464]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	650b      	str	r3, [r1, #80]	; 0x50
 8002ef6:	e001      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef8:	7dfb      	ldrb	r3, [r7, #23]
 8002efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d053      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f0e:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002f12:	d034      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f14:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8002f18:	d82e      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f1e:	d030      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8002f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f24:	d828      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2a:	d02c      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d822      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f36:	d028      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002f38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f3c:	d81c      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f42:	d010      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8002f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f48:	d816      	bhi.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d01f      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8002f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f52:	d111      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3304      	adds	r3, #4
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 ff86 	bl	8003e6c <RCCEx_PLL2_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002f64:	e014      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3324      	adds	r3, #36	; 0x24
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 f82f 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002f72:	4603      	mov	r3, r0
 8002f74:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002f76:	e00b      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f7c:	e008      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002f7e:	bf00      	nop
 8002f80:	e006      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002f82:	bf00      	nop
 8002f84:	e004      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002f86:	bf00      	nop
 8002f88:	e002      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e000      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8002f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002f96:	4b4b      	ldr	r3, [pc, #300]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002fa4:	4947      	ldr	r1, [pc, #284]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8002faa:	e001      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02f      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc4:	d00e      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fca:	d814      	bhi.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002fd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	4a3a      	ldr	r2, [pc, #232]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002fe2:	e00c      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	2101      	movs	r1, #1
 8002fea:	4618      	mov	r0, r3
 8002fec:	f000 ff3e 	bl	8003e6c <RCCEx_PLL2_Config>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ff4:	e003      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8002ffa:	e000      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8002ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ffe:	7dfb      	ldrb	r3, [r7, #23]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003004:	4b2f      	ldr	r3, [pc, #188]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003008:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003010:	492c      	ldr	r1, [pc, #176]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003012:	4313      	orrs	r3, r2
 8003014:	650b      	str	r3, [r1, #80]	; 0x50
 8003016:	e001      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d032      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	2b03      	cmp	r3, #3
 800302e:	d81b      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8003030:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	0800306f 	.word	0x0800306f
 800303c:	08003049 	.word	0x08003049
 8003040:	08003057 	.word	0x08003057
 8003044:	0800306f 	.word	0x0800306f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003048:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800304e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003052:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003054:	e00c      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3304      	adds	r3, #4
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f000 ff05 	bl	8003e6c <RCCEx_PLL2_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003066:	e003      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	75fb      	strb	r3, [r7, #23]
      break;
 800306c:	e000      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 800306e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	f023 0203 	bic.w	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	4910      	ldr	r1, [pc, #64]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8003084:	4313      	orrs	r3, r2
 8003086:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003088:	e001      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800308a:	7dfb      	ldrb	r3, [r7, #23]
 800308c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 808a 	beq.w	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800309c:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fa00 	bl	80014ac <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ae:	e00d      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b0:	f7fe f9fc 	bl	80014ac <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d906      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	75fb      	strb	r3, [r7, #23]
        break;
 80030c2:	e009      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 80030c4:	58024400 	.word	0x58024400
 80030c8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030cc:	4bba      	ldr	r3, [pc, #744]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0eb      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d166      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030de:	4bb7      	ldr	r3, [pc, #732]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80030e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030e8:	4053      	eors	r3, r2
 80030ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d013      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f2:	4bb2      	ldr	r3, [pc, #712]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030fc:	4baf      	ldr	r3, [pc, #700]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4aae      	ldr	r2, [pc, #696]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003108:	4bac      	ldr	r3, [pc, #688]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800310a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310c:	4aab      	ldr	r2, [pc, #684]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800310e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003112:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003114:	4aa9      	ldr	r2, [pc, #676]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003124:	d115      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7fe f9c1 	bl	80014ac <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800312c:	e00b      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312e:	f7fe f9bd 	bl	80014ac <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	f241 3288 	movw	r2, #5000	; 0x1388
 800313c:	4293      	cmp	r3, r2
 800313e:	d902      	bls.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	75fb      	strb	r3, [r7, #23]
            break;
 8003144:	e005      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003146:	4b9d      	ldr	r3, [pc, #628]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ed      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d126      	bne.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800315e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003162:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003166:	d10d      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8003168:	4b94      	ldr	r3, [pc, #592]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003176:	0919      	lsrs	r1, r3, #4
 8003178:	4b91      	ldr	r3, [pc, #580]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800317a:	400b      	ands	r3, r1
 800317c:	498f      	ldr	r1, [pc, #572]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	610b      	str	r3, [r1, #16]
 8003182:	e005      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8003184:	4b8d      	ldr	r3, [pc, #564]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	4a8c      	ldr	r2, [pc, #560]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800318a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800318e:	6113      	str	r3, [r2, #16]
 8003190:	4b8a      	ldr	r3, [pc, #552]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003192:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800319a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319e:	4987      	ldr	r1, [pc, #540]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	670b      	str	r3, [r1, #112]	; 0x70
 80031a4:	e004      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	75bb      	strb	r3, [r7, #22]
 80031aa:	e001      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7dfb      	ldrb	r3, [r7, #23]
 80031ae:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d07f      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c2:	2b28      	cmp	r3, #40	; 0x28
 80031c4:	d866      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	0800329b 	.word	0x0800329b
 80031d0:	08003295 	.word	0x08003295
 80031d4:	08003295 	.word	0x08003295
 80031d8:	08003295 	.word	0x08003295
 80031dc:	08003295 	.word	0x08003295
 80031e0:	08003295 	.word	0x08003295
 80031e4:	08003295 	.word	0x08003295
 80031e8:	08003295 	.word	0x08003295
 80031ec:	08003271 	.word	0x08003271
 80031f0:	08003295 	.word	0x08003295
 80031f4:	08003295 	.word	0x08003295
 80031f8:	08003295 	.word	0x08003295
 80031fc:	08003295 	.word	0x08003295
 8003200:	08003295 	.word	0x08003295
 8003204:	08003295 	.word	0x08003295
 8003208:	08003295 	.word	0x08003295
 800320c:	08003283 	.word	0x08003283
 8003210:	08003295 	.word	0x08003295
 8003214:	08003295 	.word	0x08003295
 8003218:	08003295 	.word	0x08003295
 800321c:	08003295 	.word	0x08003295
 8003220:	08003295 	.word	0x08003295
 8003224:	08003295 	.word	0x08003295
 8003228:	08003295 	.word	0x08003295
 800322c:	0800329b 	.word	0x0800329b
 8003230:	08003295 	.word	0x08003295
 8003234:	08003295 	.word	0x08003295
 8003238:	08003295 	.word	0x08003295
 800323c:	08003295 	.word	0x08003295
 8003240:	08003295 	.word	0x08003295
 8003244:	08003295 	.word	0x08003295
 8003248:	08003295 	.word	0x08003295
 800324c:	0800329b 	.word	0x0800329b
 8003250:	08003295 	.word	0x08003295
 8003254:	08003295 	.word	0x08003295
 8003258:	08003295 	.word	0x08003295
 800325c:	08003295 	.word	0x08003295
 8003260:	08003295 	.word	0x08003295
 8003264:	08003295 	.word	0x08003295
 8003268:	08003295 	.word	0x08003295
 800326c:	0800329b 	.word	0x0800329b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3304      	adds	r3, #4
 8003274:	2101      	movs	r1, #1
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fdf8 	bl	8003e6c <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003280:	e00c      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3324      	adds	r3, #36	; 0x24
 8003286:	2101      	movs	r1, #1
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fea1 	bl	8003fd0 <RCCEx_PLL3_Config>
 800328e:	4603      	mov	r3, r0
 8003290:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003292:	e003      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	75fb      	strb	r3, [r7, #23]
      break;
 8003298:	e000      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800329a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800329c:	7dfb      	ldrb	r3, [r7, #23]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10a      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80032a2:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b0:	4942      	ldr	r1, [pc, #264]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	654b      	str	r3, [r1, #84]	; 0x54
 80032b6:	e001      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d038      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d821      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80032d0:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	0800331b 	.word	0x0800331b
 80032dc:	080032f1 	.word	0x080032f1
 80032e0:	08003303 	.word	0x08003303
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	2101      	movs	r1, #1
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fdb8 	bl	8003e6c <RCCEx_PLL2_Config>
 80032fc:	4603      	mov	r3, r0
 80032fe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003300:	e00c      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3324      	adds	r3, #36	; 0x24
 8003306:	2101      	movs	r1, #1
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fe61 	bl	8003fd0 <RCCEx_PLL3_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
      break;
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800331a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003322:	4b26      	ldr	r3, [pc, #152]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003326:	f023 0207 	bic.w	r2, r3, #7
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332e:	4923      	ldr	r1, [pc, #140]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8003330:	4313      	orrs	r3, r2
 8003332:	654b      	str	r3, [r1, #84]	; 0x54
 8003334:	e001      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d040      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800334c:	2b05      	cmp	r3, #5
 800334e:	d821      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003350:	a201      	add	r2, pc, #4	; (adr r2, 8003358 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8003352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003356:	bf00      	nop
 8003358:	0800339b 	.word	0x0800339b
 800335c:	08003371 	.word	0x08003371
 8003360:	08003383 	.word	0x08003383
 8003364:	0800339b 	.word	0x0800339b
 8003368:	0800339b 	.word	0x0800339b
 800336c:	0800339b 	.word	0x0800339b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	2101      	movs	r1, #1
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fd78 	bl	8003e6c <RCCEx_PLL2_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003380:	e00c      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3324      	adds	r3, #36	; 0x24
 8003386:	2101      	movs	r1, #1
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fe21 	bl	8003fd0 <RCCEx_PLL3_Config>
 800338e:	4603      	mov	r3, r0
 8003390:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003392:	e003      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	75fb      	strb	r3, [r7, #23]
      break;
 8003398:	e000      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800339a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339c:	7dfb      	ldrb	r3, [r7, #23]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d110      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	f023 0207 	bic.w	r2, r3, #7
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033b0:	4902      	ldr	r1, [pc, #8]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	658b      	str	r3, [r1, #88]	; 0x58
 80033b6:	e007      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80033b8:	58024800 	.word	0x58024800
 80033bc:	58024400 	.word	0x58024400
 80033c0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0320 	and.w	r3, r3, #32
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d04b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033de:	d02e      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x966>
 80033e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033e4:	d828      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80033e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ea:	d02a      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d822      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80033f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033f6:	d026      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80033f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80033fc:	d81c      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80033fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003402:	d010      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8003404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003408:	d816      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01d      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x972>
 800340e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003412:	d111      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3304      	adds	r3, #4
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fd26 	bl	8003e6c <RCCEx_PLL2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003424:	e012      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3324      	adds	r3, #36	; 0x24
 800342a:	2102      	movs	r1, #2
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fdcf 	bl	8003fd0 <RCCEx_PLL3_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003436:	e009      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	75fb      	strb	r3, [r7, #23]
      break;
 800343c:	e006      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800343e:	bf00      	nop
 8003440:	e004      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003442:	bf00      	nop
 8003444:	e002      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8003446:	bf00      	nop
 8003448:	e000      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800344a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003452:	4bb3      	ldr	r3, [pc, #716]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003456:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003460:	49af      	ldr	r1, [pc, #700]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003462:	4313      	orrs	r3, r2
 8003464:	654b      	str	r3, [r1, #84]	; 0x54
 8003466:	e001      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d04b      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800347e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003482:	d02e      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8003484:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003488:	d828      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800348a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348e:	d02a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d822      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8003496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800349a:	d026      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800349c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a0:	d81c      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80034a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a6:	d010      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80034a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ac:	d816      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d01d      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d111      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fcd4 	bl	8003e6c <RCCEx_PLL2_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80034c8:	e012      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	3324      	adds	r3, #36	; 0x24
 80034ce:	2102      	movs	r1, #2
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fd7d 	bl	8003fd0 <RCCEx_PLL3_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80034da:	e009      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	75fb      	strb	r3, [r7, #23]
      break;
 80034e0:	e006      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80034e2:	bf00      	nop
 80034e4:	e004      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80034e6:	bf00      	nop
 80034e8:	e002      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80034ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10a      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034f6:	4b8a      	ldr	r3, [pc, #552]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80034f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003504:	4986      	ldr	r1, [pc, #536]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003506:	4313      	orrs	r3, r2
 8003508:	658b      	str	r3, [r1, #88]	; 0x58
 800350a:	e001      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350c:	7dfb      	ldrb	r3, [r7, #23]
 800350e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b00      	cmp	r3, #0
 800351a:	d04b      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003522:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003526:	d02e      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003528:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800352c:	d828      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800352e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003532:	d02a      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003538:	d822      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800353a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800353e:	d026      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8003540:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003544:	d81c      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800354a:	d010      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800354c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003550:	d816      	bhi.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01d      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8003556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355a:	d111      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fc82 	bl	8003e6c <RCCEx_PLL2_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800356c:	e012      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	3324      	adds	r3, #36	; 0x24
 8003572:	2102      	movs	r1, #2
 8003574:	4618      	mov	r0, r3
 8003576:	f000 fd2b 	bl	8003fd0 <RCCEx_PLL3_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800357e:	e009      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	75fb      	strb	r3, [r7, #23]
      break;
 8003584:	e006      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003586:	bf00      	nop
 8003588:	e004      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800358a:	bf00      	nop
 800358c:	e002      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8003592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003594:	7dfb      	ldrb	r3, [r7, #23]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10a      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800359a:	4b61      	ldr	r3, [pc, #388]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035a8:	495d      	ldr	r1, [pc, #372]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	658b      	str	r3, [r1, #88]	; 0x58
 80035ae:	e001      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01a      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ca:	d10a      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3324      	adds	r3, #36	; 0x24
 80035d0:	2102      	movs	r1, #2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fcfc 	bl	8003fd0 <RCCEx_PLL3_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035e2:	4b4f      	ldr	r3, [pc, #316]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	494b      	ldr	r1, [pc, #300]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360c:	d10a      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3324      	adds	r3, #36	; 0x24
 8003612:	2102      	movs	r1, #2
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fcdb 	bl	8003fd0 <RCCEx_PLL3_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003624:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003632:	493b      	ldr	r1, [pc, #236]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003634:	4313      	orrs	r3, r2
 8003636:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d034      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800364a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800364e:	d01d      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8003650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003654:	d817      	bhi.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800365a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365e:	d009      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8003660:	e011      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	2100      	movs	r1, #0
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fbff 	bl	8003e6c <RCCEx_PLL2_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003672:	e00c      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3324      	adds	r3, #36	; 0x24
 8003678:	2102      	movs	r1, #2
 800367a:	4618      	mov	r0, r3
 800367c:	f000 fca8 	bl	8003fd0 <RCCEx_PLL3_Config>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003684:	e003      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
      break;
 800368a:	e000      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800368c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10a      	bne.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003694:	4b22      	ldr	r3, [pc, #136]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036a2:	491f      	ldr	r1, [pc, #124]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	658b      	str	r3, [r1, #88]	; 0x58
 80036a8:	e001      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d036      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036c4:	d01c      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80036c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036ca:	d816      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80036cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036d0:	d003      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80036d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036d6:	d007      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80036d8:	e00f      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036da:	4b11      	ldr	r3, [pc, #68]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036de:	4a10      	ldr	r2, [pc, #64]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80036e6:	e00c      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3324      	adds	r3, #36	; 0x24
 80036ec:	2101      	movs	r1, #1
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fc6e 	bl	8003fd0 <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80036f8:	e003      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
      break;
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003702:	7dfb      	ldrb	r3, [r7, #23]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800370a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003716:	4902      	ldr	r1, [pc, #8]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8003718:	4313      	orrs	r3, r2
 800371a:	654b      	str	r3, [r1, #84]	; 0x54
 800371c:	e004      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800371e:	bf00      	nop
 8003720:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d029      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800373c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003740:	d007      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8003742:	e00f      	b.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003744:	4b69      	ldr	r3, [pc, #420]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4a68      	ldr	r2, [pc, #416]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800374a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800374e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003750:	e00b      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3304      	adds	r3, #4
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fb87 	bl	8003e6c <RCCEx_PLL2_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003762:	e002      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
      break;
 8003768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d109      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003770:	4b5e      	ldr	r3, [pc, #376]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377c:	495b      	ldr	r1, [pc, #364]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800377e:	4313      	orrs	r3, r2
 8003780:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003782:	e001      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003784:	7dfb      	ldrb	r3, [r7, #23]
 8003786:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3324      	adds	r3, #36	; 0x24
 8003798:	2102      	movs	r1, #2
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fc18 	bl	8003fd0 <RCCEx_PLL3_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d032      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c0:	d017      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80037c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037c6:	d811      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80037c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037cc:	d013      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80037ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d2:	d80b      	bhi.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d010      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80037d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037dc:	d106      	bne.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037de:	4b43      	ldr	r3, [pc, #268]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	4a42      	ldr	r2, [pc, #264]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80037e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80037ea:	e007      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	75fb      	strb	r3, [r7, #23]
      break;
 80037f0:	e004      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80037fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003802:	4b3a      	ldr	r3, [pc, #232]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003806:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003810:	4936      	ldr	r1, [pc, #216]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003812:	4313      	orrs	r3, r2
 8003814:	654b      	str	r3, [r1, #84]	; 0x54
 8003816:	e001      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	7dfb      	ldrb	r3, [r7, #23]
 800381a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003828:	4b30      	ldr	r3, [pc, #192]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003834:	492d      	ldr	r1, [pc, #180]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003836:	4313      	orrs	r3, r2
 8003838:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003846:	4b29      	ldr	r3, [pc, #164]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003852:	4926      	ldr	r1, [pc, #152]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003854:	4313      	orrs	r3, r2
 8003856:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003860:	2b00      	cmp	r3, #0
 8003862:	d008      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	491e      	ldr	r1, [pc, #120]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003872:	4313      	orrs	r3, r2
 8003874:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00d      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003882:	4b1a      	ldr	r3, [pc, #104]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	4a19      	ldr	r2, [pc, #100]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003888:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800388c:	6113      	str	r3, [r2, #16]
 800388e:	4b17      	ldr	r3, [pc, #92]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003898:	4914      	ldr	r1, [pc, #80]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800389a:	4313      	orrs	r3, r2
 800389c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	da08      	bge.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80038a6:	4b11      	ldr	r3, [pc, #68]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b2:	490e      	ldr	r1, [pc, #56]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80038b4:	4313      	orrs	r3, r2
 80038b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	4906      	ldr	r1, [pc, #24]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80038d8:	7dbb      	ldrb	r3, [r7, #22]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	e000      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	58024400 	.word	0x58024400

080038f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 80038f4:	f7ff f852 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4904      	ldr	r1, [pc, #16]	; (8003918 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	58024400 	.word	0x58024400
 8003918:	08007b18 	.word	0x08007b18

0800391c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	; 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003924:	4ba1      	ldr	r3, [pc, #644]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800392e:	4b9f      	ldr	r3, [pc, #636]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	0b1b      	lsrs	r3, r3, #12
 8003934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003938:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800393a:	4b9c      	ldr	r3, [pc, #624]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003946:	4b99      	ldr	r3, [pc, #612]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8111 	beq.w	8003b8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b02      	cmp	r3, #2
 800396e:	f000 8083 	beq.w	8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b02      	cmp	r3, #2
 8003976:	f200 80a1 	bhi.w	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d056      	beq.n	8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003986:	e099      	b.n	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003988:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d02d      	beq.n	80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003994:	4b85      	ldr	r3, [pc, #532]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	4a84      	ldr	r2, [pc, #528]	; (8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
 80039a4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039be:	4b7b      	ldr	r3, [pc, #492]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80039d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80039ee:	e087      	b.n	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a02:	4b6a      	ldr	r3, [pc, #424]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a32:	e065      	b.n	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a46:	4b59      	ldr	r3, [pc, #356]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a76:	e043      	b.n	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8a:	4b48      	ldr	r3, [pc, #288]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aba:	e021      	b.n	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ae2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003afe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003b00:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	0a5b      	lsrs	r3, r3, #9
 8003b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b26:	ee17 2a90 	vmov	r2, s15
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b54:	ee17 2a90 	vmov	r2, s15
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	0e1b      	lsrs	r3, r3, #24
 8003b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b82:	ee17 2a90 	vmov	r2, s15
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b8a:	e008      	b.n	8003b9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
}
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	; 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	03d09000 	.word	0x03d09000
 8003bb4:	46000000 	.word	0x46000000
 8003bb8:	4c742400 	.word	0x4c742400
 8003bbc:	4a742400 	.word	0x4a742400
 8003bc0:	4af42400 	.word	0x4af42400

08003bc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	; 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bcc:	4ba1      	ldr	r3, [pc, #644]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003bd6:	4b9f      	ldr	r3, [pc, #636]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	0d1b      	lsrs	r3, r3, #20
 8003bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003be2:	4b9c      	ldr	r3, [pc, #624]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003bee:	4b99      	ldr	r3, [pc, #612]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	08db      	lsrs	r3, r3, #3
 8003bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8111 	beq.w	8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	f000 8083 	beq.w	8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	f200 80a1 	bhi.w	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d056      	beq.n	8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003c2e:	e099      	b.n	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c30:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02d      	beq.n	8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c3c:	4b85      	ldr	r3, [pc, #532]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	4a84      	ldr	r2, [pc, #528]	; (8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c66:	4b7b      	ldr	r3, [pc, #492]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003c96:	e087      	b.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003caa:	4b6a      	ldr	r3, [pc, #424]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cda:	e065      	b.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d1e:	e043      	b.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d32:	4b48      	ldr	r3, [pc, #288]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003d62:	e021      	b.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003da6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003da8:	4b2a      	ldr	r3, [pc, #168]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	0a5b      	lsrs	r3, r3, #9
 8003dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dce:	ee17 2a90 	vmov	r2, s15
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003dd6:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de0:	ee07 3a90 	vmov	s15, r3
 8003de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dfc:	ee17 2a90 	vmov	r2, s15
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003e04:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e08:	0e1b      	lsrs	r3, r3, #24
 8003e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e2a:	ee17 2a90 	vmov	r2, s15
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e32:	e008      	b.n	8003e46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
}
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	58024400 	.word	0x58024400
 8003e58:	03d09000 	.word	0x03d09000
 8003e5c:	46000000 	.word	0x46000000
 8003e60:	4c742400 	.word	0x4c742400
 8003e64:	4a742400 	.word	0x4a742400
 8003e68:	4af42400 	.word	0x4af42400

08003e6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e7a:	4b53      	ldr	r3, [pc, #332]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d101      	bne.n	8003e8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e099      	b.n	8003fbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e8a:	4b4f      	ldr	r3, [pc, #316]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a4e      	ldr	r2, [pc, #312]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003e90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e96:	f7fd fb09 	bl	80014ac <HAL_GetTick>
 8003e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e9e:	f7fd fb05 	bl	80014ac <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e086      	b.n	8003fbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003eb0:	4b45      	ldr	r3, [pc, #276]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ebc:	4b42      	ldr	r3, [pc, #264]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	493f      	ldr	r1, [pc, #252]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	628b      	str	r3, [r1, #40]	; 0x28
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	025b      	lsls	r3, r3, #9
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f00:	4931      	ldr	r1, [pc, #196]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f06:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	492d      	ldr	r1, [pc, #180]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f18:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	f023 0220 	bic.w	r2, r3, #32
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4928      	ldr	r1, [pc, #160]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f2a:	4b27      	ldr	r3, [pc, #156]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	4a26      	ldr	r2, [pc, #152]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f30:	f023 0310 	bic.w	r3, r3, #16
 8003f34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f36:	4b24      	ldr	r3, [pc, #144]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f3a:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <RCCEx_PLL2_Config+0x160>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	69d2      	ldr	r2, [r2, #28]
 8003f42:	00d2      	lsls	r2, r2, #3
 8003f44:	4920      	ldr	r1, [pc, #128]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f4a:	4b1f      	ldr	r3, [pc, #124]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	4a1e      	ldr	r2, [pc, #120]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f50:	f043 0310 	orr.w	r3, r3, #16
 8003f54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f5c:	4b1a      	ldr	r3, [pc, #104]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	4a19      	ldr	r2, [pc, #100]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f68:	e00f      	b.n	8003f8a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d106      	bne.n	8003f7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f70:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f7c:	e005      	b.n	8003f8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f82:	4a11      	ldr	r2, [pc, #68]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f88:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f96:	f7fd fa89 	bl	80014ac <HAL_GetTick>
 8003f9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f9c:	e008      	b.n	8003fb0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f9e:	f7fd fa85 	bl	80014ac <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e006      	b.n	8003fbe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	ffff0007 	.word	0xffff0007

08003fd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fde:	4b53      	ldr	r3, [pc, #332]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d101      	bne.n	8003fee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e099      	b.n	8004122 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fee:	4b4f      	ldr	r3, [pc, #316]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a4e      	ldr	r2, [pc, #312]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffa:	f7fd fa57 	bl	80014ac <HAL_GetTick>
 8003ffe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004000:	e008      	b.n	8004014 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004002:	f7fd fa53 	bl	80014ac <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e086      	b.n	8004122 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004014:	4b45      	ldr	r3, [pc, #276]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004020:	4b42      	ldr	r3, [pc, #264]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	051b      	lsls	r3, r3, #20
 800402e:	493f      	ldr	r1, [pc, #252]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	628b      	str	r3, [r1, #40]	; 0x28
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	3b01      	subs	r3, #1
 800403a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	3b01      	subs	r3, #1
 8004044:	025b      	lsls	r3, r3, #9
 8004046:	b29b      	uxth	r3, r3
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	3b01      	subs	r3, #1
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	3b01      	subs	r3, #1
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004064:	4931      	ldr	r1, [pc, #196]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800406a:	4b30      	ldr	r3, [pc, #192]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	492d      	ldr	r1, [pc, #180]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 800407e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004080:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	4928      	ldr	r1, [pc, #160]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 800408a:	4313      	orrs	r3, r2
 800408c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800408e:	4b27      	ldr	r3, [pc, #156]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	4a26      	ldr	r2, [pc, #152]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8004094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004098:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 800409c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <RCCEx_PLL3_Config+0x160>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	69d2      	ldr	r2, [r2, #28]
 80040a6:	00d2      	lsls	r2, r2, #3
 80040a8:	4920      	ldr	r1, [pc, #128]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80040ae:	4b1f      	ldr	r3, [pc, #124]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b2:	4a1e      	ldr	r2, [pc, #120]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040cc:	e00f      	b.n	80040ee <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d106      	bne.n	80040e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040d4:	4b15      	ldr	r3, [pc, #84]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040e0:	e005      	b.n	80040ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e6:	4a11      	ldr	r2, [pc, #68]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040ee:	4b0f      	ldr	r3, [pc, #60]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a0e      	ldr	r2, [pc, #56]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fa:	f7fd f9d7 	bl	80014ac <HAL_GetTick>
 80040fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004100:	e008      	b.n	8004114 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004102:	f7fd f9d3 	bl	80014ac <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e006      	b.n	8004122 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <RCCEx_PLL3_Config+0x15c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400
 8004130:	ffff0007 	.word	0xffff0007

08004134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e049      	b.n	80041da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f841 	bl	80041e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f000 fa00 	bl	8004578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
	...

080041f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e054      	b.n	80042ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f042 0201 	orr.w	r2, r2, #1
 8004226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d022      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d01d      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a22      	ldr	r2, [pc, #136]	; (80042cc <HAL_TIM_Base_Start_IT+0xd4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d018      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a21      	ldr	r2, [pc, #132]	; (80042d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1f      	ldr	r2, [pc, #124]	; (80042d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00e      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d009      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1c      	ldr	r2, [pc, #112]	; (80042dc <HAL_TIM_Base_Start_IT+0xe4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d004      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x80>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1b      	ldr	r2, [pc, #108]	; (80042e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d115      	bne.n	80042a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <HAL_TIM_Base_Start_IT+0xec>)
 8004280:	4013      	ands	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2b06      	cmp	r3, #6
 8004288:	d015      	beq.n	80042b6 <HAL_TIM_Base_Start_IT+0xbe>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d011      	beq.n	80042b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0201 	orr.w	r2, r2, #1
 80042a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a2:	e008      	b.n	80042b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e000      	b.n	80042b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40010400 	.word	0x40010400
 80042dc:	40001800 	.word	0x40001800
 80042e0:	40014000 	.word	0x40014000
 80042e4:	00010007 	.word	0x00010007

080042e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0202 	mvn.w	r2, #2
 8004314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2201      	movs	r2, #1
 800431a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f003 0303 	and.w	r3, r3, #3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f905 	bl	800453a <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f8f7 	bl	8004526 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 f908 	bl	800454e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b04      	cmp	r3, #4
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0204 	mvn.w	r2, #4
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2202      	movs	r2, #2
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f8db 	bl	800453a <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8cd 	bl	8004526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f8de 	bl	800454e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0208 	mvn.w	r2, #8
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2204      	movs	r2, #4
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f8b1 	bl	800453a <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f8a3 	bl	8004526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8b4 	bl	800454e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d122      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b10      	cmp	r3, #16
 8004406:	d11b      	bne.n	8004440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0210 	mvn.w	r2, #16
 8004410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2208      	movs	r2, #8
 8004416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f887 	bl	800453a <HAL_TIM_IC_CaptureCallback>
 800442c:	e005      	b.n	800443a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f879 	bl	8004526 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f88a 	bl	800454e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10e      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d107      	bne.n	800446c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f06f 0201 	mvn.w	r2, #1
 8004464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fc fe02 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004476:	2b80      	cmp	r3, #128	; 0x80
 8004478:	d10e      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004484:	2b80      	cmp	r3, #128	; 0x80
 8004486:	d107      	bne.n	8004498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f914 	bl	80046c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044a6:	d10e      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b80      	cmp	r3, #128	; 0x80
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f907 	bl	80046d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d0:	2b40      	cmp	r3, #64	; 0x40
 80044d2:	d10e      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f838 	bl	8004562 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d10e      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d107      	bne.n	800451e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0220 	mvn.w	r2, #32
 8004516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f8c7 	bl	80046ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800453a:	b480      	push	{r7}
 800453c:	b083      	sub	sp, #12
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a40      	ldr	r2, [pc, #256]	; (800468c <TIM_Base_SetConfig+0x114>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d013      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004596:	d00f      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a3d      	ldr	r2, [pc, #244]	; (8004690 <TIM_Base_SetConfig+0x118>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00b      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a3c      	ldr	r2, [pc, #240]	; (8004694 <TIM_Base_SetConfig+0x11c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a3b      	ldr	r2, [pc, #236]	; (8004698 <TIM_Base_SetConfig+0x120>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_Base_SetConfig+0x40>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a3a      	ldr	r2, [pc, #232]	; (800469c <TIM_Base_SetConfig+0x124>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d108      	bne.n	80045ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a2f      	ldr	r2, [pc, #188]	; (800468c <TIM_Base_SetConfig+0x114>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01f      	beq.n	8004612 <TIM_Base_SetConfig+0x9a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d8:	d01b      	beq.n	8004612 <TIM_Base_SetConfig+0x9a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a2c      	ldr	r2, [pc, #176]	; (8004690 <TIM_Base_SetConfig+0x118>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d017      	beq.n	8004612 <TIM_Base_SetConfig+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a2b      	ldr	r2, [pc, #172]	; (8004694 <TIM_Base_SetConfig+0x11c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d013      	beq.n	8004612 <TIM_Base_SetConfig+0x9a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2a      	ldr	r2, [pc, #168]	; (8004698 <TIM_Base_SetConfig+0x120>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00f      	beq.n	8004612 <TIM_Base_SetConfig+0x9a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a29      	ldr	r2, [pc, #164]	; (800469c <TIM_Base_SetConfig+0x124>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00b      	beq.n	8004612 <TIM_Base_SetConfig+0x9a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a28      	ldr	r2, [pc, #160]	; (80046a0 <TIM_Base_SetConfig+0x128>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d007      	beq.n	8004612 <TIM_Base_SetConfig+0x9a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a27      	ldr	r2, [pc, #156]	; (80046a4 <TIM_Base_SetConfig+0x12c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d003      	beq.n	8004612 <TIM_Base_SetConfig+0x9a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <TIM_Base_SetConfig+0x130>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d108      	bne.n	8004624 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004618:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a10      	ldr	r2, [pc, #64]	; (800468c <TIM_Base_SetConfig+0x114>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d00f      	beq.n	8004670 <TIM_Base_SetConfig+0xf8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <TIM_Base_SetConfig+0x124>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00b      	beq.n	8004670 <TIM_Base_SetConfig+0xf8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <TIM_Base_SetConfig+0x128>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <TIM_Base_SetConfig+0xf8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a10      	ldr	r2, [pc, #64]	; (80046a4 <TIM_Base_SetConfig+0x12c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d003      	beq.n	8004670 <TIM_Base_SetConfig+0xf8>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a0f      	ldr	r2, [pc, #60]	; (80046a8 <TIM_Base_SetConfig+0x130>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d103      	bne.n	8004678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	615a      	str	r2, [r3, #20]
}
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	40010000 	.word	0x40010000
 8004690:	40000400 	.word	0x40000400
 8004694:	40000800 	.word	0x40000800
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40010400 	.word	0x40010400
 80046a0:	40014000 	.word	0x40014000
 80046a4:	40014400 	.word	0x40014400
 80046a8:	40014800 	.word	0x40014800

080046ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e042      	b.n	8004780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004700:	2b00      	cmp	r3, #0
 8004702:	d106      	bne.n	8004712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7fc fce1 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2224      	movs	r2, #36	; 0x24
 8004716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0201 	bic.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8c2 	bl	80048b4 <UART_SetConfig>
 8004730:	4603      	mov	r3, r0
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e022      	b.n	8004780 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 ff14 	bl	8005570 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689a      	ldr	r2, [r3, #8]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 ff9b 	bl	80056b4 <UART_CheckIdleState>
 800477e:	4603      	mov	r3, r0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	4613      	mov	r3, r2
 8004796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800479e:	2b20      	cmp	r3, #32
 80047a0:	f040 8083 	bne.w	80048aa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_UART_Transmit+0x28>
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e07b      	b.n	80048ac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Transmit+0x3a>
 80047be:	2302      	movs	r3, #2
 80047c0:	e074      	b.n	80048ac <HAL_UART_Transmit+0x124>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2221      	movs	r2, #33	; 0x21
 80047d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047da:	f7fc fe67 	bl	80014ac <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	88fa      	ldrh	r2, [r7, #6]
 80047ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f8:	d108      	bne.n	800480c <HAL_UART_Transmit+0x84>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	691b      	ldr	r3, [r3, #16]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d104      	bne.n	800480c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e003      	b.n	8004814 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800481c:	e02c      	b.n	8004878 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	2200      	movs	r2, #0
 8004826:	2180      	movs	r1, #128	; 0x80
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 ff8e 	bl	800574a <UART_WaitOnFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e039      	b.n	80048ac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800484c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	3302      	adds	r3, #2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	e007      	b.n	8004866 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	781a      	ldrb	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	3301      	adds	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1cc      	bne.n	800481e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2200      	movs	r2, #0
 800488c:	2140      	movs	r1, #64	; 0x40
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 ff5b 	bl	800574a <UART_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e006      	b.n	80048ac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e000      	b.n	80048ac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
  }
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b4:	b5b0      	push	{r4, r5, r7, lr}
 80048b6:	b08e      	sub	sp, #56	; 0x38
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048bc:	2300      	movs	r3, #0
 80048be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4bbf      	ldr	r3, [pc, #764]	; (8004be0 <UART_SetConfig+0x32c>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6812      	ldr	r2, [r2, #0]
 80048e8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048ea:	430b      	orrs	r3, r1
 80048ec:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4ab5      	ldr	r2, [pc, #724]	; (8004be4 <UART_SetConfig+0x330>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800491a:	4313      	orrs	r3, r2
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	4bb0      	ldr	r3, [pc, #704]	; (8004be8 <UART_SetConfig+0x334>)
 8004926:	4013      	ands	r3, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800492e:	430b      	orrs	r3, r1
 8004930:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	f023 010f 	bic.w	r1, r3, #15
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4aa7      	ldr	r2, [pc, #668]	; (8004bec <UART_SetConfig+0x338>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d176      	bne.n	8004a40 <UART_SetConfig+0x18c>
 8004952:	4ba7      	ldr	r3, [pc, #668]	; (8004bf0 <UART_SetConfig+0x33c>)
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800495a:	2b28      	cmp	r3, #40	; 0x28
 800495c:	d86c      	bhi.n	8004a38 <UART_SetConfig+0x184>
 800495e:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <UART_SetConfig+0xb0>)
 8004960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004964:	08004a09 	.word	0x08004a09
 8004968:	08004a39 	.word	0x08004a39
 800496c:	08004a39 	.word	0x08004a39
 8004970:	08004a39 	.word	0x08004a39
 8004974:	08004a39 	.word	0x08004a39
 8004978:	08004a39 	.word	0x08004a39
 800497c:	08004a39 	.word	0x08004a39
 8004980:	08004a39 	.word	0x08004a39
 8004984:	08004a11 	.word	0x08004a11
 8004988:	08004a39 	.word	0x08004a39
 800498c:	08004a39 	.word	0x08004a39
 8004990:	08004a39 	.word	0x08004a39
 8004994:	08004a39 	.word	0x08004a39
 8004998:	08004a39 	.word	0x08004a39
 800499c:	08004a39 	.word	0x08004a39
 80049a0:	08004a39 	.word	0x08004a39
 80049a4:	08004a19 	.word	0x08004a19
 80049a8:	08004a39 	.word	0x08004a39
 80049ac:	08004a39 	.word	0x08004a39
 80049b0:	08004a39 	.word	0x08004a39
 80049b4:	08004a39 	.word	0x08004a39
 80049b8:	08004a39 	.word	0x08004a39
 80049bc:	08004a39 	.word	0x08004a39
 80049c0:	08004a39 	.word	0x08004a39
 80049c4:	08004a21 	.word	0x08004a21
 80049c8:	08004a39 	.word	0x08004a39
 80049cc:	08004a39 	.word	0x08004a39
 80049d0:	08004a39 	.word	0x08004a39
 80049d4:	08004a39 	.word	0x08004a39
 80049d8:	08004a39 	.word	0x08004a39
 80049dc:	08004a39 	.word	0x08004a39
 80049e0:	08004a39 	.word	0x08004a39
 80049e4:	08004a29 	.word	0x08004a29
 80049e8:	08004a39 	.word	0x08004a39
 80049ec:	08004a39 	.word	0x08004a39
 80049f0:	08004a39 	.word	0x08004a39
 80049f4:	08004a39 	.word	0x08004a39
 80049f8:	08004a39 	.word	0x08004a39
 80049fc:	08004a39 	.word	0x08004a39
 8004a00:	08004a39 	.word	0x08004a39
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0e:	e326      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a10:	2304      	movs	r3, #4
 8004a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a16:	e322      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a18:	2308      	movs	r3, #8
 8004a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a1e:	e31e      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a20:	2310      	movs	r3, #16
 8004a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a26:	e31a      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a28:	2320      	movs	r3, #32
 8004a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a2e:	e316      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a36:	e312      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a3e:	e30e      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a6b      	ldr	r2, [pc, #428]	; (8004bf4 <UART_SetConfig+0x340>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d130      	bne.n	8004aac <UART_SetConfig+0x1f8>
 8004a4a:	4b69      	ldr	r3, [pc, #420]	; (8004bf0 <UART_SetConfig+0x33c>)
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f003 0307 	and.w	r3, r3, #7
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d826      	bhi.n	8004aa4 <UART_SetConfig+0x1f0>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x1a8>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a75 	.word	0x08004a75
 8004a60:	08004a7d 	.word	0x08004a7d
 8004a64:	08004a85 	.word	0x08004a85
 8004a68:	08004a8d 	.word	0x08004a8d
 8004a6c:	08004a95 	.word	0x08004a95
 8004a70:	08004a9d 	.word	0x08004a9d
 8004a74:	2300      	movs	r3, #0
 8004a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a7a:	e2f0      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a7c:	2304      	movs	r3, #4
 8004a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a82:	e2ec      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a84:	2308      	movs	r3, #8
 8004a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a8a:	e2e8      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a92:	e2e4      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a94:	2320      	movs	r3, #32
 8004a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a9a:	e2e0      	b.n	800505e <UART_SetConfig+0x7aa>
 8004a9c:	2340      	movs	r3, #64	; 0x40
 8004a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aa2:	e2dc      	b.n	800505e <UART_SetConfig+0x7aa>
 8004aa4:	2380      	movs	r3, #128	; 0x80
 8004aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aaa:	e2d8      	b.n	800505e <UART_SetConfig+0x7aa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a51      	ldr	r2, [pc, #324]	; (8004bf8 <UART_SetConfig+0x344>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d130      	bne.n	8004b18 <UART_SetConfig+0x264>
 8004ab6:	4b4e      	ldr	r3, [pc, #312]	; (8004bf0 <UART_SetConfig+0x33c>)
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d826      	bhi.n	8004b10 <UART_SetConfig+0x25c>
 8004ac2:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x214>)
 8004ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac8:	08004ae1 	.word	0x08004ae1
 8004acc:	08004ae9 	.word	0x08004ae9
 8004ad0:	08004af1 	.word	0x08004af1
 8004ad4:	08004af9 	.word	0x08004af9
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	08004b09 	.word	0x08004b09
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ae6:	e2ba      	b.n	800505e <UART_SetConfig+0x7aa>
 8004ae8:	2304      	movs	r3, #4
 8004aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aee:	e2b6      	b.n	800505e <UART_SetConfig+0x7aa>
 8004af0:	2308      	movs	r3, #8
 8004af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004af6:	e2b2      	b.n	800505e <UART_SetConfig+0x7aa>
 8004af8:	2310      	movs	r3, #16
 8004afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004afe:	e2ae      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b00:	2320      	movs	r3, #32
 8004b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b06:	e2aa      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b08:	2340      	movs	r3, #64	; 0x40
 8004b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b0e:	e2a6      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b16:	e2a2      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a37      	ldr	r2, [pc, #220]	; (8004bfc <UART_SetConfig+0x348>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d130      	bne.n	8004b84 <UART_SetConfig+0x2d0>
 8004b22:	4b33      	ldr	r3, [pc, #204]	; (8004bf0 <UART_SetConfig+0x33c>)
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d826      	bhi.n	8004b7c <UART_SetConfig+0x2c8>
 8004b2e:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <UART_SetConfig+0x280>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b4d 	.word	0x08004b4d
 8004b38:	08004b55 	.word	0x08004b55
 8004b3c:	08004b5d 	.word	0x08004b5d
 8004b40:	08004b65 	.word	0x08004b65
 8004b44:	08004b6d 	.word	0x08004b6d
 8004b48:	08004b75 	.word	0x08004b75
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b52:	e284      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b54:	2304      	movs	r3, #4
 8004b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b5a:	e280      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b5c:	2308      	movs	r3, #8
 8004b5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b62:	e27c      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b64:	2310      	movs	r3, #16
 8004b66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b6a:	e278      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b72:	e274      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b74:	2340      	movs	r3, #64	; 0x40
 8004b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b7a:	e270      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b7c:	2380      	movs	r3, #128	; 0x80
 8004b7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b82:	e26c      	b.n	800505e <UART_SetConfig+0x7aa>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <UART_SetConfig+0x34c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d142      	bne.n	8004c14 <UART_SetConfig+0x360>
 8004b8e:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <UART_SetConfig+0x33c>)
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	2b05      	cmp	r3, #5
 8004b98:	d838      	bhi.n	8004c0c <UART_SetConfig+0x358>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <UART_SetConfig+0x2ec>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bb9 	.word	0x08004bb9
 8004ba4:	08004bc1 	.word	0x08004bc1
 8004ba8:	08004bc9 	.word	0x08004bc9
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bd9 	.word	0x08004bd9
 8004bb4:	08004c05 	.word	0x08004c05
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bbe:	e24e      	b.n	800505e <UART_SetConfig+0x7aa>
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bc6:	e24a      	b.n	800505e <UART_SetConfig+0x7aa>
 8004bc8:	2308      	movs	r3, #8
 8004bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bce:	e246      	b.n	800505e <UART_SetConfig+0x7aa>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bd6:	e242      	b.n	800505e <UART_SetConfig+0x7aa>
 8004bd8:	2320      	movs	r3, #32
 8004bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bde:	e23e      	b.n	800505e <UART_SetConfig+0x7aa>
 8004be0:	cfff69f3 	.word	0xcfff69f3
 8004be4:	58000c00 	.word	0x58000c00
 8004be8:	11fff4ff 	.word	0x11fff4ff
 8004bec:	40011000 	.word	0x40011000
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	40004400 	.word	0x40004400
 8004bf8:	40004800 	.word	0x40004800
 8004bfc:	40004c00 	.word	0x40004c00
 8004c00:	40005000 	.word	0x40005000
 8004c04:	2340      	movs	r3, #64	; 0x40
 8004c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c0a:	e228      	b.n	800505e <UART_SetConfig+0x7aa>
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004c12:	e224      	b.n	800505e <UART_SetConfig+0x7aa>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4ab1      	ldr	r2, [pc, #708]	; (8004ee0 <UART_SetConfig+0x62c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d176      	bne.n	8004d0c <UART_SetConfig+0x458>
 8004c1e:	4bb1      	ldr	r3, [pc, #708]	; (8004ee4 <UART_SetConfig+0x630>)
 8004c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c26:	2b28      	cmp	r3, #40	; 0x28
 8004c28:	d86c      	bhi.n	8004d04 <UART_SetConfig+0x450>
 8004c2a:	a201      	add	r2, pc, #4	; (adr r2, 8004c30 <UART_SetConfig+0x37c>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004cd5 	.word	0x08004cd5
 8004c34:	08004d05 	.word	0x08004d05
 8004c38:	08004d05 	.word	0x08004d05
 8004c3c:	08004d05 	.word	0x08004d05
 8004c40:	08004d05 	.word	0x08004d05
 8004c44:	08004d05 	.word	0x08004d05
 8004c48:	08004d05 	.word	0x08004d05
 8004c4c:	08004d05 	.word	0x08004d05
 8004c50:	08004cdd 	.word	0x08004cdd
 8004c54:	08004d05 	.word	0x08004d05
 8004c58:	08004d05 	.word	0x08004d05
 8004c5c:	08004d05 	.word	0x08004d05
 8004c60:	08004d05 	.word	0x08004d05
 8004c64:	08004d05 	.word	0x08004d05
 8004c68:	08004d05 	.word	0x08004d05
 8004c6c:	08004d05 	.word	0x08004d05
 8004c70:	08004ce5 	.word	0x08004ce5
 8004c74:	08004d05 	.word	0x08004d05
 8004c78:	08004d05 	.word	0x08004d05
 8004c7c:	08004d05 	.word	0x08004d05
 8004c80:	08004d05 	.word	0x08004d05
 8004c84:	08004d05 	.word	0x08004d05
 8004c88:	08004d05 	.word	0x08004d05
 8004c8c:	08004d05 	.word	0x08004d05
 8004c90:	08004ced 	.word	0x08004ced
 8004c94:	08004d05 	.word	0x08004d05
 8004c98:	08004d05 	.word	0x08004d05
 8004c9c:	08004d05 	.word	0x08004d05
 8004ca0:	08004d05 	.word	0x08004d05
 8004ca4:	08004d05 	.word	0x08004d05
 8004ca8:	08004d05 	.word	0x08004d05
 8004cac:	08004d05 	.word	0x08004d05
 8004cb0:	08004cf5 	.word	0x08004cf5
 8004cb4:	08004d05 	.word	0x08004d05
 8004cb8:	08004d05 	.word	0x08004d05
 8004cbc:	08004d05 	.word	0x08004d05
 8004cc0:	08004d05 	.word	0x08004d05
 8004cc4:	08004d05 	.word	0x08004d05
 8004cc8:	08004d05 	.word	0x08004d05
 8004ccc:	08004d05 	.word	0x08004d05
 8004cd0:	08004cfd 	.word	0x08004cfd
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cda:	e1c0      	b.n	800505e <UART_SetConfig+0x7aa>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce2:	e1bc      	b.n	800505e <UART_SetConfig+0x7aa>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cea:	e1b8      	b.n	800505e <UART_SetConfig+0x7aa>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cf2:	e1b4      	b.n	800505e <UART_SetConfig+0x7aa>
 8004cf4:	2320      	movs	r3, #32
 8004cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cfa:	e1b0      	b.n	800505e <UART_SetConfig+0x7aa>
 8004cfc:	2340      	movs	r3, #64	; 0x40
 8004cfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d02:	e1ac      	b.n	800505e <UART_SetConfig+0x7aa>
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d0a:	e1a8      	b.n	800505e <UART_SetConfig+0x7aa>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a75      	ldr	r2, [pc, #468]	; (8004ee8 <UART_SetConfig+0x634>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d130      	bne.n	8004d78 <UART_SetConfig+0x4c4>
 8004d16:	4b73      	ldr	r3, [pc, #460]	; (8004ee4 <UART_SetConfig+0x630>)
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	2b05      	cmp	r3, #5
 8004d20:	d826      	bhi.n	8004d70 <UART_SetConfig+0x4bc>
 8004d22:	a201      	add	r2, pc, #4	; (adr r2, 8004d28 <UART_SetConfig+0x474>)
 8004d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d28:	08004d41 	.word	0x08004d41
 8004d2c:	08004d49 	.word	0x08004d49
 8004d30:	08004d51 	.word	0x08004d51
 8004d34:	08004d59 	.word	0x08004d59
 8004d38:	08004d61 	.word	0x08004d61
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	2300      	movs	r3, #0
 8004d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d46:	e18a      	b.n	800505e <UART_SetConfig+0x7aa>
 8004d48:	2304      	movs	r3, #4
 8004d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d4e:	e186      	b.n	800505e <UART_SetConfig+0x7aa>
 8004d50:	2308      	movs	r3, #8
 8004d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d56:	e182      	b.n	800505e <UART_SetConfig+0x7aa>
 8004d58:	2310      	movs	r3, #16
 8004d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d5e:	e17e      	b.n	800505e <UART_SetConfig+0x7aa>
 8004d60:	2320      	movs	r3, #32
 8004d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d66:	e17a      	b.n	800505e <UART_SetConfig+0x7aa>
 8004d68:	2340      	movs	r3, #64	; 0x40
 8004d6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d6e:	e176      	b.n	800505e <UART_SetConfig+0x7aa>
 8004d70:	2380      	movs	r3, #128	; 0x80
 8004d72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d76:	e172      	b.n	800505e <UART_SetConfig+0x7aa>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a5b      	ldr	r2, [pc, #364]	; (8004eec <UART_SetConfig+0x638>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d130      	bne.n	8004de4 <UART_SetConfig+0x530>
 8004d82:	4b58      	ldr	r3, [pc, #352]	; (8004ee4 <UART_SetConfig+0x630>)
 8004d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	d826      	bhi.n	8004ddc <UART_SetConfig+0x528>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x4e0>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004dad 	.word	0x08004dad
 8004d98:	08004db5 	.word	0x08004db5
 8004d9c:	08004dbd 	.word	0x08004dbd
 8004da0:	08004dc5 	.word	0x08004dc5
 8004da4:	08004dcd 	.word	0x08004dcd
 8004da8:	08004dd5 	.word	0x08004dd5
 8004dac:	2300      	movs	r3, #0
 8004dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004db2:	e154      	b.n	800505e <UART_SetConfig+0x7aa>
 8004db4:	2304      	movs	r3, #4
 8004db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dba:	e150      	b.n	800505e <UART_SetConfig+0x7aa>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dc2:	e14c      	b.n	800505e <UART_SetConfig+0x7aa>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dca:	e148      	b.n	800505e <UART_SetConfig+0x7aa>
 8004dcc:	2320      	movs	r3, #32
 8004dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dd2:	e144      	b.n	800505e <UART_SetConfig+0x7aa>
 8004dd4:	2340      	movs	r3, #64	; 0x40
 8004dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dda:	e140      	b.n	800505e <UART_SetConfig+0x7aa>
 8004ddc:	2380      	movs	r3, #128	; 0x80
 8004dde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004de2:	e13c      	b.n	800505e <UART_SetConfig+0x7aa>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a41      	ldr	r2, [pc, #260]	; (8004ef0 <UART_SetConfig+0x63c>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	f040 8082 	bne.w	8004ef4 <UART_SetConfig+0x640>
 8004df0:	4b3c      	ldr	r3, [pc, #240]	; (8004ee4 <UART_SetConfig+0x630>)
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004df8:	2b28      	cmp	r3, #40	; 0x28
 8004dfa:	d86d      	bhi.n	8004ed8 <UART_SetConfig+0x624>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <UART_SetConfig+0x550>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004ea9 	.word	0x08004ea9
 8004e08:	08004ed9 	.word	0x08004ed9
 8004e0c:	08004ed9 	.word	0x08004ed9
 8004e10:	08004ed9 	.word	0x08004ed9
 8004e14:	08004ed9 	.word	0x08004ed9
 8004e18:	08004ed9 	.word	0x08004ed9
 8004e1c:	08004ed9 	.word	0x08004ed9
 8004e20:	08004ed9 	.word	0x08004ed9
 8004e24:	08004eb1 	.word	0x08004eb1
 8004e28:	08004ed9 	.word	0x08004ed9
 8004e2c:	08004ed9 	.word	0x08004ed9
 8004e30:	08004ed9 	.word	0x08004ed9
 8004e34:	08004ed9 	.word	0x08004ed9
 8004e38:	08004ed9 	.word	0x08004ed9
 8004e3c:	08004ed9 	.word	0x08004ed9
 8004e40:	08004ed9 	.word	0x08004ed9
 8004e44:	08004eb9 	.word	0x08004eb9
 8004e48:	08004ed9 	.word	0x08004ed9
 8004e4c:	08004ed9 	.word	0x08004ed9
 8004e50:	08004ed9 	.word	0x08004ed9
 8004e54:	08004ed9 	.word	0x08004ed9
 8004e58:	08004ed9 	.word	0x08004ed9
 8004e5c:	08004ed9 	.word	0x08004ed9
 8004e60:	08004ed9 	.word	0x08004ed9
 8004e64:	08004ec1 	.word	0x08004ec1
 8004e68:	08004ed9 	.word	0x08004ed9
 8004e6c:	08004ed9 	.word	0x08004ed9
 8004e70:	08004ed9 	.word	0x08004ed9
 8004e74:	08004ed9 	.word	0x08004ed9
 8004e78:	08004ed9 	.word	0x08004ed9
 8004e7c:	08004ed9 	.word	0x08004ed9
 8004e80:	08004ed9 	.word	0x08004ed9
 8004e84:	08004ec9 	.word	0x08004ec9
 8004e88:	08004ed9 	.word	0x08004ed9
 8004e8c:	08004ed9 	.word	0x08004ed9
 8004e90:	08004ed9 	.word	0x08004ed9
 8004e94:	08004ed9 	.word	0x08004ed9
 8004e98:	08004ed9 	.word	0x08004ed9
 8004e9c:	08004ed9 	.word	0x08004ed9
 8004ea0:	08004ed9 	.word	0x08004ed9
 8004ea4:	08004ed1 	.word	0x08004ed1
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eae:	e0d6      	b.n	800505e <UART_SetConfig+0x7aa>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004eb6:	e0d2      	b.n	800505e <UART_SetConfig+0x7aa>
 8004eb8:	2308      	movs	r3, #8
 8004eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ebe:	e0ce      	b.n	800505e <UART_SetConfig+0x7aa>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ec6:	e0ca      	b.n	800505e <UART_SetConfig+0x7aa>
 8004ec8:	2320      	movs	r3, #32
 8004eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ece:	e0c6      	b.n	800505e <UART_SetConfig+0x7aa>
 8004ed0:	2340      	movs	r3, #64	; 0x40
 8004ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ed6:	e0c2      	b.n	800505e <UART_SetConfig+0x7aa>
 8004ed8:	2380      	movs	r3, #128	; 0x80
 8004eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ede:	e0be      	b.n	800505e <UART_SetConfig+0x7aa>
 8004ee0:	40011400 	.word	0x40011400
 8004ee4:	58024400 	.word	0x58024400
 8004ee8:	40007800 	.word	0x40007800
 8004eec:	40007c00 	.word	0x40007c00
 8004ef0:	40011800 	.word	0x40011800
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4aad      	ldr	r2, [pc, #692]	; (80051b0 <UART_SetConfig+0x8fc>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d176      	bne.n	8004fec <UART_SetConfig+0x738>
 8004efe:	4bad      	ldr	r3, [pc, #692]	; (80051b4 <UART_SetConfig+0x900>)
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f06:	2b28      	cmp	r3, #40	; 0x28
 8004f08:	d86c      	bhi.n	8004fe4 <UART_SetConfig+0x730>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <UART_SetConfig+0x65c>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004fb5 	.word	0x08004fb5
 8004f14:	08004fe5 	.word	0x08004fe5
 8004f18:	08004fe5 	.word	0x08004fe5
 8004f1c:	08004fe5 	.word	0x08004fe5
 8004f20:	08004fe5 	.word	0x08004fe5
 8004f24:	08004fe5 	.word	0x08004fe5
 8004f28:	08004fe5 	.word	0x08004fe5
 8004f2c:	08004fe5 	.word	0x08004fe5
 8004f30:	08004fbd 	.word	0x08004fbd
 8004f34:	08004fe5 	.word	0x08004fe5
 8004f38:	08004fe5 	.word	0x08004fe5
 8004f3c:	08004fe5 	.word	0x08004fe5
 8004f40:	08004fe5 	.word	0x08004fe5
 8004f44:	08004fe5 	.word	0x08004fe5
 8004f48:	08004fe5 	.word	0x08004fe5
 8004f4c:	08004fe5 	.word	0x08004fe5
 8004f50:	08004fc5 	.word	0x08004fc5
 8004f54:	08004fe5 	.word	0x08004fe5
 8004f58:	08004fe5 	.word	0x08004fe5
 8004f5c:	08004fe5 	.word	0x08004fe5
 8004f60:	08004fe5 	.word	0x08004fe5
 8004f64:	08004fe5 	.word	0x08004fe5
 8004f68:	08004fe5 	.word	0x08004fe5
 8004f6c:	08004fe5 	.word	0x08004fe5
 8004f70:	08004fcd 	.word	0x08004fcd
 8004f74:	08004fe5 	.word	0x08004fe5
 8004f78:	08004fe5 	.word	0x08004fe5
 8004f7c:	08004fe5 	.word	0x08004fe5
 8004f80:	08004fe5 	.word	0x08004fe5
 8004f84:	08004fe5 	.word	0x08004fe5
 8004f88:	08004fe5 	.word	0x08004fe5
 8004f8c:	08004fe5 	.word	0x08004fe5
 8004f90:	08004fd5 	.word	0x08004fd5
 8004f94:	08004fe5 	.word	0x08004fe5
 8004f98:	08004fe5 	.word	0x08004fe5
 8004f9c:	08004fe5 	.word	0x08004fe5
 8004fa0:	08004fe5 	.word	0x08004fe5
 8004fa4:	08004fe5 	.word	0x08004fe5
 8004fa8:	08004fe5 	.word	0x08004fe5
 8004fac:	08004fe5 	.word	0x08004fe5
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fba:	e050      	b.n	800505e <UART_SetConfig+0x7aa>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fc2:	e04c      	b.n	800505e <UART_SetConfig+0x7aa>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fca:	e048      	b.n	800505e <UART_SetConfig+0x7aa>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fd2:	e044      	b.n	800505e <UART_SetConfig+0x7aa>
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fda:	e040      	b.n	800505e <UART_SetConfig+0x7aa>
 8004fdc:	2340      	movs	r3, #64	; 0x40
 8004fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fe2:	e03c      	b.n	800505e <UART_SetConfig+0x7aa>
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004fea:	e038      	b.n	800505e <UART_SetConfig+0x7aa>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a71      	ldr	r2, [pc, #452]	; (80051b8 <UART_SetConfig+0x904>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d130      	bne.n	8005058 <UART_SetConfig+0x7a4>
 8004ff6:	4b6f      	ldr	r3, [pc, #444]	; (80051b4 <UART_SetConfig+0x900>)
 8004ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d826      	bhi.n	8005050 <UART_SetConfig+0x79c>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x754>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005021 	.word	0x08005021
 800500c:	08005029 	.word	0x08005029
 8005010:	08005031 	.word	0x08005031
 8005014:	08005039 	.word	0x08005039
 8005018:	08005041 	.word	0x08005041
 800501c:	08005049 	.word	0x08005049
 8005020:	2302      	movs	r3, #2
 8005022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005026:	e01a      	b.n	800505e <UART_SetConfig+0x7aa>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800502e:	e016      	b.n	800505e <UART_SetConfig+0x7aa>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005036:	e012      	b.n	800505e <UART_SetConfig+0x7aa>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800503e:	e00e      	b.n	800505e <UART_SetConfig+0x7aa>
 8005040:	2320      	movs	r3, #32
 8005042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005046:	e00a      	b.n	800505e <UART_SetConfig+0x7aa>
 8005048:	2340      	movs	r3, #64	; 0x40
 800504a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800504e:	e006      	b.n	800505e <UART_SetConfig+0x7aa>
 8005050:	2380      	movs	r3, #128	; 0x80
 8005052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005056:	e002      	b.n	800505e <UART_SetConfig+0x7aa>
 8005058:	2380      	movs	r3, #128	; 0x80
 800505a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a55      	ldr	r2, [pc, #340]	; (80051b8 <UART_SetConfig+0x904>)
 8005064:	4293      	cmp	r3, r2
 8005066:	f040 80f0 	bne.w	800524a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800506a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800506e:	2b20      	cmp	r3, #32
 8005070:	dc46      	bgt.n	8005100 <UART_SetConfig+0x84c>
 8005072:	2b02      	cmp	r3, #2
 8005074:	db75      	blt.n	8005162 <UART_SetConfig+0x8ae>
 8005076:	3b02      	subs	r3, #2
 8005078:	2b1e      	cmp	r3, #30
 800507a:	d872      	bhi.n	8005162 <UART_SetConfig+0x8ae>
 800507c:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <UART_SetConfig+0x7d0>)
 800507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005082:	bf00      	nop
 8005084:	08005107 	.word	0x08005107
 8005088:	08005163 	.word	0x08005163
 800508c:	0800510f 	.word	0x0800510f
 8005090:	08005163 	.word	0x08005163
 8005094:	08005163 	.word	0x08005163
 8005098:	08005163 	.word	0x08005163
 800509c:	0800511f 	.word	0x0800511f
 80050a0:	08005163 	.word	0x08005163
 80050a4:	08005163 	.word	0x08005163
 80050a8:	08005163 	.word	0x08005163
 80050ac:	08005163 	.word	0x08005163
 80050b0:	08005163 	.word	0x08005163
 80050b4:	08005163 	.word	0x08005163
 80050b8:	08005163 	.word	0x08005163
 80050bc:	0800512f 	.word	0x0800512f
 80050c0:	08005163 	.word	0x08005163
 80050c4:	08005163 	.word	0x08005163
 80050c8:	08005163 	.word	0x08005163
 80050cc:	08005163 	.word	0x08005163
 80050d0:	08005163 	.word	0x08005163
 80050d4:	08005163 	.word	0x08005163
 80050d8:	08005163 	.word	0x08005163
 80050dc:	08005163 	.word	0x08005163
 80050e0:	08005163 	.word	0x08005163
 80050e4:	08005163 	.word	0x08005163
 80050e8:	08005163 	.word	0x08005163
 80050ec:	08005163 	.word	0x08005163
 80050f0:	08005163 	.word	0x08005163
 80050f4:	08005163 	.word	0x08005163
 80050f8:	08005163 	.word	0x08005163
 80050fc:	08005155 	.word	0x08005155
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d02a      	beq.n	800515a <UART_SetConfig+0x8a6>
 8005104:	e02d      	b.n	8005162 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005106:	f7fe fbf3 	bl	80038f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800510a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800510c:	e02f      	b.n	800516e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800510e:	f107 0314 	add.w	r3, r7, #20
 8005112:	4618      	mov	r0, r3
 8005114:	f7fe fc02 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800511c:	e027      	b.n	800516e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800511e:	f107 0308 	add.w	r3, r7, #8
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fd4e 	bl	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800512c:	e01f      	b.n	800516e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800512e:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <UART_SetConfig+0x900>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800513a:	4b1e      	ldr	r3, [pc, #120]	; (80051b4 <UART_SetConfig+0x900>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	08db      	lsrs	r3, r3, #3
 8005140:	f003 0303 	and.w	r3, r3, #3
 8005144:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <UART_SetConfig+0x908>)
 8005146:	fa22 f303 	lsr.w	r3, r2, r3
 800514a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800514c:	e00f      	b.n	800516e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800514e:	4b1b      	ldr	r3, [pc, #108]	; (80051bc <UART_SetConfig+0x908>)
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005152:	e00c      	b.n	800516e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005154:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <UART_SetConfig+0x90c>)
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005158:	e009      	b.n	800516e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800515e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005160:	e005      	b.n	800516e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8005162:	2300      	movs	r3, #0
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800516c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 81e6 	beq.w	8005542 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517a:	4a12      	ldr	r2, [pc, #72]	; (80051c4 <UART_SetConfig+0x910>)
 800517c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005180:	461a      	mov	r2, r3
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	fbb3 f3f2 	udiv	r3, r3, r2
 8005188:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	4413      	add	r3, r2
 8005194:	6a3a      	ldr	r2, [r7, #32]
 8005196:	429a      	cmp	r2, r3
 8005198:	d305      	bcc.n	80051a6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d910      	bls.n	80051c8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80051ac:	e1c9      	b.n	8005542 <UART_SetConfig+0xc8e>
 80051ae:	bf00      	nop
 80051b0:	40011c00 	.word	0x40011c00
 80051b4:	58024400 	.word	0x58024400
 80051b8:	58000c00 	.word	0x58000c00
 80051bc:	03d09000 	.word	0x03d09000
 80051c0:	003d0900 	.word	0x003d0900
 80051c4:	08007b28 	.word	0x08007b28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	4618      	mov	r0, r3
 80051cc:	f04f 0100 	mov.w	r1, #0
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	4ac1      	ldr	r2, [pc, #772]	; (80054dc <UART_SetConfig+0xc28>)
 80051d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051da:	b29a      	uxth	r2, r3
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	f7fb f9aa 	bl	8000538 <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4610      	mov	r0, r2
 80051ea:	4619      	mov	r1, r3
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	020b      	lsls	r3, r1, #8
 80051f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051fa:	0202      	lsls	r2, r0, #8
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	6849      	ldr	r1, [r1, #4]
 8005200:	0849      	lsrs	r1, r1, #1
 8005202:	4608      	mov	r0, r1
 8005204:	f04f 0100 	mov.w	r1, #0
 8005208:	1814      	adds	r4, r2, r0
 800520a:	eb43 0501 	adc.w	r5, r3, r1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	461a      	mov	r2, r3
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	4620      	mov	r0, r4
 800521a:	4629      	mov	r1, r5
 800521c:	f7fb f98c 	bl	8000538 <__aeabi_uldivmod>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4613      	mov	r3, r2
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800522e:	d308      	bcc.n	8005242 <UART_SetConfig+0x98e>
 8005230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005236:	d204      	bcs.n	8005242 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	e17f      	b.n	8005542 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005248:	e17b      	b.n	8005542 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005252:	f040 80bd 	bne.w	80053d0 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8005256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800525a:	2b20      	cmp	r3, #32
 800525c:	dc48      	bgt.n	80052f0 <UART_SetConfig+0xa3c>
 800525e:	2b00      	cmp	r3, #0
 8005260:	db7b      	blt.n	800535a <UART_SetConfig+0xaa6>
 8005262:	2b20      	cmp	r3, #32
 8005264:	d879      	bhi.n	800535a <UART_SetConfig+0xaa6>
 8005266:	a201      	add	r2, pc, #4	; (adr r2, 800526c <UART_SetConfig+0x9b8>)
 8005268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526c:	080052f7 	.word	0x080052f7
 8005270:	080052ff 	.word	0x080052ff
 8005274:	0800535b 	.word	0x0800535b
 8005278:	0800535b 	.word	0x0800535b
 800527c:	08005307 	.word	0x08005307
 8005280:	0800535b 	.word	0x0800535b
 8005284:	0800535b 	.word	0x0800535b
 8005288:	0800535b 	.word	0x0800535b
 800528c:	08005317 	.word	0x08005317
 8005290:	0800535b 	.word	0x0800535b
 8005294:	0800535b 	.word	0x0800535b
 8005298:	0800535b 	.word	0x0800535b
 800529c:	0800535b 	.word	0x0800535b
 80052a0:	0800535b 	.word	0x0800535b
 80052a4:	0800535b 	.word	0x0800535b
 80052a8:	0800535b 	.word	0x0800535b
 80052ac:	08005327 	.word	0x08005327
 80052b0:	0800535b 	.word	0x0800535b
 80052b4:	0800535b 	.word	0x0800535b
 80052b8:	0800535b 	.word	0x0800535b
 80052bc:	0800535b 	.word	0x0800535b
 80052c0:	0800535b 	.word	0x0800535b
 80052c4:	0800535b 	.word	0x0800535b
 80052c8:	0800535b 	.word	0x0800535b
 80052cc:	0800535b 	.word	0x0800535b
 80052d0:	0800535b 	.word	0x0800535b
 80052d4:	0800535b 	.word	0x0800535b
 80052d8:	0800535b 	.word	0x0800535b
 80052dc:	0800535b 	.word	0x0800535b
 80052e0:	0800535b 	.word	0x0800535b
 80052e4:	0800535b 	.word	0x0800535b
 80052e8:	0800535b 	.word	0x0800535b
 80052ec:	0800534d 	.word	0x0800534d
 80052f0:	2b40      	cmp	r3, #64	; 0x40
 80052f2:	d02e      	beq.n	8005352 <UART_SetConfig+0xa9e>
 80052f4:	e031      	b.n	800535a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f6:	f7fd fb81 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 80052fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80052fc:	e033      	b.n	8005366 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052fe:	f7fd fb93 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8005302:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005304:	e02f      	b.n	8005366 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005306:	f107 0314 	add.w	r3, r7, #20
 800530a:	4618      	mov	r0, r3
 800530c:	f7fe fb06 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005314:	e027      	b.n	8005366 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe fc52 	bl	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005324:	e01f      	b.n	8005366 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005326:	4b6e      	ldr	r3, [pc, #440]	; (80054e0 <UART_SetConfig+0xc2c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d009      	beq.n	8005346 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005332:	4b6b      	ldr	r3, [pc, #428]	; (80054e0 <UART_SetConfig+0xc2c>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	08db      	lsrs	r3, r3, #3
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	4a69      	ldr	r2, [pc, #420]	; (80054e4 <UART_SetConfig+0xc30>)
 800533e:	fa22 f303 	lsr.w	r3, r2, r3
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005344:	e00f      	b.n	8005366 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8005346:	4b67      	ldr	r3, [pc, #412]	; (80054e4 <UART_SetConfig+0xc30>)
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800534a:	e00c      	b.n	8005366 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800534c:	4b66      	ldr	r3, [pc, #408]	; (80054e8 <UART_SetConfig+0xc34>)
 800534e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005350:	e009      	b.n	8005366 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005352:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005358:	e005      	b.n	8005366 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005364:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80ea 	beq.w	8005542 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	4a5a      	ldr	r2, [pc, #360]	; (80054dc <UART_SetConfig+0xc28>)
 8005374:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005378:	461a      	mov	r2, r3
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005380:	005a      	lsls	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	441a      	add	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d916      	bls.n	80053c8 <UART_SetConfig+0xb14>
 800539a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a0:	d212      	bcs.n	80053c8 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f023 030f 	bic.w	r3, r3, #15
 80053aa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053ba:	4313      	orrs	r3, r2
 80053bc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80053c4:	60da      	str	r2, [r3, #12]
 80053c6:	e0bc      	b.n	8005542 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80053ce:	e0b8      	b.n	8005542 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	dc4b      	bgt.n	8005470 <UART_SetConfig+0xbbc>
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f2c0 8087 	blt.w	80054ec <UART_SetConfig+0xc38>
 80053de:	2b20      	cmp	r3, #32
 80053e0:	f200 8084 	bhi.w	80054ec <UART_SetConfig+0xc38>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <UART_SetConfig+0xb38>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005477 	.word	0x08005477
 80053f0:	0800547f 	.word	0x0800547f
 80053f4:	080054ed 	.word	0x080054ed
 80053f8:	080054ed 	.word	0x080054ed
 80053fc:	08005487 	.word	0x08005487
 8005400:	080054ed 	.word	0x080054ed
 8005404:	080054ed 	.word	0x080054ed
 8005408:	080054ed 	.word	0x080054ed
 800540c:	08005497 	.word	0x08005497
 8005410:	080054ed 	.word	0x080054ed
 8005414:	080054ed 	.word	0x080054ed
 8005418:	080054ed 	.word	0x080054ed
 800541c:	080054ed 	.word	0x080054ed
 8005420:	080054ed 	.word	0x080054ed
 8005424:	080054ed 	.word	0x080054ed
 8005428:	080054ed 	.word	0x080054ed
 800542c:	080054a7 	.word	0x080054a7
 8005430:	080054ed 	.word	0x080054ed
 8005434:	080054ed 	.word	0x080054ed
 8005438:	080054ed 	.word	0x080054ed
 800543c:	080054ed 	.word	0x080054ed
 8005440:	080054ed 	.word	0x080054ed
 8005444:	080054ed 	.word	0x080054ed
 8005448:	080054ed 	.word	0x080054ed
 800544c:	080054ed 	.word	0x080054ed
 8005450:	080054ed 	.word	0x080054ed
 8005454:	080054ed 	.word	0x080054ed
 8005458:	080054ed 	.word	0x080054ed
 800545c:	080054ed 	.word	0x080054ed
 8005460:	080054ed 	.word	0x080054ed
 8005464:	080054ed 	.word	0x080054ed
 8005468:	080054ed 	.word	0x080054ed
 800546c:	080054cd 	.word	0x080054cd
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	d02e      	beq.n	80054d2 <UART_SetConfig+0xc1e>
 8005474:	e03a      	b.n	80054ec <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005476:	f7fd fac1 	bl	80029fc <HAL_RCC_GetPCLK1Freq>
 800547a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800547c:	e03c      	b.n	80054f8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800547e:	f7fd fad3 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 8005482:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005484:	e038      	b.n	80054f8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005486:	f107 0314 	add.w	r3, r7, #20
 800548a:	4618      	mov	r0, r3
 800548c:	f7fe fa46 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005494:	e030      	b.n	80054f8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fb92 	bl	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054a4:	e028      	b.n	80054f8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <UART_SetConfig+0xc2c>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0320 	and.w	r3, r3, #32
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d009      	beq.n	80054c6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80054b2:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <UART_SetConfig+0xc2c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	08db      	lsrs	r3, r3, #3
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <UART_SetConfig+0xc30>)
 80054be:	fa22 f303 	lsr.w	r3, r2, r3
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80054c4:	e018      	b.n	80054f8 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 80054c6:	4b07      	ldr	r3, [pc, #28]	; (80054e4 <UART_SetConfig+0xc30>)
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054ca:	e015      	b.n	80054f8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80054cc:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <UART_SetConfig+0xc34>)
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054d0:	e012      	b.n	80054f8 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80054d8:	e00e      	b.n	80054f8 <UART_SetConfig+0xc44>
 80054da:	bf00      	nop
 80054dc:	08007b28 	.word	0x08007b28
 80054e0:	58024400 	.word	0x58024400
 80054e4:	03d09000 	.word	0x03d09000
 80054e8:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80054f6:	bf00      	nop
    }

    if (pclk != 0U)
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d021      	beq.n	8005542 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	4a1a      	ldr	r2, [pc, #104]	; (800556c <UART_SetConfig+0xcb8>)
 8005504:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005508:	461a      	mov	r2, r3
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	085b      	lsrs	r3, r3, #1
 8005516:	441a      	add	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005520:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005524:	2b0f      	cmp	r3, #15
 8005526:	d909      	bls.n	800553c <UART_SetConfig+0xc88>
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552e:	d205      	bcs.n	800553c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	b29a      	uxth	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	60da      	str	r2, [r3, #12]
 800553a:	e002      	b.n	8005542 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800555e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005562:	4618      	mov	r0, r3
 8005564:	3738      	adds	r7, #56	; 0x38
 8005566:	46bd      	mov	sp, r7
 8005568:	bdb0      	pop	{r4, r5, r7, pc}
 800556a:	bf00      	nop
 800556c:	08007b28 	.word	0x08007b28

08005570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00a      	beq.n	8005622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01a      	beq.n	8005686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	d10a      	bne.n	8005686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	605a      	str	r2, [r3, #4]
  }
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b086      	sub	sp, #24
 80056b8:	af02      	add	r7, sp, #8
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056c4:	f7fb fef2 	bl	80014ac <HAL_GetTick>
 80056c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0308 	and.w	r3, r3, #8
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d10e      	bne.n	80056f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 f82f 	bl	800574a <UART_WaitOnFlagUntilTimeout>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e025      	b.n	8005742 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b04      	cmp	r3, #4
 8005702:	d10e      	bne.n	8005722 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f819 	bl	800574a <UART_WaitOnFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e00f      	b.n	8005742 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2220      	movs	r2, #32
 8005726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2220      	movs	r2, #32
 800572e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b09c      	sub	sp, #112	; 0x70
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	4613      	mov	r3, r2
 8005758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575a:	e0a9      	b.n	80058b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005762:	f000 80a5 	beq.w	80058b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005766:	f7fb fea1 	bl	80014ac <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005772:	429a      	cmp	r2, r3
 8005774:	d302      	bcc.n	800577c <UART_WaitOnFlagUntilTimeout+0x32>
 8005776:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005778:	2b00      	cmp	r3, #0
 800577a:	d140      	bne.n	80057fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800578a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800578c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005790:	667b      	str	r3, [r7, #100]	; 0x64
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800579a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800579c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e6      	bne.n	800577c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3308      	adds	r3, #8
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c0:	f023 0301 	bic.w	r3, r3, #1
 80057c4:	663b      	str	r3, [r7, #96]	; 0x60
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3308      	adds	r3, #8
 80057cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80057ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80057d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e5      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e069      	b.n	80058d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0304 	and.w	r3, r3, #4
 8005808:	2b00      	cmp	r3, #0
 800580a:	d051      	beq.n	80058b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800581a:	d149      	bne.n	80058b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005824:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800583a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	461a      	mov	r2, r3
 8005842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
 8005846:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800584a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800584c:	e841 2300 	strex	r3, r2, [r1]
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1e6      	bne.n	8005826 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3308      	adds	r3, #8
 800585e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	e853 3f00 	ldrex	r3, [r3]
 8005866:	613b      	str	r3, [r7, #16]
   return(result);
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f023 0301 	bic.w	r3, r3, #1
 800586e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3308      	adds	r3, #8
 8005876:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005878:	623a      	str	r2, [r7, #32]
 800587a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587c:	69f9      	ldr	r1, [r7, #28]
 800587e:	6a3a      	ldr	r2, [r7, #32]
 8005880:	e841 2300 	strex	r3, r2, [r1]
 8005884:	61bb      	str	r3, [r7, #24]
   return(result);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1e5      	bne.n	8005858 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e010      	b.n	80058d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69da      	ldr	r2, [r3, #28]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4013      	ands	r3, r2
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	429a      	cmp	r2, r3
 80058be:	bf0c      	ite	eq
 80058c0:	2301      	moveq	r3, #1
 80058c2:	2300      	movne	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	79fb      	ldrb	r3, [r7, #7]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	f43f af46 	beq.w	800575c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3770      	adds	r7, #112	; 0x70
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e027      	b.n	8005940 <HAL_UARTEx_DisableFifoMode+0x66>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2224      	movs	r2, #36	; 0x24
 80058fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800591e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3714      	adds	r7, #20
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005960:	2302      	movs	r3, #2
 8005962:	e02d      	b.n	80059c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2224      	movs	r2, #36	; 0x24
 8005970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0201 	bic.w	r2, r2, #1
 800598a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f84f 	bl	8005a44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059dc:	2302      	movs	r3, #2
 80059de:	e02d      	b.n	8005a3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2224      	movs	r2, #36	; 0x24
 80059ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 0201 	bic.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f811 	bl	8005a44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d108      	bne.n	8005a66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a64:	e031      	b.n	8005aca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a66:	2310      	movs	r3, #16
 8005a68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a6a:	2310      	movs	r3, #16
 8005a6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	0e5b      	lsrs	r3, r3, #25
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0307 	and.w	r3, r3, #7
 8005a7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	0f5b      	lsrs	r3, r3, #29
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	7b3a      	ldrb	r2, [r7, #12]
 8005a92:	4911      	ldr	r1, [pc, #68]	; (8005ad8 <UARTEx_SetNbDataToProcess+0x94>)
 8005a94:	5c8a      	ldrb	r2, [r1, r2]
 8005a96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a9a:	7b3a      	ldrb	r2, [r7, #12]
 8005a9c:	490f      	ldr	r1, [pc, #60]	; (8005adc <UARTEx_SetNbDataToProcess+0x98>)
 8005a9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	7b7a      	ldrb	r2, [r7, #13]
 8005ab0:	4909      	ldr	r1, [pc, #36]	; (8005ad8 <UARTEx_SetNbDataToProcess+0x94>)
 8005ab2:	5c8a      	ldrb	r2, [r1, r2]
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ab8:	7b7a      	ldrb	r2, [r7, #13]
 8005aba:	4908      	ldr	r1, [pc, #32]	; (8005adc <UARTEx_SetNbDataToProcess+0x98>)
 8005abc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005abe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	08007b40 	.word	0x08007b40
 8005adc:	08007b48 	.word	0x08007b48

08005ae0 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b096      	sub	sp, #88	; 0x58
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3303      	adds	r3, #3
 8005af2:	f023 0303 	bic.w	r3, r3, #3
 8005af6:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005af8:	f3ef 8310 	mrs	r3, PRIMASK
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 8005afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8005b00:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8005b02:	b672      	cpsid	i
#endif
    return(int_posture);
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8005b06:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005b08:	4b55      	ldr	r3, [pc, #340]	; (8005c60 <_tx_byte_allocate+0x180>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b16:	621a      	str	r2, [r3, #32]
 8005b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1e:	f383 8810 	msr	PRIMASK, r3
}
 8005b22:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f9b2 	bl	8005e90 <_tx_byte_pool_search>
 8005b2c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005b2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b32:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005b36:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005b38:	b672      	cpsid	i
    return(int_posture);
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8005b3c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8005b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8005b44:	2301      	movs	r3, #1
 8005b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b48:	e006      	b.n	8005b58 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d101      	bne.n	8005b58 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8005b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0d9      	beq.n	8005b12 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b62:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8005b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <_tx_byte_allocate+0x9c>
 8005b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	f383 8810 	msr	PRIMASK, r3
}
 8005b74:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8005b76:	2300      	movs	r3, #0
 8005b78:	653b      	str	r3, [r7, #80]	; 0x50
 8005b7a:	e06c      	b.n	8005c56 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d061      	beq.n	8005c46 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8005b82:	4b38      	ldr	r3, [pc, #224]	; (8005c64 <_tx_byte_allocate+0x184>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8005b8a:	2310      	movs	r3, #16
 8005b8c:	653b      	str	r3, [r7, #80]	; 0x50
 8005b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b90:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	f383 8810 	msr	PRIMASK, r3
}
 8005b98:	e05d      	b.n	8005c56 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8005b9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b9c:	4a32      	ldr	r2, [pc, #200]	; (8005c68 <_tx_byte_allocate+0x188>)
 8005b9e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8005ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8005ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8005bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005bb8:	1c5a      	adds	r2, r3, #1
 8005bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bbc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8005bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d109      	bne.n	8005bea <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bda:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8005bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005be0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8005be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005be4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005be6:	675a      	str	r2, [r3, #116]	; 0x74
 8005be8:	e011      	b.n	8005c0e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8005bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bf4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8005bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bfa:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8005bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c00:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c06:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8005c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c0c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8005c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c10:	2209      	movs	r2, #9
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c16:	2201      	movs	r2, #1
 8005c18:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8005c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <_tx_byte_allocate+0x184>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3301      	adds	r3, #1
 8005c26:	4a0f      	ldr	r2, [pc, #60]	; (8005c64 <_tx_byte_allocate+0x184>)
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c2c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f383 8810 	msr	PRIMASK, r3
}
 8005c34:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005c36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005c38:	f000 ffa2 	bl	8006b80 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c42:	653b      	str	r3, [r7, #80]	; 0x50
 8005c44:	e007      	b.n	8005c56 <_tx_byte_allocate+0x176>
 8005c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c48:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f383 8810 	msr	PRIMASK, r3
}
 8005c50:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8005c52:	2310      	movs	r3, #16
 8005c54:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8005c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3758      	adds	r7, #88	; 0x58
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	240015d4 	.word	0x240015d4
 8005c64:	240015d0 	.word	0x240015d0
 8005c68:	08005c6d 	.word	0x08005c6d

08005c6c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b08e      	sub	sp, #56	; 0x38
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005c76:	f3ef 8310 	mrs	r3, PRIMASK
 8005c7a:	623b      	str	r3, [r7, #32]
    return(posture);
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005c7e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005c80:	b672      	cpsid	i
    return(int_posture);
 8005c82:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8005c84:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c8a:	4a33      	ldr	r2, [pc, #204]	; (8005d58 <_tx_byte_pool_cleanup+0xec>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d158      	bne.n	8005d42 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d152      	bne.n	8005d42 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d04c      	beq.n	8005d42 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2b      	ldr	r2, [pc, #172]	; (8005d5c <_tx_byte_pool_cleanup+0xf0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d147      	bne.n	8005d42 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d043      	beq.n	8005d42 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc4:	1e5a      	subs	r2, r3, #1
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc8:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d103      	bne.n	8005cde <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd8:	2200      	movs	r2, #0
 8005cda:	625a      	str	r2, [r3, #36]	; 0x24
 8005cdc:	e013      	b.n	8005d06 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cee:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d102      	bne.n	8005d06 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8005d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	2b09      	cmp	r3, #9
 8005d0c:	d119      	bne.n	8005d42 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2210      	movs	r2, #16
 8005d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8005d16:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <_tx_byte_pool_cleanup+0xf4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	4a10      	ldr	r2, [pc, #64]	; (8005d60 <_tx_byte_pool_cleanup+0xf4>)
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f383 8810 	msr	PRIMASK, r3
}
 8005d2a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fe13 	bl	8006958 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005d32:	f3ef 8310 	mrs	r3, PRIMASK
 8005d36:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005d38:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005d3a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005d3c:	b672      	cpsid	i
    return(int_posture);
 8005d3e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8005d40:	637b      	str	r3, [r7, #52]	; 0x34
 8005d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d44:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f383 8810 	msr	PRIMASK, r3
}
 8005d4c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005d4e:	bf00      	nop
 8005d50:	3738      	adds	r7, #56	; 0x38
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	08005c6d 	.word	0x08005c6d
 8005d5c:	42595445 	.word	0x42595445
 8005d60:	240015d0 	.word	0x240015d0

08005d64 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08e      	sub	sp, #56	; 0x38
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8005d72:	2234      	movs	r2, #52	; 0x34
 8005d74:	2100      	movs	r1, #0
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f001 fe76 	bl	8007a68 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	f1a3 0208 	sub.w	r2, r3, #8
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2202      	movs	r2, #2
 8005db0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 8005db6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	4413      	add	r3, r2
 8005dbc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	3b04      	subs	r3, #4
 8005dc2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8005dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8005dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd4:	3b04      	subs	r3, #4
 8005dd6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8005dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dee:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8005df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005df6:	3304      	adds	r3, #4
 8005df8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	4a1f      	ldr	r2, [pc, #124]	; (8005e80 <_tx_byte_pool_create+0x11c>)
 8005e02:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005e10:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005e12:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e14:	b672      	cpsid	i
    return(int_posture);
 8005e16:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8005e18:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4a19      	ldr	r2, [pc, #100]	; (8005e84 <_tx_byte_pool_create+0x120>)
 8005e1e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8005e20:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <_tx_byte_pool_create+0x124>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d109      	bne.n	8005e3c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8005e28:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <_tx_byte_pool_create+0x128>)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68fa      	ldr	r2, [r7, #12]
 8005e32:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	631a      	str	r2, [r3, #48]	; 0x30
 8005e3a:	e011      	b.n	8005e60 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8005e3c:	4b13      	ldr	r3, [pc, #76]	; (8005e8c <_tx_byte_pool_create+0x128>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8005e42:	6a3b      	ldr	r3, [r7, #32]
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a3a      	ldr	r2, [r7, #32]
 8005e5e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8005e60:	4b09      	ldr	r3, [pc, #36]	; (8005e88 <_tx_byte_pool_create+0x124>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a08      	ldr	r2, [pc, #32]	; (8005e88 <_tx_byte_pool_create+0x124>)
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f383 8810 	msr	PRIMASK, r3
}
 8005e74:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8005e76:	2300      	movs	r3, #0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3738      	adds	r7, #56	; 0x38
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	ffffeeee 	.word	0xffffeeee
 8005e84:	42595445 	.word	0x42595445
 8005e88:	24001534 	.word	0x24001534
 8005e8c:	24001518 	.word	0x24001518

08005e90 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b097      	sub	sp, #92	; 0x5c
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8005ea6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005ea8:	b672      	cpsid	i
    return(int_posture);
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8005eac:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	3b02      	subs	r3, #2
 8005eb8:	00db      	lsls	r3, r3, #3
 8005eba:	4413      	add	r3, r2
 8005ebc:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d308      	bcc.n	8005ed8 <_tx_byte_pool_search+0x48>
 8005ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f383 8810 	msr	PRIMASK, r3
}
 8005ed0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ed6:	e0dd      	b.n	8006094 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8005ed8:	4b72      	ldr	r3, [pc, #456]	; (80060a4 <_tx_byte_pool_search+0x214>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ee2:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8005ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef8:	3304      	adds	r3, #4
 8005efa:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8005efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efe:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8005f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a68      	ldr	r2, [pc, #416]	; (80060a8 <_tx_byte_pool_search+0x218>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d143      	bne.n	8005f92 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 8005f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f14:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8005f16:	2301      	movs	r3, #1
 8005f18:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8005f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8005f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8005f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2e:	3b08      	subs	r3, #8
 8005f30:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8005f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d257      	bcs.n	8005fea <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8005f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f40:	3304      	adds	r3, #4
 8005f42:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8005f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a56      	ldr	r2, [pc, #344]	; (80060a8 <_tx_byte_pool_search+0x218>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d113      	bne.n	8005f7a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8005f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f54:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8005f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	1e5a      	subs	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d114      	bne.n	8005f9c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f76:	615a      	str	r2, [r3, #20]
 8005f78:	e010      	b.n	8005f9c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8005f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 8005f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f90:	e004      	b.n	8005f9c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8005f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f94:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8005f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8005fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005faa:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f383 8810 	msr	PRIMASK, r3
}
 8005fb2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb8:	61bb      	str	r3, [r7, #24]
    return(posture);
 8005fba:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005fbc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005fbe:	b672      	cpsid	i
    return(int_posture);
 8005fc0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8005fc2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d009      	beq.n	8005fe2 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	3301      	adds	r3, #1
 8005fda:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fe0:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8005fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d186      	bne.n	8005ef6 <_tx_byte_pool_search+0x66>
 8005fe8:	e000      	b.n	8005fec <_tx_byte_pool_search+0x15c>
                    break;
 8005fea:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8005fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d048      	beq.n	8006084 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8005ff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	2b13      	cmp	r3, #19
 8005ffa:	d91e      	bls.n	800603a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	3308      	adds	r3, #8
 8006000:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006002:	4413      	add	r3, r2
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8006006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800600a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800600c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8006016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006018:	3304      	adds	r3, #4
 800601a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800601c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800601e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8006020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <_tx_byte_pool_search+0x218>)
 8006024:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006034:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800603a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603c:	3304      	adds	r3, #4
 800603e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8006040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006042:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	689a      	ldr	r2, [r3, #8]
 800604e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	f1a3 0208 	sub.w	r2, r3, #8
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006060:	429a      	cmp	r2, r3
 8006062:	d105      	bne.n	8006070 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8006064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006066:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8006068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	615a      	str	r2, [r3, #20]
 8006070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006072:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f383 8810 	msr	PRIMASK, r3
}
 800607a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800607c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800607e:	3308      	adds	r3, #8
 8006080:	653b      	str	r3, [r7, #80]	; 0x50
 8006082:	e007      	b.n	8006094 <_tx_byte_pool_search+0x204>
 8006084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006086:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	f383 8810 	msr	PRIMASK, r3
}
 800608e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8006090:	2300      	movs	r3, #0
 8006092:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8006094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8006096:	4618      	mov	r0, r3
 8006098:	375c      	adds	r7, #92	; 0x5c
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	240015d4 	.word	0x240015d4
 80060a8:	ffffeeee 	.word	0xffffeeee

080060ac <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80060b0:	f000 fb0c 	bl	80066cc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80060b4:	f000 ffa4 	bl	8007000 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80060b8:	4b12      	ldr	r3, [pc, #72]	; (8006104 <_tx_initialize_high_level+0x58>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <_tx_initialize_high_level+0x5c>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80060c4:	4b11      	ldr	r3, [pc, #68]	; (800610c <_tx_initialize_high_level+0x60>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	4b11      	ldr	r3, [pc, #68]	; (8006110 <_tx_initialize_high_level+0x64>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80060d0:	4b10      	ldr	r3, [pc, #64]	; (8006114 <_tx_initialize_high_level+0x68>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	4b10      	ldr	r3, [pc, #64]	; (8006118 <_tx_initialize_high_level+0x6c>)
 80060d8:	2200      	movs	r2, #0
 80060da:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80060dc:	4b0f      	ldr	r3, [pc, #60]	; (800611c <_tx_initialize_high_level+0x70>)
 80060de:	2200      	movs	r2, #0
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <_tx_initialize_high_level+0x74>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80060e8:	4b0e      	ldr	r3, [pc, #56]	; (8006124 <_tx_initialize_high_level+0x78>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <_tx_initialize_high_level+0x7c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80060f4:	4b0d      	ldr	r3, [pc, #52]	; (800612c <_tx_initialize_high_level+0x80>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <_tx_initialize_high_level+0x84>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	601a      	str	r2, [r3, #0]
#endif
}
 8006100:	bf00      	nop
 8006102:	bd80      	pop	{r7, pc}
 8006104:	24001514 	.word	0x24001514
 8006108:	24001524 	.word	0x24001524
 800610c:	24001530 	.word	0x24001530
 8006110:	24001510 	.word	0x24001510
 8006114:	24001504 	.word	0x24001504
 8006118:	24001528 	.word	0x24001528
 800611c:	2400152c 	.word	0x2400152c
 8006120:	24001520 	.word	0x24001520
 8006124:	24001518 	.word	0x24001518
 8006128:	24001534 	.word	0x24001534
 800612c:	2400150c 	.word	0x2400150c
 8006130:	24001508 	.word	0x24001508

08006134 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8006138:	4b10      	ldr	r3, [pc, #64]	; (800617c <_tx_initialize_kernel_enter+0x48>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8006140:	d00c      	beq.n	800615c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8006142:	4b0e      	ldr	r3, [pc, #56]	; (800617c <_tx_initialize_kernel_enter+0x48>)
 8006144:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8006148:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800614a:	f7fa f8d1 	bl	80002f0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800614e:	f7ff ffad 	bl	80060ac <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8006152:	4b0b      	ldr	r3, [pc, #44]	; (8006180 <_tx_initialize_kernel_enter+0x4c>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3301      	adds	r3, #1
 8006158:	4a09      	ldr	r2, [pc, #36]	; (8006180 <_tx_initialize_kernel_enter+0x4c>)
 800615a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800615c:	4b07      	ldr	r3, [pc, #28]	; (800617c <_tx_initialize_kernel_enter+0x48>)
 800615e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8006162:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8006164:	4b07      	ldr	r3, [pc, #28]	; (8006184 <_tx_initialize_kernel_enter+0x50>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7fa fb61 	bl	8000830 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800616e:	4b03      	ldr	r3, [pc, #12]	; (800617c <_tx_initialize_kernel_enter+0x48>)
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8006174:	f7fa f8fc 	bl	8000370 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}
 800617c:	24000060 	.word	0x24000060
 8006180:	240015d0 	.word	0x240015d0
 8006184:	2400151c 	.word	0x2400151c

08006188 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	; 0x38
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006192:	f3ef 8310 	mrs	r3, PRIMASK
 8006196:	623b      	str	r3, [r7, #32]
    return(posture);
 8006198:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800619a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800619c:	b672      	cpsid	i
    return(int_posture);
 800619e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061a6:	4a33      	ldr	r2, [pc, #204]	; (8006274 <_tx_semaphore_cleanup+0xec>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d158      	bne.n	800625e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d152      	bne.n	800625e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061bc:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d04c      	beq.n	800625e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a2b      	ldr	r2, [pc, #172]	; (8006278 <_tx_semaphore_cleanup+0xf0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d147      	bne.n	800625e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 80061ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d043      	beq.n	800625e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	1e5a      	subs	r2, r3, #1
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80061e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d103      	bne.n	80061fa <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80061f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f4:	2200      	movs	r2, #0
 80061f6:	60da      	str	r2, [r3, #12]
 80061f8:	e013      	b.n	8006222 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fe:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8006206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800620a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006210:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	429a      	cmp	r2, r3
 800621a:	d102      	bne.n	8006222 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006220:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	2b06      	cmp	r3, #6
 8006228:	d119      	bne.n	800625e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	220d      	movs	r2, #13
 800622e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8006232:	4b12      	ldr	r3, [pc, #72]	; (800627c <_tx_semaphore_cleanup+0xf4>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	4a10      	ldr	r2, [pc, #64]	; (800627c <_tx_semaphore_cleanup+0xf4>)
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	f383 8810 	msr	PRIMASK, r3
}
 8006246:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fb85 	bl	8006958 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800624e:	f3ef 8310 	mrs	r3, PRIMASK
 8006252:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006254:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006256:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006258:	b672      	cpsid	i
    return(int_posture);
 800625a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f383 8810 	msr	PRIMASK, r3
}
 8006268:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800626a:	bf00      	nop
 800626c:	3738      	adds	r7, #56	; 0x38
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	08006189 	.word	0x08006189
 8006278:	53454d41 	.word	0x53454d41
 800627c:	240015d0 	.word	0x240015d0

08006280 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	; 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800628c:	221c      	movs	r2, #28
 800628e:	2100      	movs	r1, #0
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f001 fbe9 	bl	8007a68 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80062a2:	f3ef 8310 	mrs	r3, PRIMASK
 80062a6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80062a8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80062aa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80062ac:	b672      	cpsid	i
    return(int_posture);
 80062ae:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4a18      	ldr	r2, [pc, #96]	; (8006318 <_tx_semaphore_create+0x98>)
 80062b6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80062b8:	4b18      	ldr	r3, [pc, #96]	; (800631c <_tx_semaphore_create+0x9c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d109      	bne.n	80062d4 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 80062c0:	4a17      	ldr	r2, [pc, #92]	; (8006320 <_tx_semaphore_create+0xa0>)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	619a      	str	r2, [r3, #24]
 80062d2:	e011      	b.n	80062f8 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 80062d4:	4b12      	ldr	r3, [pc, #72]	; (8006320 <_tx_semaphore_create+0xa0>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 80062e0:	6a3b      	ldr	r3, [r7, #32]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6a3a      	ldr	r2, [r7, #32]
 80062f6:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 80062f8:	4b08      	ldr	r3, [pc, #32]	; (800631c <_tx_semaphore_create+0x9c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3301      	adds	r3, #1
 80062fe:	4a07      	ldr	r2, [pc, #28]	; (800631c <_tx_semaphore_create+0x9c>)
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	f383 8810 	msr	PRIMASK, r3
}
 800630c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3728      	adds	r7, #40	; 0x28
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	53454d41 	.word	0x53454d41
 800631c:	24001524 	.word	0x24001524
 8006320:	24001514 	.word	0x24001514

08006324 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b08e      	sub	sp, #56	; 0x38
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800632e:	2300      	movs	r3, #0
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006332:	f3ef 8310 	mrs	r3, PRIMASK
 8006336:	623b      	str	r3, [r7, #32]
    return(posture);
 8006338:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800633a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800633c:	b672      	cpsid	i
    return(int_posture);
 800633e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8006340:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	1e5a      	subs	r2, r3, #1
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	609a      	str	r2, [r3, #8]
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	f383 8810 	msr	PRIMASK, r3
}
 800635e:	e068      	b.n	8006432 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d05d      	beq.n	8006422 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8006366:	4b35      	ldr	r3, [pc, #212]	; (800643c <_tx_semaphore_get+0x118>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d008      	beq.n	8006380 <_tx_semaphore_get+0x5c>
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f383 8810 	msr	PRIMASK, r3
}
 8006378:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 800637a:	230d      	movs	r3, #13
 800637c:	637b      	str	r3, [r7, #52]	; 0x34
 800637e:	e058      	b.n	8006432 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8006380:	4b2f      	ldr	r3, [pc, #188]	; (8006440 <_tx_semaphore_get+0x11c>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	4a2e      	ldr	r2, [pc, #184]	; (8006444 <_tx_semaphore_get+0x120>)
 800638a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d109      	bne.n	80063bc <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ac:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 80063ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b2:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 80063b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063b8:	675a      	str	r2, [r3, #116]	; 0x74
 80063ba:	e011      	b.n	80063e0 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c6:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d2:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d8:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063de:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	1c5a      	adds	r2, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	2206      	movs	r2, #6
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	2201      	movs	r2, #1
 80063f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80063f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80063fc:	4b0f      	ldr	r3, [pc, #60]	; (800643c <_tx_semaphore_get+0x118>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3301      	adds	r3, #1
 8006402:	4a0e      	ldr	r2, [pc, #56]	; (800643c <_tx_semaphore_get+0x118>)
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f383 8810 	msr	PRIMASK, r3
}
 8006410:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8006412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006414:	f000 fbb4 	bl	8006b80 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
 8006420:	e007      	b.n	8006432 <_tx_semaphore_get+0x10e>
 8006422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006424:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f383 8810 	msr	PRIMASK, r3
}
 800642c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 800642e:	230d      	movs	r3, #13
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8006432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006434:	4618      	mov	r0, r3
 8006436:	3738      	adds	r7, #56	; 0x38
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	240015d0 	.word	0x240015d0
 8006440:	240015d4 	.word	0x240015d4
 8006444:	08006189 	.word	0x08006189

08006448 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08c      	sub	sp, #48	; 0x30
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006450:	f3ef 8310 	mrs	r3, PRIMASK
 8006454:	61bb      	str	r3, [r7, #24]
    return(posture);
 8006456:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006458:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800645a:	b672      	cpsid	i
    return(int_posture);
 800645c:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	609a      	str	r2, [r3, #8]
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f383 8810 	msr	PRIMASK, r3
}
 8006480:	e033      	b.n	80064ea <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	3b01      	subs	r3, #1
 800648c:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	60da      	str	r2, [r3, #12]
 800649a:	e00e      	b.n	80064ba <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a0:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a3a      	ldr	r2, [r7, #32]
 80064a6:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064ac:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	6a3a      	ldr	r2, [r7, #32]
 80064b8:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064be:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	2200      	movs	r2, #0
 80064c4:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <_tx_semaphore_put+0xac>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	3301      	adds	r3, #1
 80064d4:	4a07      	ldr	r2, [pc, #28]	; (80064f4 <_tx_semaphore_put+0xac>)
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f383 8810 	msr	PRIMASK, r3
}
 80064e2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 80064e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064e6:	f000 fa37 	bl	8006958 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3730      	adds	r7, #48	; 0x30
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	240015d0 	.word	0x240015d0

080064f8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b092      	sub	sp, #72	; 0x48
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8006506:	2300      	movs	r3, #0
 8006508:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800650a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800650c:	21ef      	movs	r1, #239	; 0xef
 800650e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006510:	f001 faaa 	bl	8007a68 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8006514:	22b0      	movs	r2, #176	; 0xb0
 8006516:	2100      	movs	r1, #0
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f001 faa5 	bl	8007a68 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006534:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800653a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006540:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006546:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800654e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006554:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2220      	movs	r2, #32
 800655a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800655e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006560:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8006562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006564:	3b01      	subs	r3, #1
 8006566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006568:	4413      	add	r3, r2
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006570:	611a      	str	r2, [r3, #16]

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Preemption-threshold is enabled, setup accordingly.  */
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006576:	63da      	str	r2, [r3, #60]	; 0x3c
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800657c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2203      	movs	r2, #3
 8006584:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4a48      	ldr	r2, [pc, #288]	; (80066ac <_tx_thread_create+0x1b4>)
 800658a:	655a      	str	r2, [r3, #84]	; 0x54
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8006592:	4947      	ldr	r1, [pc, #284]	; (80066b0 <_tx_thread_create+0x1b8>)
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7f9 ff4b 	bl	8000430 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800659a:	f3ef 8310 	mrs	r3, PRIMASK
 800659e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80065a2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80065a4:	b672      	cpsid	i
    return(int_posture);
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4a41      	ldr	r2, [pc, #260]	; (80066b4 <_tx_thread_create+0x1bc>)
 80065ae:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80065b0:	4b41      	ldr	r3, [pc, #260]	; (80066b8 <_tx_thread_create+0x1c0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <_tx_thread_create+0xd8>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80065b8:	4a40      	ldr	r2, [pc, #256]	; (80066bc <_tx_thread_create+0x1c4>)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80065ce:	e016      	b.n	80065fe <_tx_thread_create+0x106>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80065d0:	4b3a      	ldr	r3, [pc, #232]	; (80066bc <_tx_thread_create+0x1c4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80065d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065dc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80065de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80065fe:	4b2e      	ldr	r3, [pc, #184]	; (80066b8 <_tx_thread_create+0x1c0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3301      	adds	r3, #1
 8006604:	4a2c      	ldr	r2, [pc, #176]	; (80066b8 <_tx_thread_create+0x1c0>)
 8006606:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006608:	4b2d      	ldr	r3, [pc, #180]	; (80066c0 <_tx_thread_create+0x1c8>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3301      	adds	r3, #1
 800660e:	4a2c      	ldr	r2, [pc, #176]	; (80066c0 <_tx_thread_create+0x1c8>)
 8006610:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8006612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006614:	2b01      	cmp	r3, #1
 8006616:	d129      	bne.n	800666c <_tx_thread_create+0x174>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006618:	f3ef 8305 	mrs	r3, IPSR
 800661c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800661e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8006620:	4b28      	ldr	r3, [pc, #160]	; (80066c4 <_tx_thread_create+0x1cc>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4313      	orrs	r3, r2
 8006626:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800662a:	d30d      	bcc.n	8006648 <_tx_thread_create+0x150>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800662c:	4b26      	ldr	r3, [pc, #152]	; (80066c8 <_tx_thread_create+0x1d0>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8006632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006634:	2b00      	cmp	r3, #0
 8006636:	d009      	beq.n	800664c <_tx_thread_create+0x154>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8006638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800663c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800663e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006644:	63da      	str	r2, [r3, #60]	; 0x3c
 8006646:	e001      	b.n	800664c <_tx_thread_create+0x154>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8006648:	2300      	movs	r3, #0
 800664a:	647b      	str	r3, [r7, #68]	; 0x44
 800664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006650:	6a3b      	ldr	r3, [r7, #32]
 8006652:	f383 8810 	msr	PRIMASK, r3
}
 8006656:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 f97d 	bl	8006958 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800665e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01e      	beq.n	80066a2 <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8006664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006668:	63da      	str	r2, [r3, #60]	; 0x3c
 800666a:	e01a      	b.n	80066a2 <_tx_thread_create+0x1aa>
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	f383 8810 	msr	PRIMASK, r3
}
 8006676:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006678:	f3ef 8310 	mrs	r3, PRIMASK
 800667c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800667e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8006680:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006682:	b672      	cpsid	i
    return(int_posture);
 8006684:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8006686:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8006688:	4b0d      	ldr	r3, [pc, #52]	; (80066c0 <_tx_thread_create+0x1c8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3b01      	subs	r3, #1
 800668e:	4a0c      	ldr	r2, [pc, #48]	; (80066c0 <_tx_thread_create+0x1c8>)
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	f383 8810 	msr	PRIMASK, r3
}
 800669c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800669e:	f000 f921 	bl	80068e4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3748      	adds	r7, #72	; 0x48
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	08006f45 	.word	0x08006f45
 80066b0:	0800674d 	.word	0x0800674d
 80066b4:	54485244 	.word	0x54485244
 80066b8:	240015c8 	.word	0x240015c8
 80066bc:	240015c0 	.word	0x240015c0
 80066c0:	240015d0 	.word	0x240015d0
 80066c4:	24000060 	.word	0x24000060
 80066c8:	240015d8 	.word	0x240015d8

080066cc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80066d0:	4b13      	ldr	r3, [pc, #76]	; (8006720 <_tx_thread_initialize+0x54>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80066d6:	4b13      	ldr	r3, [pc, #76]	; (8006724 <_tx_thread_initialize+0x58>)
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	4b12      	ldr	r3, [pc, #72]	; (8006728 <_tx_thread_initialize+0x5c>)
 80066de:	2200      	movs	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
 80066e2:	4b12      	ldr	r3, [pc, #72]	; (800672c <_tx_thread_initialize+0x60>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80066e8:	4b11      	ldr	r3, [pc, #68]	; (8006730 <_tx_thread_initialize+0x64>)
 80066ea:	2220      	movs	r2, #32
 80066ec:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80066ee:	2280      	movs	r2, #128	; 0x80
 80066f0:	2100      	movs	r1, #0
 80066f2:	4810      	ldr	r0, [pc, #64]	; (8006734 <_tx_thread_initialize+0x68>)
 80066f4:	f001 f9b8 	bl	8007a68 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80066f8:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <_tx_thread_initialize+0x6c>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80066fe:	4b0f      	ldr	r3, [pc, #60]	; (800673c <_tx_thread_initialize+0x70>)
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8006704:	4b0e      	ldr	r3, [pc, #56]	; (8006740 <_tx_thread_initialize+0x74>)
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800670a:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <_tx_thread_initialize+0x78>)
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8006710:	4b0d      	ldr	r3, [pc, #52]	; (8006748 <_tx_thread_initialize+0x7c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f043 7381 	orr.w	r3, r3, #16908288	; 0x1020000
    _tx_build_options =  _tx_build_options 
 8006718:	4a0b      	ldr	r2, [pc, #44]	; (8006748 <_tx_thread_initialize+0x7c>)
 800671a:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800671c:	bf00      	nop
 800671e:	bd80      	pop	{r7, pc}
 8006720:	240015d4 	.word	0x240015d4
 8006724:	240015d8 	.word	0x240015d8
 8006728:	240015bc 	.word	0x240015bc
 800672c:	240015e0 	.word	0x240015e0
 8006730:	240015dc 	.word	0x240015dc
 8006734:	24001538 	.word	0x24001538
 8006738:	240015c0 	.word	0x240015c0
 800673c:	240015c8 	.word	0x240015c8
 8006740:	240015d0 	.word	0x240015d0
 8006744:	240015b8 	.word	0x240015b8
 8006748:	240015c4 	.word	0x240015c4

0800674c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006752:	4b21      	ldr	r3, [pc, #132]	; (80067d8 <_tx_thread_shell_entry+0x8c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006760:	4610      	mov	r0, r2
 8006762:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8006764:	4b1d      	ldr	r3, [pc, #116]	; (80067dc <_tx_thread_shell_entry+0x90>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d003      	beq.n	8006774 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800676c:	4b1b      	ldr	r3, [pc, #108]	; (80067dc <_tx_thread_shell_entry+0x90>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69f8      	ldr	r0, [r7, #28]
 8006772:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006774:	f3ef 8310 	mrs	r3, PRIMASK
 8006778:	607b      	str	r3, [r7, #4]
    return(posture);
 800677a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800677c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800677e:	b672      	cpsid	i
    return(int_posture);
 8006780:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8006782:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2201      	movs	r2, #1
 8006788:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	2201      	movs	r2, #1
 800678e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	2200      	movs	r2, #0
 8006794:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8006796:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <_tx_thread_shell_entry+0x94>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3301      	adds	r3, #1
 800679c:	4a10      	ldr	r2, [pc, #64]	; (80067e0 <_tx_thread_shell_entry+0x94>)
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f383 8810 	msr	PRIMASK, r3
}
 80067aa:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80067ac:	f3ef 8314 	mrs	r3, CONTROL
 80067b0:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80067b2:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f023 0304 	bic.w	r3, r3, #4
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f383 8814 	msr	CONTROL, r3
}
 80067c8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80067ca:	69f8      	ldr	r0, [r7, #28]
 80067cc:	f000 f9d8 	bl	8006b80 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80067d0:	bf00      	nop
 80067d2:	3720      	adds	r7, #32
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	240015d4 	.word	0x240015d4
 80067dc:	240015b8 	.word	0x240015b8
 80067e0:	240015d0 	.word	0x240015d0

080067e4 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08e      	sub	sp, #56	; 0x38
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80067ec:	f3ef 8310 	mrs	r3, PRIMASK
 80067f0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80067f6:	b672      	cpsid	i
    return(int_posture);
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80067fa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80067fc:	4b35      	ldr	r3, [pc, #212]	; (80068d4 <_tx_thread_sleep+0xf0>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8006802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006804:	2b00      	cmp	r3, #0
 8006806:	d108      	bne.n	800681a <_tx_thread_sleep+0x36>
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	f383 8810 	msr	PRIMASK, r3
}
 8006812:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8006814:	2313      	movs	r3, #19
 8006816:	637b      	str	r3, [r7, #52]	; 0x34
 8006818:	e056      	b.n	80068c8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800681a:	f3ef 8305 	mrs	r3, IPSR
 800681e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8006820:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006822:	4b2d      	ldr	r3, [pc, #180]	; (80068d8 <_tx_thread_sleep+0xf4>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4313      	orrs	r3, r2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <_tx_thread_sleep+0x5a>
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f383 8810 	msr	PRIMASK, r3
}
 8006836:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8006838:	2313      	movs	r3, #19
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
 800683c:	e044      	b.n	80068c8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800683e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006840:	4a26      	ldr	r2, [pc, #152]	; (80068dc <_tx_thread_sleep+0xf8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <_tx_thread_sleep+0x74>
 8006846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006848:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f383 8810 	msr	PRIMASK, r3
}
 8006850:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8006852:	2313      	movs	r3, #19
 8006854:	637b      	str	r3, [r7, #52]	; 0x34
 8006856:	e037      	b.n	80068c8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d108      	bne.n	8006870 <_tx_thread_sleep+0x8c>
 800685e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006860:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f383 8810 	msr	PRIMASK, r3
}
 8006868:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800686a:	2300      	movs	r3, #0
 800686c:	637b      	str	r3, [r7, #52]	; 0x34
 800686e:	e02b      	b.n	80068c8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8006870:	4b1b      	ldr	r3, [pc, #108]	; (80068e0 <_tx_thread_sleep+0xfc>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <_tx_thread_sleep+0xa6>
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f383 8810 	msr	PRIMASK, r3
}
 8006882:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8006884:	2313      	movs	r3, #19
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
 8006888:	e01e      	b.n	80068c8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	2204      	movs	r2, #4
 800688e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	2201      	movs	r2, #1
 8006894:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	2200      	movs	r2, #0
 800689a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80068a4:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <_tx_thread_sleep+0xfc>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3301      	adds	r3, #1
 80068aa:	4a0d      	ldr	r2, [pc, #52]	; (80068e0 <_tx_thread_sleep+0xfc>)
 80068ac:	6013      	str	r3, [r2, #0]
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f383 8810 	msr	PRIMASK, r3
}
 80068b8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80068ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068bc:	f000 f960 	bl	8006b80 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80068c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068c6:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80068c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3738      	adds	r7, #56	; 0x38
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	240015d4 	.word	0x240015d4
 80068d8:	24000060 	.word	0x24000060
 80068dc:	24001678 	.word	0x24001678
 80068e0:	240015d0 	.word	0x240015d0

080068e4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b089      	sub	sp, #36	; 0x24
 80068e8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80068ea:	4b17      	ldr	r3, [pc, #92]	; (8006948 <_tx_thread_system_preempt_check+0x64>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d121      	bne.n	800693a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80068f6:	4b15      	ldr	r3, [pc, #84]	; (800694c <_tx_thread_system_preempt_check+0x68>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80068fc:	4b14      	ldr	r3, [pc, #80]	; (8006950 <_tx_thread_system_preempt_check+0x6c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	429a      	cmp	r2, r3
 8006908:	d017      	beq.n	800693a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <_tx_thread_system_preempt_check+0x70>)
 800690c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006910:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006912:	f3ef 8305 	mrs	r3, IPSR
 8006916:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8006918:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10c      	bne.n	8006938 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800691e:	f3ef 8310 	mrs	r3, PRIMASK
 8006922:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006924:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8006926:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006928:	b662      	cpsie	i
}
 800692a:	bf00      	nop
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f383 8810 	msr	PRIMASK, r3
}
 8006936:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8006938:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800693a:	bf00      	nop
 800693c:	3724      	adds	r7, #36	; 0x24
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	240015d0 	.word	0x240015d0
 800694c:	240015d4 	.word	0x240015d4
 8006950:	240015d8 	.word	0x240015d8
 8006954:	e000ed04 	.word	0xe000ed04

08006958 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b096      	sub	sp, #88	; 0x58
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006960:	f3ef 8310 	mrs	r3, PRIMASK
 8006964:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8006966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8006968:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800696a:	b672      	cpsid	i
    return(int_posture);
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800696e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006974:	2b00      	cmp	r3, #0
 8006976:	d005      	beq.n	8006984 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	334c      	adds	r3, #76	; 0x4c
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fc1d 	bl	80071bc <_tx_timer_system_deactivate>
 8006982:	e002      	b.n	800698a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800698a:	4b75      	ldr	r3, [pc, #468]	; (8006b60 <_tx_thread_system_resume+0x208>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3b01      	subs	r3, #1
 8006990:	4a73      	ldr	r2, [pc, #460]	; (8006b60 <_tx_thread_system_resume+0x208>)
 8006992:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006998:	2b00      	cmp	r3, #0
 800699a:	f040 8096 	bne.w	8006aca <_tx_thread_system_resume+0x172>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80aa 	beq.w	8006afc <_tx_thread_system_resume+0x1a4>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f040 8085 	bne.w	8006abc <_tx_thread_system_resume+0x164>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80069be:	4a69      	ldr	r2, [pc, #420]	; (8006b64 <_tx_thread_system_resume+0x20c>)
 80069c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069c6:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80069c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d166      	bne.n	8006a9c <_tx_thread_system_resume+0x144>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80069ce:	4965      	ldr	r1, [pc, #404]	; (8006b64 <_tx_thread_system_resume+0x20c>)
 80069d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80069e4:	2201      	movs	r2, #1
 80069e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80069ee:	4b5e      	ldr	r3, [pc, #376]	; (8006b68 <_tx_thread_system_resume+0x210>)
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f4:	4313      	orrs	r3, r2
 80069f6:	4a5c      	ldr	r2, [pc, #368]	; (8006b68 <_tx_thread_system_resume+0x210>)
 80069f8:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80069fa:	4b5c      	ldr	r3, [pc, #368]	; (8006b6c <_tx_thread_system_resume+0x214>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d27b      	bcs.n	8006afc <_tx_thread_system_resume+0x1a4>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8006a04:	4a59      	ldr	r2, [pc, #356]	; (8006b6c <_tx_thread_system_resume+0x214>)
 8006a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a08:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8006a0a:	4b59      	ldr	r3, [pc, #356]	; (8006b70 <_tx_thread_system_resume+0x218>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8006a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d103      	bne.n	8006a1e <_tx_thread_system_resume+0xc6>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8006a16:	4a56      	ldr	r2, [pc, #344]	; (8006b70 <_tx_thread_system_resume+0x218>)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e06e      	b.n	8006afc <_tx_thread_system_resume+0x1a4>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8006a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d269      	bcs.n	8006afc <_tx_thread_system_resume+0x1a4>
                            {

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

                                /* Determine if the preempted thread had preemption-threshold set.  */
                                if (execute_ptr -> tx_thread_preempt_threshold != execute_ptr -> tx_thread_priority)
 8006a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d00b      	beq.n	8006a4c <_tx_thread_system_resume+0xf4>
                                    TX_DIV32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
                                    _tx_thread_preempted_map_active =  _tx_thread_preempted_map_active | priority_bit;
#endif

                                    /* Remember that this thread was preempted by a thread above the thread's threshold.  */
                                    TX_MOD32_BIT_SET(execute_ptr -> tx_thread_priority, priority_bit)
 8006a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a38:	2201      	movs	r2, #1
 8006a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a3e:	647b      	str	r3, [r7, #68]	; 0x44
                                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] | priority_bit;
 8006a40:	4b4c      	ldr	r3, [pc, #304]	; (8006b74 <_tx_thread_system_resume+0x21c>)
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a46:	4313      	orrs	r3, r2
 8006a48:	4a4a      	ldr	r2, [pc, #296]	; (8006b74 <_tx_thread_system_resume+0x21c>)
 8006a4a:	6013      	str	r3, [r2, #0]
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8006a4c:	4a48      	ldr	r2, [pc, #288]	; (8006b70 <_tx_thread_system_resume+0x218>)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a58:	f383 8810 	msr	PRIMASK, r3
}
 8006a5c:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006a5e:	4b40      	ldr	r3, [pc, #256]	; (8006b60 <_tx_thread_system_resume+0x208>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8006a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d174      	bne.n	8006b54 <_tx_thread_system_resume+0x1fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006a6a:	4b43      	ldr	r3, [pc, #268]	; (8006b78 <_tx_thread_system_resume+0x220>)
 8006a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a70:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006a72:	f3ef 8305 	mrs	r3, IPSR
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <_tx_thread_system_resume+0x140>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8006a86:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006a88:	b662      	cpsie	i
}
 8006a8a:	bf00      	nop
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f383 8810 	msr	PRIMASK, r3
}
 8006a96:	bf00      	nop
}
 8006a98:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8006a9a:	e05b      	b.n	8006b54 <_tx_thread_system_resume+0x1fc>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8006a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8006aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8006aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ab2:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ab8:	621a      	str	r2, [r3, #32]
 8006aba:	e01f      	b.n	8006afc <_tx_thread_system_resume+0x1a4>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	631a      	str	r2, [r3, #48]	; 0x30
 8006ac8:	e018      	b.n	8006afc <_tx_thread_system_resume+0x1a4>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d014      	beq.n	8006afc <_tx_thread_system_resume+0x1a4>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d010      	beq.n	8006afc <_tx_thread_system_resume+0x1a4>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d106      	bne.n	8006af0 <_tx_thread_system_resume+0x198>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30
 8006aee:	e005      	b.n	8006afc <_tx_thread_system_resume+0x1a4>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2203      	movs	r2, #3
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006afc:	4b1f      	ldr	r3, [pc, #124]	; (8006b7c <_tx_thread_system_resume+0x224>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b04:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	f383 8810 	msr	PRIMASK, r3
}
 8006b0c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8006b0e:	4b18      	ldr	r3, [pc, #96]	; (8006b70 <_tx_thread_system_resume+0x218>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d020      	beq.n	8006b5a <_tx_thread_system_resume+0x202>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006b18:	4b11      	ldr	r3, [pc, #68]	; (8006b60 <_tx_thread_system_resume+0x208>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11a      	bne.n	8006b5a <_tx_thread_system_resume+0x202>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006b24:	4b14      	ldr	r3, [pc, #80]	; (8006b78 <_tx_thread_system_resume+0x220>)
 8006b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b2a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006b2c:	f3ef 8305 	mrs	r3, IPSR
 8006b30:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006b32:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10f      	bne.n	8006b58 <_tx_thread_system_resume+0x200>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b38:	f3ef 8310 	mrs	r3, PRIMASK
 8006b3c:	613b      	str	r3, [r7, #16]
    return(posture);
 8006b3e:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8006b40:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006b42:	b662      	cpsie	i
}
 8006b44:	bf00      	nop
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f383 8810 	msr	PRIMASK, r3
}
 8006b50:	bf00      	nop
}
 8006b52:	e001      	b.n	8006b58 <_tx_thread_system_resume+0x200>
                                return;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <_tx_thread_system_resume+0x202>
 8006b58:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8006b5a:	3758      	adds	r7, #88	; 0x58
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	240015d0 	.word	0x240015d0
 8006b64:	24001538 	.word	0x24001538
 8006b68:	240015bc 	.word	0x240015bc
 8006b6c:	240015dc 	.word	0x240015dc
 8006b70:	240015d8 	.word	0x240015d8
 8006b74:	240015e0 	.word	0x240015e0
 8006b78:	e000ed04 	.word	0xe000ed04
 8006b7c:	240015d4 	.word	0x240015d4

08006b80 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b0a0      	sub	sp, #128	; 0x80
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8006b88:	4b5a      	ldr	r3, [pc, #360]	; (8006cf4 <_tx_thread_system_suspend+0x174>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	67bb      	str	r3, [r7, #120]	; 0x78
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b92:	657b      	str	r3, [r7, #84]	; 0x54
    return(posture);
 8006b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    int_posture = __get_interrupt_posture();
 8006b96:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("CPSID i" : : : "memory");
 8006b98:	b672      	cpsid	i
    return(int_posture);
 8006b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8006b9c:	67fb      	str	r3, [r7, #124]	; 0x7c

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d112      	bne.n	8006bcc <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006baa:	677b      	str	r3, [r7, #116]	; 0x74

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8006bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d008      	beq.n	8006bc4 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8006bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d004      	beq.n	8006bc4 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	334c      	adds	r3, #76	; 0x4c
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f000 fa9a 	bl	80070f8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	4a4b      	ldr	r2, [pc, #300]	; (8006cf8 <_tx_thread_system_suspend+0x178>)
 8006bca:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8006bcc:	4b4b      	ldr	r3, [pc, #300]	; (8006cfc <_tx_thread_system_suspend+0x17c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3b01      	subs	r3, #1
 8006bd2:	4a4a      	ldr	r2, [pc, #296]	; (8006cfc <_tx_thread_system_suspend+0x17c>)
 8006bd4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	f040 8122 	bne.w	8006e24 <_tx_thread_system_suspend+0x2a4>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	673b      	str	r3, [r7, #112]	; 0x70

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8006bf2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d027      	beq.n	8006c4a <_tx_thread_system_suspend+0xca>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8006c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c04:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8006c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c0a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8006c0c:	4a3c      	ldr	r2, [pc, #240]	; (8006d00 <_tx_thread_system_suspend+0x180>)
 8006c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	f040 808b 	bne.w	8006d32 <_tx_thread_system_suspend+0x1b2>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8006c1c:	4938      	ldr	r1, [pc, #224]	; (8006d00 <_tx_thread_system_suspend+0x180>)
 8006c1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                /* Calculate the index into the bit map array.  */
                map_index =  priority/((UINT) 32);
#endif

                /* Check for a thread preempted that had preemption threshold set.  */
                if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8006c26:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <_tx_thread_system_suspend+0x184>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	f000 8081 	beq.w	8006d32 <_tx_thread_system_suspend+0x1b2>
                {

                    /* Ensure that this thread's priority is clear in the preempt map.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8006c30:	2201      	movs	r2, #1
 8006c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c34:	fa02 f303 	lsl.w	r3, r2, r3
 8006c38:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8006c3a:	4b32      	ldr	r3, [pc, #200]	; (8006d04 <_tx_thread_system_suspend+0x184>)
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c40:	43db      	mvns	r3, r3
 8006c42:	4013      	ands	r3, r2
 8006c44:	4a2f      	ldr	r2, [pc, #188]	; (8006d04 <_tx_thread_system_suspend+0x184>)
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	e073      	b.n	8006d32 <_tx_thread_system_suspend+0x1b2>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8006c4a:	4a2d      	ldr	r2, [pc, #180]	; (8006d00 <_tx_thread_system_suspend+0x180>)
 8006c4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c4e:	2100      	movs	r1, #0
 8006c50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8006c54:	2201      	movs	r2, #1
 8006c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c58:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5c:	66bb      	str	r3, [r7, #104]	; 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8006c5e:	4b2a      	ldr	r3, [pc, #168]	; (8006d08 <_tx_thread_system_suspend+0x188>)
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c64:	43db      	mvns	r3, r3
 8006c66:	4013      	ands	r3, r2
 8006c68:	4a27      	ldr	r2, [pc, #156]	; (8006d08 <_tx_thread_system_suspend+0x188>)
 8006c6a:	6013      	str	r3, [r2, #0]
#endif

#ifndef TX_DISABLE_PREEMPTION_THRESHOLD

            /* Check for a thread preempted that had preemption-threshold set.  */
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8006c6c:	4b25      	ldr	r3, [pc, #148]	; (8006d04 <_tx_thread_system_suspend+0x184>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00b      	beq.n	8006c8c <_tx_thread_system_suspend+0x10c>
            {

                /* Ensure that this thread's priority is clear in the preempt map.  */
                TX_MOD32_BIT_SET(priority, priority_bit)
 8006c74:	2201      	movs	r2, #1
 8006c76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c78:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7c:	66bb      	str	r3, [r7, #104]	; 0x68
                _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8006c7e:	4b21      	ldr	r3, [pc, #132]	; (8006d04 <_tx_thread_system_suspend+0x184>)
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c84:	43db      	mvns	r3, r3
 8006c86:	4013      	ands	r3, r2
 8006c88:	4a1e      	ldr	r2, [pc, #120]	; (8006d04 <_tx_thread_system_suspend+0x184>)
 8006c8a:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	667b      	str	r3, [r7, #100]	; 0x64
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8006c90:	4b1d      	ldr	r3, [pc, #116]	; (8006d08 <_tx_thread_system_suspend+0x188>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	663b      	str	r3, [r7, #96]	; 0x60

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8006c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d13d      	bne.n	8006d18 <_tx_thread_system_suspend+0x198>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8006c9c:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <_tx_thread_system_suspend+0x18c>)
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8006ca2:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <_tx_thread_system_suspend+0x190>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006caa:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cae:	f383 8810 	msr	PRIMASK, r3
}
 8006cb2:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006cb4:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <_tx_thread_system_suspend+0x17c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (combined_flags == ((ULONG) 0))
 8006cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f040 80db 	bne.w	8006e78 <_tx_thread_system_suspend+0x2f8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006cc2:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <_tx_thread_system_suspend+0x194>)
 8006cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cc8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006cca:	f3ef 8305 	mrs	r3, IPSR
 8006cce:	64bb      	str	r3, [r7, #72]	; 0x48
    return(ipsr_value);
 8006cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    if (__get_ipsr_value() == 0)
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d10c      	bne.n	8006cf0 <_tx_thread_system_suspend+0x170>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cda:	647b      	str	r3, [r7, #68]	; 0x44
    return(posture);
 8006cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        interrupt_save = __get_interrupt_posture();
 8006cde:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006ce0:	b662      	cpsie	i
}
 8006ce2:	bf00      	nop
 8006ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cea:	f383 8810 	msr	PRIMASK, r3
}
 8006cee:	bf00      	nop
}
 8006cf0:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8006cf2:	e0c1      	b.n	8006e78 <_tx_thread_system_suspend+0x2f8>
 8006cf4:	240015d4 	.word	0x240015d4
 8006cf8:	2400166c 	.word	0x2400166c
 8006cfc:	240015d0 	.word	0x240015d0
 8006d00:	24001538 	.word	0x24001538
 8006d04:	240015e0 	.word	0x240015e0
 8006d08:	240015bc 	.word	0x240015bc
 8006d0c:	240015dc 	.word	0x240015dc
 8006d10:	240015d8 	.word	0x240015d8
 8006d14:	e000ed04 	.word	0xe000ed04
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8006d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d1a:	fa93 f3a3 	rbit	r3, r3
 8006d1e:	663b      	str	r3, [r7, #96]	; 0x60
 8006d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d22:	fab3 f383 	clz	r3, r3
 8006d26:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8006d28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d2c:	4413      	add	r3, r2
 8006d2e:	4a56      	ldr	r2, [pc, #344]	; (8006e88 <_tx_thread_system_suspend+0x308>)
 8006d30:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8006d32:	4b56      	ldr	r3, [pc, #344]	; (8006e8c <_tx_thread_system_suspend+0x30c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d173      	bne.n	8006e24 <_tx_thread_system_suspend+0x2a4>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006d3c:	4b52      	ldr	r3, [pc, #328]	; (8006e88 <_tx_thread_system_suspend+0x308>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a53      	ldr	r2, [pc, #332]	; (8006e90 <_tx_thread_system_suspend+0x310>)
 8006d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d46:	4a51      	ldr	r2, [pc, #324]	; (8006e8c <_tx_thread_system_suspend+0x30c>)
 8006d48:	6013      	str	r3, [r2, #0]

            /* Determine if a previous thread with preemption-threshold was preempted.  */
#if TX_MAX_PRIORITIES > 32
            if (_tx_thread_preempted_map_active != ((ULONG) 0))
#else
            if (_tx_thread_preempted_maps[MAP_INDEX] != ((ULONG) 0))
 8006d4a:	4b52      	ldr	r3, [pc, #328]	; (8006e94 <_tx_thread_system_suspend+0x314>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d043      	beq.n	8006dda <_tx_thread_system_suspend+0x25a>
            {

                /* Yes, there was a thread preempted when it was using preemption-threshold.  */

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8006d52:	4b51      	ldr	r3, [pc, #324]	; (8006e98 <_tx_thread_system_suspend+0x318>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3301      	adds	r3, #1
 8006d58:	4a4f      	ldr	r2, [pc, #316]	; (8006e98 <_tx_thread_system_suspend+0x318>)
 8006d5a:	6013      	str	r3, [r2, #0]
 8006d5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006d5e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d62:	f383 8810 	msr	PRIMASK, r3
}
 8006d66:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006d68:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8006d70:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8006d72:	b672      	cpsid	i
    return(int_posture);
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Interrupts are enabled briefly here to keep the interrupt
                   lockout time deterministic.  */

                /* Disable interrupts again.  */
                TX_DISABLE
 8006d76:	67fb      	str	r3, [r7, #124]	; 0x7c

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8006d78:	4b47      	ldr	r3, [pc, #284]	; (8006e98 <_tx_thread_system_suspend+0x318>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	4a46      	ldr	r2, [pc, #280]	; (8006e98 <_tx_thread_system_suspend+0x318>)
 8006d80:	6013      	str	r3, [r2, #0]
                /* Calculate the base priority as well.  */
                base_priority =  map_index * ((UINT) 32);
#else

                /* Setup the base priority to zero.  */
                base_priority =   ((UINT) 0);
 8006d82:	2300      	movs	r3, #0
 8006d84:	667b      	str	r3, [r7, #100]	; 0x64
#endif

                /* Setup temporary preempted map.  */
                priority_map =  _tx_thread_preempted_maps[MAP_INDEX];
 8006d86:	4b43      	ldr	r3, [pc, #268]	; (8006e94 <_tx_thread_system_suspend+0x314>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8006d8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d8e:	fa93 f3a3 	rbit	r3, r3
 8006d92:	663b      	str	r3, [r7, #96]	; 0x60
 8006d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d96:	fab3 f383 	clz	r3, r3
 8006d9a:	66bb      	str	r3, [r7, #104]	; 0x68

                /* Setup the highest priority preempted thread.  */
                priority =  base_priority + ((UINT) priority_bit);
 8006d9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006da0:	4413      	add	r3, r2
 8006da2:	673b      	str	r3, [r7, #112]	; 0x70

                /* Determine if the next highest priority thread is above the highest priority threshold value.  */
                if (_tx_thread_highest_priority >= (_tx_thread_priority_list[priority] -> tx_thread_preempt_threshold))
 8006da4:	4a3a      	ldr	r2, [pc, #232]	; (8006e90 <_tx_thread_system_suspend+0x310>)
 8006da6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dae:	4b36      	ldr	r3, [pc, #216]	; (8006e88 <_tx_thread_system_suspend+0x308>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d811      	bhi.n	8006dda <_tx_thread_system_suspend+0x25a>
                {

                    /* Thread not allowed to execute until earlier preempted thread finishes or lowers its
                       preemption-threshold.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[priority];
 8006db6:	4a36      	ldr	r2, [pc, #216]	; (8006e90 <_tx_thread_system_suspend+0x310>)
 8006db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dbe:	4a33      	ldr	r2, [pc, #204]	; (8006e8c <_tx_thread_system_suspend+0x30c>)
 8006dc0:	6013      	str	r3, [r2, #0]

                    /* Clear the corresponding bit in the preempted map, since the preemption has been restored.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dca:	66bb      	str	r3, [r7, #104]	; 0x68
                    _tx_thread_preempted_maps[MAP_INDEX] =  _tx_thread_preempted_maps[MAP_INDEX] & (~(priority_bit));
 8006dcc:	4b31      	ldr	r3, [pc, #196]	; (8006e94 <_tx_thread_system_suspend+0x314>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006dd2:	43db      	mvns	r3, r3
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	4a2f      	ldr	r2, [pc, #188]	; (8006e94 <_tx_thread_system_suspend+0x314>)
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	f383 8810 	msr	PRIMASK, r3
}
 8006de4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006de6:	4b2c      	ldr	r3, [pc, #176]	; (8006e98 <_tx_thread_system_suspend+0x318>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	65fb      	str	r3, [r7, #92]	; 0x5c
            if (combined_flags == ((ULONG) 0))
 8006dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d144      	bne.n	8006e7c <_tx_thread_system_suspend+0x2fc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006df2:	4b2a      	ldr	r3, [pc, #168]	; (8006e9c <_tx_thread_system_suspend+0x31c>)
 8006df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006dfa:	f3ef 8305 	mrs	r3, IPSR
 8006dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10c      	bne.n	8006e20 <_tx_thread_system_suspend+0x2a0>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006e06:	f3ef 8310 	mrs	r3, PRIMASK
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8006e0e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006e10:	b662      	cpsie	i
}
 8006e12:	bf00      	nop
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f383 8810 	msr	PRIMASK, r3
}
 8006e1e:	bf00      	nop
}
 8006e20:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8006e22:	e02b      	b.n	8006e7c <_tx_thread_system_suspend+0x2fc>
 8006e24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e26:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	f383 8810 	msr	PRIMASK, r3
}
 8006e2e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8006e30:	4b16      	ldr	r3, [pc, #88]	; (8006e8c <_tx_thread_system_suspend+0x30c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d022      	beq.n	8006e80 <_tx_thread_system_suspend+0x300>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8006e3a:	4b17      	ldr	r3, [pc, #92]	; (8006e98 <_tx_thread_system_suspend+0x318>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (combined_flags == ((ULONG) 0))
 8006e40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d11c      	bne.n	8006e80 <_tx_thread_system_suspend+0x300>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8006e46:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <_tx_thread_system_suspend+0x31c>)
 8006e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006e4e:	f3ef 8305 	mrs	r3, IPSR
 8006e52:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006e54:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10c      	bne.n	8006e74 <_tx_thread_system_suspend+0x2f4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e5e:	613b      	str	r3, [r7, #16]
    return(posture);
 8006e60:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8006e62:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8006e64:	b662      	cpsie	i
}
 8006e66:	bf00      	nop
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f383 8810 	msr	PRIMASK, r3
}
 8006e72:	bf00      	nop
}
 8006e74:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8006e76:	e003      	b.n	8006e80 <_tx_thread_system_suspend+0x300>
                return;
 8006e78:	bf00      	nop
 8006e7a:	e002      	b.n	8006e82 <_tx_thread_system_suspend+0x302>
            return;
 8006e7c:	bf00      	nop
 8006e7e:	e000      	b.n	8006e82 <_tx_thread_system_suspend+0x302>
    return;
 8006e80:	bf00      	nop
}
 8006e82:	3780      	adds	r7, #128	; 0x80
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	240015dc 	.word	0x240015dc
 8006e8c:	240015d8 	.word	0x240015d8
 8006e90:	24001538 	.word	0x24001538
 8006e94:	240015e0 	.word	0x240015e0
 8006e98:	240015d0 	.word	0x240015d0
 8006e9c:	e000ed04 	.word	0xe000ed04

08006ea0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8006ea6:	4b21      	ldr	r3, [pc, #132]	; (8006f2c <_tx_thread_time_slice+0x8c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006eac:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb0:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8006eb4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006eb6:	b672      	cpsid	i
    return(int_posture);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8006eba:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8006ebc:	4b1c      	ldr	r3, [pc, #112]	; (8006f30 <_tx_thread_time_slice+0x90>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d024      	beq.n	8006f12 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d120      	bne.n	8006f12 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	4a15      	ldr	r2, [pc, #84]	; (8006f34 <_tx_thread_time_slice+0x94>)
 8006ede:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d013      	beq.n	8006f12 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d10d      	bne.n	8006f12 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	6a12      	ldr	r2, [r2, #32]
 8006efe:	490e      	ldr	r1, [pc, #56]	; (8006f38 <_tx_thread_time_slice+0x98>)
 8006f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8006f04:	4b0d      	ldr	r3, [pc, #52]	; (8006f3c <_tx_thread_time_slice+0x9c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a0b      	ldr	r2, [pc, #44]	; (8006f38 <_tx_thread_time_slice+0x98>)
 8006f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0e:	4a0c      	ldr	r2, [pc, #48]	; (8006f40 <_tx_thread_time_slice+0xa0>)
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f383 8810 	msr	PRIMASK, r3
}
 8006f1c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	240015d4 	.word	0x240015d4
 8006f30:	24001b40 	.word	0x24001b40
 8006f34:	2400166c 	.word	0x2400166c
 8006f38:	24001538 	.word	0x24001538
 8006f3c:	240015dc 	.word	0x240015dc
 8006f40:	240015d8 	.word	0x240015d8

08006f44 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006f50:	f3ef 8310 	mrs	r3, PRIMASK
 8006f54:	617b      	str	r3, [r7, #20]
    return(posture);
 8006f56:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006f58:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006f5a:	b672      	cpsid	i
    return(int_posture);
 8006f5c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8006f5e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	2b04      	cmp	r3, #4
 8006f66:	d10e      	bne.n	8006f86 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8006f68:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <_tx_thread_timeout+0x74>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	4a12      	ldr	r2, [pc, #72]	; (8006fb8 <_tx_thread_timeout+0x74>)
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f383 8810 	msr	PRIMASK, r3
}
 8006f7c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8006f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f80:	f7ff fcea 	bl	8006958 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8006f84:	e013      	b.n	8006fae <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f8a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006f92:	61bb      	str	r3, [r7, #24]
 8006f94:	6a3b      	ldr	r3, [r7, #32]
 8006f96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f383 8810 	msr	PRIMASK, r3
}
 8006f9e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	69b9      	ldr	r1, [r7, #24]
 8006faa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fac:	4798      	blx	r3
}
 8006fae:	bf00      	nop
 8006fb0:	3728      	adds	r7, #40	; 0x28
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	240015d0 	.word	0x240015d0

08006fbc <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc6:	607b      	str	r3, [r7, #4]
    return(posture);
 8006fc8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8006fca:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006fcc:	b672      	cpsid	i
    return(int_posture);
 8006fce:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8006fd0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8006fd2:	4b09      	ldr	r3, [pc, #36]	; (8006ff8 <_tx_timer_expiration_process+0x3c>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	4a07      	ldr	r2, [pc, #28]	; (8006ff8 <_tx_timer_expiration_process+0x3c>)
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f383 8810 	msr	PRIMASK, r3
}
 8006fe6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8006fe8:	4804      	ldr	r0, [pc, #16]	; (8006ffc <_tx_timer_expiration_process+0x40>)
 8006fea:	f7ff fcb5 	bl	8006958 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8006fee:	bf00      	nop
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	240015d0 	.word	0x240015d0
 8006ffc:	24001678 	.word	0x24001678

08007000 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8007000:	b590      	push	{r4, r7, lr}
 8007002:	b089      	sub	sp, #36	; 0x24
 8007004:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8007006:	4b28      	ldr	r3, [pc, #160]	; (80070a8 <_tx_timer_initialize+0xa8>)
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800700c:	4b27      	ldr	r3, [pc, #156]	; (80070ac <_tx_timer_initialize+0xac>)
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007012:	4b27      	ldr	r3, [pc, #156]	; (80070b0 <_tx_timer_initialize+0xb0>)
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8007018:	4b26      	ldr	r3, [pc, #152]	; (80070b4 <_tx_timer_initialize+0xb4>)
 800701a:	2200      	movs	r2, #0
 800701c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800701e:	4b26      	ldr	r3, [pc, #152]	; (80070b8 <_tx_timer_initialize+0xb8>)
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007024:	2280      	movs	r2, #128	; 0x80
 8007026:	2100      	movs	r1, #0
 8007028:	4824      	ldr	r0, [pc, #144]	; (80070bc <_tx_timer_initialize+0xbc>)
 800702a:	f000 fd1d 	bl	8007a68 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800702e:	4b24      	ldr	r3, [pc, #144]	; (80070c0 <_tx_timer_initialize+0xc0>)
 8007030:	4a22      	ldr	r2, [pc, #136]	; (80070bc <_tx_timer_initialize+0xbc>)
 8007032:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007034:	4b23      	ldr	r3, [pc, #140]	; (80070c4 <_tx_timer_initialize+0xc4>)
 8007036:	4a21      	ldr	r2, [pc, #132]	; (80070bc <_tx_timer_initialize+0xbc>)
 8007038:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800703a:	4b23      	ldr	r3, [pc, #140]	; (80070c8 <_tx_timer_initialize+0xc8>)
 800703c:	4a23      	ldr	r2, [pc, #140]	; (80070cc <_tx_timer_initialize+0xcc>)
 800703e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8007040:	4b21      	ldr	r3, [pc, #132]	; (80070c8 <_tx_timer_initialize+0xc8>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3304      	adds	r3, #4
 8007046:	4a20      	ldr	r2, [pc, #128]	; (80070c8 <_tx_timer_initialize+0xc8>)
 8007048:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800704a:	4b21      	ldr	r3, [pc, #132]	; (80070d0 <_tx_timer_initialize+0xd0>)
 800704c:	4a21      	ldr	r2, [pc, #132]	; (80070d4 <_tx_timer_initialize+0xd4>)
 800704e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8007050:	4b21      	ldr	r3, [pc, #132]	; (80070d8 <_tx_timer_initialize+0xd8>)
 8007052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007056:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007058:	4b20      	ldr	r3, [pc, #128]	; (80070dc <_tx_timer_initialize+0xdc>)
 800705a:	2200      	movs	r2, #0
 800705c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800705e:	4b1c      	ldr	r3, [pc, #112]	; (80070d0 <_tx_timer_initialize+0xd0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1d      	ldr	r2, [pc, #116]	; (80070d8 <_tx_timer_initialize+0xd8>)
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	491d      	ldr	r1, [pc, #116]	; (80070dc <_tx_timer_initialize+0xdc>)
 8007068:	6809      	ldr	r1, [r1, #0]
 800706a:	481c      	ldr	r0, [pc, #112]	; (80070dc <_tx_timer_initialize+0xdc>)
 800706c:	6800      	ldr	r0, [r0, #0]
 800706e:	2400      	movs	r4, #0
 8007070:	9405      	str	r4, [sp, #20]
 8007072:	2400      	movs	r4, #0
 8007074:	9404      	str	r4, [sp, #16]
 8007076:	9003      	str	r0, [sp, #12]
 8007078:	9102      	str	r1, [sp, #8]
 800707a:	9201      	str	r2, [sp, #4]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	4b18      	ldr	r3, [pc, #96]	; (80070e0 <_tx_timer_initialize+0xe0>)
 8007080:	4a18      	ldr	r2, [pc, #96]	; (80070e4 <_tx_timer_initialize+0xe4>)
 8007082:	4919      	ldr	r1, [pc, #100]	; (80070e8 <_tx_timer_initialize+0xe8>)
 8007084:	4819      	ldr	r0, [pc, #100]	; (80070ec <_tx_timer_initialize+0xec>)
 8007086:	f7ff fa37 	bl	80064f8 <_tx_thread_create>
 800708a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1e5      	bne.n	800705e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8007092:	4b17      	ldr	r3, [pc, #92]	; (80070f0 <_tx_timer_initialize+0xf0>)
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8007098:	4b16      	ldr	r3, [pc, #88]	; (80070f4 <_tx_timer_initialize+0xf4>)
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800709e:	bf00      	nop
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd90      	pop	{r4, r7, pc}
 80070a6:	bf00      	nop
 80070a8:	24001b44 	.word	0x24001b44
 80070ac:	2400166c 	.word	0x2400166c
 80070b0:	24001b40 	.word	0x24001b40
 80070b4:	24001668 	.word	0x24001668
 80070b8:	24001728 	.word	0x24001728
 80070bc:	240015e8 	.word	0x240015e8
 80070c0:	2400172c 	.word	0x2400172c
 80070c4:	240015e4 	.word	0x240015e4
 80070c8:	24001674 	.word	0x24001674
 80070cc:	24001664 	.word	0x24001664
 80070d0:	24001b38 	.word	0x24001b38
 80070d4:	24001738 	.word	0x24001738
 80070d8:	24001734 	.word	0x24001734
 80070dc:	24001670 	.word	0x24001670
 80070e0:	4154494d 	.word	0x4154494d
 80070e4:	0800722d 	.word	0x0800722d
 80070e8:	08007b04 	.word	0x08007b04
 80070ec:	24001678 	.word	0x24001678
 80070f0:	24001730 	.word	0x24001730
 80070f4:	24001b3c 	.word	0x24001b3c

080070f8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b089      	sub	sp, #36	; 0x24
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d04a      	beq.n	80071a2 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d046      	beq.n	80071a2 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d142      	bne.n	80071a2 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b20      	cmp	r3, #32
 8007120:	d902      	bls.n	8007128 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8007122:	231f      	movs	r3, #31
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	e002      	b.n	800712e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	3b01      	subs	r3, #1
 800712c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800712e:	4b20      	ldr	r3, [pc, #128]	; (80071b0 <_tx_timer_system_activate+0xb8>)
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800713a:	4b1e      	ldr	r3, [pc, #120]	; (80071b4 <_tx_timer_system_activate+0xbc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	69fa      	ldr	r2, [r7, #28]
 8007140:	429a      	cmp	r2, r3
 8007142:	d30b      	bcc.n	800715c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8007144:	4b1b      	ldr	r3, [pc, #108]	; (80071b4 <_tx_timer_system_activate+0xbc>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	69fa      	ldr	r2, [r7, #28]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	109b      	asrs	r3, r3, #2
 800714e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8007150:	4b19      	ldr	r3, [pc, #100]	; (80071b8 <_tx_timer_system_activate+0xc0>)
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	4413      	add	r3, r2
 800715a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d109      	bne.n	8007178 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e011      	b.n	800719c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80071a2:	bf00      	nop
 80071a4:	3724      	adds	r7, #36	; 0x24
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	240015e4 	.word	0x240015e4
 80071b4:	24001674 	.word	0x24001674
 80071b8:	2400172c 	.word	0x2400172c

080071bc <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d026      	beq.n	800721e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d108      	bne.n	80071f0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d117      	bne.n	8007218 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	e013      	b.n	8007218 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	429a      	cmp	r2, r3
 800720a:	d105      	bne.n	8007218 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	619a      	str	r2, [r3, #24]
    }
}
 800721e:	bf00      	nop
 8007220:	371c      	adds	r7, #28
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
	...

0800722c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b098      	sub	sp, #96	; 0x60
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8007234:	2300      	movs	r3, #0
 8007236:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a73      	ldr	r2, [pc, #460]	; (8007408 <_tx_timer_thread_entry+0x1dc>)
 800723c:	4293      	cmp	r3, r2
 800723e:	f040 80de 	bne.w	80073fe <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007242:	f3ef 8310 	mrs	r3, PRIMASK
 8007246:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8007248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800724a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800724c:	b672      	cpsid	i
    return(int_posture);
 800724e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8007250:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8007252:	4b6e      	ldr	r3, [pc, #440]	; (800740c <_tx_timer_thread_entry+0x1e0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f107 020c 	add.w	r2, r7, #12
 8007266:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8007268:	4b68      	ldr	r3, [pc, #416]	; (800740c <_tx_timer_thread_entry+0x1e0>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2200      	movs	r2, #0
 800726e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8007270:	4b66      	ldr	r3, [pc, #408]	; (800740c <_tx_timer_thread_entry+0x1e0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3304      	adds	r3, #4
 8007276:	4a65      	ldr	r2, [pc, #404]	; (800740c <_tx_timer_thread_entry+0x1e0>)
 8007278:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800727a:	4b64      	ldr	r3, [pc, #400]	; (800740c <_tx_timer_thread_entry+0x1e0>)
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	4b64      	ldr	r3, [pc, #400]	; (8007410 <_tx_timer_thread_entry+0x1e4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	429a      	cmp	r2, r3
 8007284:	d103      	bne.n	800728e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8007286:	4b63      	ldr	r3, [pc, #396]	; (8007414 <_tx_timer_thread_entry+0x1e8>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a60      	ldr	r2, [pc, #384]	; (800740c <_tx_timer_thread_entry+0x1e0>)
 800728c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800728e:	4b62      	ldr	r3, [pc, #392]	; (8007418 <_tx_timer_thread_entry+0x1ec>)
 8007290:	2200      	movs	r2, #0
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007296:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729a:	f383 8810 	msr	PRIMASK, r3
}
 800729e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80072a0:	f3ef 8310 	mrs	r3, PRIMASK
 80072a4:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80072a8:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80072aa:	b672      	cpsid	i
    return(int_posture);
 80072ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80072ae:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 80072b0:	e07f      	b.n	80073b2 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80072bc:	2300      	movs	r3, #0
 80072be:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80072c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d102      	bne.n	80072ce <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	e00e      	b.n	80072ec <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80072ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80072d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80072da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072de:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80072e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e2:	f107 020c 	add.w	r2, r7, #12
 80072e6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80072e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072ea:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80072ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d911      	bls.n	8007318 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80072f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80072fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072fe:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8007300:	2300      	movs	r3, #0
 8007302:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007306:	f107 0208 	add.w	r2, r7, #8
 800730a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800730c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800730e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007310:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8007312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007314:	60bb      	str	r3, [r7, #8]
 8007316:	e01a      	b.n	800734e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8007318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800731e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8007324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800732c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8007334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007336:	f107 0208 	add.w	r2, r7, #8
 800733a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800733c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800733e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007340:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8007342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007344:	60bb      	str	r3, [r7, #8]
 8007346:	e002      	b.n	800734e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8007348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800734a:	2200      	movs	r2, #0
 800734c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800734e:	4a33      	ldr	r2, [pc, #204]	; (800741c <_tx_timer_thread_entry+0x1f0>)
 8007350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007356:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	f383 8810 	msr	PRIMASK, r3
}
 800735e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8007360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007362:	2b00      	cmp	r3, #0
 8007364:	d002      	beq.n	800736c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8007366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007368:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800736a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800736c:	f3ef 8310 	mrs	r3, PRIMASK
 8007370:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8007372:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8007374:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8007376:	b672      	cpsid	i
    return(int_posture);
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800737a:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800737c:	4b27      	ldr	r3, [pc, #156]	; (800741c <_tx_timer_thread_entry+0x1f0>)
 800737e:	2200      	movs	r2, #0
 8007380:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007386:	429a      	cmp	r2, r3
 8007388:	d105      	bne.n	8007396 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800738a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800738c:	2200      	movs	r2, #0
 800738e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8007390:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007392:	f7ff feb1 	bl	80070f8 <_tx_timer_system_activate>
 8007396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007398:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	f383 8810 	msr	PRIMASK, r3
}
 80073a0:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80073a2:	f3ef 8310 	mrs	r3, PRIMASK
 80073a6:	623b      	str	r3, [r7, #32]
    return(posture);
 80073a8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80073aa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80073ac:	b672      	cpsid	i
    return(int_posture);
 80073ae:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 80073b0:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f47f af7c 	bne.w	80072b2 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 80073ba:	4b17      	ldr	r3, [pc, #92]	; (8007418 <_tx_timer_thread_entry+0x1ec>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d116      	bne.n	80073f0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80073c2:	4b17      	ldr	r3, [pc, #92]	; (8007420 <_tx_timer_thread_entry+0x1f4>)
 80073c4:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80073c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c8:	2203      	movs	r2, #3
 80073ca:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80073cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073ce:	2201      	movs	r2, #1
 80073d0:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80073d2:	4b14      	ldr	r3, [pc, #80]	; (8007424 <_tx_timer_thread_entry+0x1f8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	3301      	adds	r3, #1
 80073d8:	4a12      	ldr	r2, [pc, #72]	; (8007424 <_tx_timer_thread_entry+0x1f8>)
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073de:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f383 8810 	msr	PRIMASK, r3
}
 80073e6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80073e8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80073ea:	f7ff fbc9 	bl	8006b80 <_tx_thread_system_suspend>
 80073ee:	e728      	b.n	8007242 <_tx_timer_thread_entry+0x16>
 80073f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f383 8810 	msr	PRIMASK, r3
}
 80073fa:	bf00      	nop
            TX_DISABLE
 80073fc:	e721      	b.n	8007242 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80073fe:	bf00      	nop
 8007400:	3760      	adds	r7, #96	; 0x60
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	4154494d 	.word	0x4154494d
 800740c:	240015e4 	.word	0x240015e4
 8007410:	24001674 	.word	0x24001674
 8007414:	2400172c 	.word	0x2400172c
 8007418:	24001668 	.word	0x24001668
 800741c:	24001728 	.word	0x24001728
 8007420:	24001678 	.word	0x24001678
 8007424:	240015d0 	.word	0x240015d0

08007428 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08a      	sub	sp, #40	; 0x28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007436:	2300      	movs	r3, #0
 8007438:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d102      	bne.n	8007446 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007440:	2302      	movs	r3, #2
 8007442:	627b      	str	r3, [r7, #36]	; 0x24
 8007444:	e029      	b.n	800749a <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a2d      	ldr	r2, [pc, #180]	; (8007500 <_txe_byte_allocate+0xd8>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d002      	beq.n	8007456 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007450:	2302      	movs	r3, #2
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
 8007454:	e021      	b.n	800749a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800745c:	2303      	movs	r3, #3
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
 8007460:	e01b      	b.n	800749a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d102      	bne.n	800746e <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8007468:	2305      	movs	r3, #5
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
 800746c:	e015      	b.n	800749a <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	429a      	cmp	r2, r3
 8007476:	d902      	bls.n	800747e <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8007478:	2305      	movs	r3, #5
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
 800747c:	e00d      	b.n	800749a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007484:	f3ef 8305 	mrs	r3, IPSR
 8007488:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800748a:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800748c:	4b1d      	ldr	r3, [pc, #116]	; (8007504 <_txe_byte_allocate+0xdc>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4313      	orrs	r3, r2
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8007496:	2304      	movs	r3, #4
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	d108      	bne.n	80074b2 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80074a0:	4b19      	ldr	r3, [pc, #100]	; (8007508 <_txe_byte_allocate+0xe0>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	4a18      	ldr	r2, [pc, #96]	; (800750c <_txe_byte_allocate+0xe4>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d101      	bne.n	80074b2 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80074ae:	2313      	movs	r3, #19
 80074b0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d114      	bne.n	80074e2 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80074b8:	f3ef 8305 	mrs	r3, IPSR
 80074bc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80074be:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80074c0:	4b10      	ldr	r3, [pc, #64]	; (8007504 <_txe_byte_allocate+0xdc>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80074ca:	f3ef 8305 	mrs	r3, IPSR
 80074ce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80074d0:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80074d2:	4b0c      	ldr	r3, [pc, #48]	; (8007504 <_txe_byte_allocate+0xdc>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80074dc:	d201      	bcs.n	80074e2 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80074de:	2313      	movs	r3, #19
 80074e0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d106      	bne.n	80074f6 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	68b9      	ldr	r1, [r7, #8]
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7fe faf6 	bl	8005ae0 <_tx_byte_allocate>
 80074f4:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 80074f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3728      	adds	r7, #40	; 0x28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	42595445 	.word	0x42595445
 8007504:	24000060 	.word	0x24000060
 8007508:	240015d4 	.word	0x240015d4
 800750c:	24001678 	.word	0x24001678

08007510 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b092      	sub	sp, #72	; 0x48
 8007514:	af00      	add	r7, sp, #0
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	60b9      	str	r1, [r7, #8]
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800751e:	2300      	movs	r3, #0
 8007520:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007528:	2302      	movs	r3, #2
 800752a:	647b      	str	r3, [r7, #68]	; 0x44
 800752c:	e075      	b.n	800761a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800752e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007530:	2b34      	cmp	r3, #52	; 0x34
 8007532:	d002      	beq.n	800753a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8007534:	2302      	movs	r3, #2
 8007536:	647b      	str	r3, [r7, #68]	; 0x44
 8007538:	e06f      	b.n	800761a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800753a:	f3ef 8310 	mrs	r3, PRIMASK
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8007542:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007544:	b672      	cpsid	i
    return(int_posture);
 8007546:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8007548:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800754a:	4b3b      	ldr	r3, [pc, #236]	; (8007638 <_txe_byte_pool_create+0x128>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3301      	adds	r3, #1
 8007550:	4a39      	ldr	r2, [pc, #228]	; (8007638 <_txe_byte_pool_create+0x128>)
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007556:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755a:	f383 8810 	msr	PRIMASK, r3
}
 800755e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8007560:	4b36      	ldr	r3, [pc, #216]	; (800763c <_txe_byte_pool_create+0x12c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8007566:	2300      	movs	r3, #0
 8007568:	643b      	str	r3, [r7, #64]	; 0x40
 800756a:	e009      	b.n	8007580 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007570:	429a      	cmp	r2, r3
 8007572:	d00b      	beq.n	800758c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8007574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800757a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757c:	3301      	adds	r3, #1
 800757e:	643b      	str	r3, [r7, #64]	; 0x40
 8007580:	4b2f      	ldr	r3, [pc, #188]	; (8007640 <_txe_byte_pool_create+0x130>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007586:	429a      	cmp	r2, r3
 8007588:	d3f0      	bcc.n	800756c <_txe_byte_pool_create+0x5c>
 800758a:	e000      	b.n	800758e <_txe_byte_pool_create+0x7e>
                break;
 800758c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800758e:	f3ef 8310 	mrs	r3, PRIMASK
 8007592:	623b      	str	r3, [r7, #32]
    return(posture);
 8007594:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8007596:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007598:	b672      	cpsid	i
    return(int_posture);
 800759a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800759c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800759e:	4b26      	ldr	r3, [pc, #152]	; (8007638 <_txe_byte_pool_create+0x128>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	4a24      	ldr	r2, [pc, #144]	; (8007638 <_txe_byte_pool_create+0x128>)
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80075ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ae:	f383 8810 	msr	PRIMASK, r3
}
 80075b2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80075b4:	f7ff f996 	bl	80068e4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075bc:	429a      	cmp	r2, r3
 80075be:	d102      	bne.n	80075c6 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80075c0:	2302      	movs	r3, #2
 80075c2:	647b      	str	r3, [r7, #68]	; 0x44
 80075c4:	e029      	b.n	800761a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d102      	bne.n	80075d2 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80075cc:	2303      	movs	r3, #3
 80075ce:	647b      	str	r3, [r7, #68]	; 0x44
 80075d0:	e023      	b.n	800761a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b63      	cmp	r3, #99	; 0x63
 80075d6:	d802      	bhi.n	80075de <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80075d8:	2305      	movs	r3, #5
 80075da:	647b      	str	r3, [r7, #68]	; 0x44
 80075dc:	e01d      	b.n	800761a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80075de:	4b19      	ldr	r3, [pc, #100]	; (8007644 <_txe_byte_pool_create+0x134>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80075e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e6:	4a18      	ldr	r2, [pc, #96]	; (8007648 <_txe_byte_pool_create+0x138>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d101      	bne.n	80075f0 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80075ec:	2313      	movs	r3, #19
 80075ee:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80075f0:	f3ef 8305 	mrs	r3, IPSR
 80075f4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80075f6:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80075f8:	4b14      	ldr	r3, [pc, #80]	; (800764c <_txe_byte_pool_create+0x13c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00b      	beq.n	800761a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007602:	f3ef 8305 	mrs	r3, IPSR
 8007606:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007608:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800760a:	4b10      	ldr	r3, [pc, #64]	; (800764c <_txe_byte_pool_create+0x13c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4313      	orrs	r3, r2
 8007610:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007614:	d201      	bcs.n	800761a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8007616:	2313      	movs	r3, #19
 8007618:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800761a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800761c:	2b00      	cmp	r3, #0
 800761e:	d106      	bne.n	800762e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	68b9      	ldr	r1, [r7, #8]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7fe fb9c 	bl	8005d64 <_tx_byte_pool_create>
 800762c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800762e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007630:	4618      	mov	r0, r3
 8007632:	3748      	adds	r7, #72	; 0x48
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	240015d0 	.word	0x240015d0
 800763c:	24001518 	.word	0x24001518
 8007640:	24001534 	.word	0x24001534
 8007644:	240015d4 	.word	0x240015d4
 8007648:	24001678 	.word	0x24001678
 800764c:	24000060 	.word	0x24000060

08007650 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b092      	sub	sp, #72	; 0x48
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800765e:	2300      	movs	r3, #0
 8007660:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8007668:	230c      	movs	r3, #12
 800766a:	647b      	str	r3, [r7, #68]	; 0x44
 800766c:	e054      	b.n	8007718 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b1c      	cmp	r3, #28
 8007672:	d002      	beq.n	800767a <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8007674:	230c      	movs	r3, #12
 8007676:	647b      	str	r3, [r7, #68]	; 0x44
 8007678:	e04e      	b.n	8007718 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800767a:	f3ef 8310 	mrs	r3, PRIMASK
 800767e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007684:	b672      	cpsid	i
    return(int_posture);
 8007686:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8007688:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800768a:	4b36      	ldr	r3, [pc, #216]	; (8007764 <_txe_semaphore_create+0x114>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	3301      	adds	r3, #1
 8007690:	4a34      	ldr	r2, [pc, #208]	; (8007764 <_txe_semaphore_create+0x114>)
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	f383 8810 	msr	PRIMASK, r3
}
 800769e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80076a0:	4b31      	ldr	r3, [pc, #196]	; (8007768 <_txe_semaphore_create+0x118>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80076a6:	2300      	movs	r3, #0
 80076a8:	643b      	str	r3, [r7, #64]	; 0x40
 80076aa:	e009      	b.n	80076c0 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d00b      	beq.n	80076cc <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80076b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80076ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076bc:	3301      	adds	r3, #1
 80076be:	643b      	str	r3, [r7, #64]	; 0x40
 80076c0:	4b2a      	ldr	r3, [pc, #168]	; (800776c <_txe_semaphore_create+0x11c>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d3f0      	bcc.n	80076ac <_txe_semaphore_create+0x5c>
 80076ca:	e000      	b.n	80076ce <_txe_semaphore_create+0x7e>
                break;
 80076cc:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80076ce:	f3ef 8310 	mrs	r3, PRIMASK
 80076d2:	623b      	str	r3, [r7, #32]
    return(posture);
 80076d4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80076d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80076d8:	b672      	cpsid	i
    return(int_posture);
 80076da:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80076dc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80076de:	4b21      	ldr	r3, [pc, #132]	; (8007764 <_txe_semaphore_create+0x114>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	4a1f      	ldr	r2, [pc, #124]	; (8007764 <_txe_semaphore_create+0x114>)
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ee:	f383 8810 	msr	PRIMASK, r3
}
 80076f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80076f4:	f7ff f8f6 	bl	80068e4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d102      	bne.n	8007706 <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8007700:	230c      	movs	r3, #12
 8007702:	647b      	str	r3, [r7, #68]	; 0x44
 8007704:	e008      	b.n	8007718 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8007706:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <_txe_semaphore_create+0x120>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800770c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800770e:	4a19      	ldr	r2, [pc, #100]	; (8007774 <_txe_semaphore_create+0x124>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d101      	bne.n	8007718 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007714:	2313      	movs	r3, #19
 8007716:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007718:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800771a:	2b00      	cmp	r3, #0
 800771c:	d114      	bne.n	8007748 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800771e:	f3ef 8305 	mrs	r3, IPSR
 8007722:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007724:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8007726:	4b14      	ldr	r3, [pc, #80]	; (8007778 <_txe_semaphore_create+0x128>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4313      	orrs	r3, r2
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00b      	beq.n	8007748 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007730:	f3ef 8305 	mrs	r3, IPSR
 8007734:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007736:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8007738:	4b0f      	ldr	r3, [pc, #60]	; (8007778 <_txe_semaphore_create+0x128>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4313      	orrs	r3, r2
 800773e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8007742:	d201      	bcs.n	8007748 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8007744:	2313      	movs	r3, #19
 8007746:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8007748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774a:	2b00      	cmp	r3, #0
 800774c:	d105      	bne.n	800775a <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	68b9      	ldr	r1, [r7, #8]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f7fe fd94 	bl	8006280 <_tx_semaphore_create>
 8007758:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800775a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800775c:	4618      	mov	r0, r3
 800775e:	3748      	adds	r7, #72	; 0x48
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	240015d0 	.word	0x240015d0
 8007768:	24001514 	.word	0x24001514
 800776c:	24001524 	.word	0x24001524
 8007770:	240015d4 	.word	0x240015d4
 8007774:	24001678 	.word	0x24001678
 8007778:	24000060 	.word	0x24000060

0800777c <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d102      	bne.n	8007796 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8007790:	230c      	movs	r3, #12
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	e01f      	b.n	80077d6 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a15      	ldr	r2, [pc, #84]	; (80077f0 <_txe_semaphore_get+0x74>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d002      	beq.n	80077a6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80077a0:	230c      	movs	r3, #12
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	e017      	b.n	80077d6 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d014      	beq.n	80077d6 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80077ac:	f3ef 8305 	mrs	r3, IPSR
 80077b0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80077b2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80077b4:	4b0f      	ldr	r3, [pc, #60]	; (80077f4 <_txe_semaphore_get+0x78>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80077be:	2304      	movs	r3, #4
 80077c0:	617b      	str	r3, [r7, #20]
 80077c2:	e008      	b.n	80077d6 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <_txe_semaphore_get+0x7c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	4a0b      	ldr	r2, [pc, #44]	; (80077fc <_txe_semaphore_get+0x80>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d101      	bne.n	80077d6 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80077d2:	2304      	movs	r3, #4
 80077d4:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fe fda0 	bl	8006324 <_tx_semaphore_get>
 80077e4:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80077e6:	697b      	ldr	r3, [r7, #20]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3718      	adds	r7, #24
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	53454d41 	.word	0x53454d41
 80077f4:	24000060 	.word	0x24000060
 80077f8:	240015d4 	.word	0x240015d4
 80077fc:	24001678 	.word	0x24001678

08007800 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d102      	bne.n	8007814 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800780e:	230c      	movs	r3, #12
 8007810:	60fb      	str	r3, [r7, #12]
 8007812:	e00b      	b.n	800782c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a07      	ldr	r2, [pc, #28]	; (8007838 <_txe_semaphore_put+0x38>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d002      	beq.n	8007824 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800781e:	230c      	movs	r3, #12
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	e003      	b.n	800782c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7fe fe0f 	bl	8006448 <_tx_semaphore_put>
 800782a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800782c:	68fb      	ldr	r3, [r7, #12]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	53454d41 	.word	0x53454d41

0800783c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b09a      	sub	sp, #104	; 0x68
 8007840:	af06      	add	r7, sp, #24
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]
 8007848:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800784a:	2300      	movs	r3, #0
 800784c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d102      	bne.n	800785a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8007854:	230e      	movs	r3, #14
 8007856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007858:	e0bb      	b.n	80079d2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800785a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800785c:	2bb0      	cmp	r3, #176	; 0xb0
 800785e:	d002      	beq.n	8007866 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8007860:	230e      	movs	r3, #14
 8007862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007864:	e0b5      	b.n	80079d2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007866:	f3ef 8310 	mrs	r3, PRIMASK
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8007870:	b672      	cpsid	i
    return(int_posture);
 8007872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8007874:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8007876:	4b64      	ldr	r3, [pc, #400]	; (8007a08 <_txe_thread_create+0x1cc>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	4a62      	ldr	r2, [pc, #392]	; (8007a08 <_txe_thread_create+0x1cc>)
 800787e:	6013      	str	r3, [r2, #0]
 8007880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007882:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007886:	f383 8810 	msr	PRIMASK, r3
}
 800788a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800788c:	2300      	movs	r3, #0
 800788e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8007890:	4b5e      	ldr	r3, [pc, #376]	; (8007a0c <_txe_thread_create+0x1d0>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8007896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007898:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800789a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800789c:	3b01      	subs	r3, #1
 800789e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078a0:	4413      	add	r3, r2
 80078a2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80078a8:	2300      	movs	r3, #0
 80078aa:	647b      	str	r3, [r7, #68]	; 0x44
 80078ac:	e02b      	b.n	8007906 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d101      	bne.n	80078ba <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80078b6:	2301      	movs	r3, #1
 80078b8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80078ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d028      	beq.n	8007912 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80078c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d308      	bcc.n	80078dc <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80078ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d203      	bcs.n	80078dc <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80078d8:	2301      	movs	r3, #1
 80078da:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80078dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d308      	bcc.n	80078f8 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80078e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d203      	bcs.n	80078f8 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80078f0:	2300      	movs	r3, #0
 80078f2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80078f4:	2301      	movs	r3, #1
 80078f6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80078f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fe:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8007900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007902:	3301      	adds	r3, #1
 8007904:	647b      	str	r3, [r7, #68]	; 0x44
 8007906:	4b42      	ldr	r3, [pc, #264]	; (8007a10 <_txe_thread_create+0x1d4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800790c:	429a      	cmp	r2, r3
 800790e:	d3ce      	bcc.n	80078ae <_txe_thread_create+0x72>
 8007910:	e000      	b.n	8007914 <_txe_thread_create+0xd8>
                break;
 8007912:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007914:	f3ef 8310 	mrs	r3, PRIMASK
 8007918:	61fb      	str	r3, [r7, #28]
    return(posture);
 800791a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800791c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800791e:	b672      	cpsid	i
    return(int_posture);
 8007920:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8007922:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8007924:	4b38      	ldr	r3, [pc, #224]	; (8007a08 <_txe_thread_create+0x1cc>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	3b01      	subs	r3, #1
 800792a:	4a37      	ldr	r2, [pc, #220]	; (8007a08 <_txe_thread_create+0x1cc>)
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007930:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	f383 8810 	msr	PRIMASK, r3
}
 8007938:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800793a:	f7fe ffd3 	bl	80068e4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007942:	429a      	cmp	r2, r3
 8007944:	d102      	bne.n	800794c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8007946:	230e      	movs	r3, #14
 8007948:	64fb      	str	r3, [r7, #76]	; 0x4c
 800794a:	e042      	b.n	80079d2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800794c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800794e:	2b00      	cmp	r3, #0
 8007950:	d102      	bne.n	8007958 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8007952:	2303      	movs	r3, #3
 8007954:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007956:	e03c      	b.n	80079d2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d102      	bne.n	8007964 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800795e:	2303      	movs	r3, #3
 8007960:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007962:	e036      	b.n	80079d2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8007964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007966:	2bc7      	cmp	r3, #199	; 0xc7
 8007968:	d802      	bhi.n	8007970 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800796a:	2305      	movs	r3, #5
 800796c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800796e:	e030      	b.n	80079d2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8007970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007972:	2b1f      	cmp	r3, #31
 8007974:	d902      	bls.n	800797c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8007976:	230f      	movs	r3, #15
 8007978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797a:	e02a      	b.n	80079d2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800797c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800797e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007980:	429a      	cmp	r2, r3
 8007982:	d902      	bls.n	800798a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8007984:	2318      	movs	r3, #24
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007988:	e023      	b.n	80079d2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800798a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800798c:	2b01      	cmp	r3, #1
 800798e:	d902      	bls.n	8007996 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8007990:	2310      	movs	r3, #16
 8007992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007994:	e01d      	b.n	80079d2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8007996:	4b1f      	ldr	r3, [pc, #124]	; (8007a14 <_txe_thread_create+0x1d8>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	4a1e      	ldr	r2, [pc, #120]	; (8007a18 <_txe_thread_create+0x1dc>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d101      	bne.n	80079a8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80079a4:	2313      	movs	r3, #19
 80079a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80079a8:	f3ef 8305 	mrs	r3, IPSR
 80079ac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80079ae:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80079b0:	4b1a      	ldr	r3, [pc, #104]	; (8007a1c <_txe_thread_create+0x1e0>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80079ba:	f3ef 8305 	mrs	r3, IPSR
 80079be:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80079c0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80079c2:	4b16      	ldr	r3, [pc, #88]	; (8007a1c <_txe_thread_create+0x1e0>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80079cc:	d201      	bcs.n	80079d2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80079ce:	2313      	movs	r3, #19
 80079d0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80079d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d112      	bne.n	80079fe <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80079d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079da:	9305      	str	r3, [sp, #20]
 80079dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079de:	9304      	str	r3, [sp, #16]
 80079e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079e2:	9303      	str	r3, [sp, #12]
 80079e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079e6:	9302      	str	r3, [sp, #8]
 80079e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f7fe fd7e 	bl	80064f8 <_tx_thread_create>
 80079fc:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80079fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3750      	adds	r7, #80	; 0x50
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	240015d0 	.word	0x240015d0
 8007a0c:	240015c0 	.word	0x240015c0
 8007a10:	240015c8 	.word	0x240015c8
 8007a14:	240015d4 	.word	0x240015d4
 8007a18:	24001678 	.word	0x24001678
 8007a1c:	24000060 	.word	0x24000060

08007a20 <__libc_init_array>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	4d0d      	ldr	r5, [pc, #52]	; (8007a58 <__libc_init_array+0x38>)
 8007a24:	4c0d      	ldr	r4, [pc, #52]	; (8007a5c <__libc_init_array+0x3c>)
 8007a26:	1b64      	subs	r4, r4, r5
 8007a28:	10a4      	asrs	r4, r4, #2
 8007a2a:	2600      	movs	r6, #0
 8007a2c:	42a6      	cmp	r6, r4
 8007a2e:	d109      	bne.n	8007a44 <__libc_init_array+0x24>
 8007a30:	4d0b      	ldr	r5, [pc, #44]	; (8007a60 <__libc_init_array+0x40>)
 8007a32:	4c0c      	ldr	r4, [pc, #48]	; (8007a64 <__libc_init_array+0x44>)
 8007a34:	f000 f820 	bl	8007a78 <_init>
 8007a38:	1b64      	subs	r4, r4, r5
 8007a3a:	10a4      	asrs	r4, r4, #2
 8007a3c:	2600      	movs	r6, #0
 8007a3e:	42a6      	cmp	r6, r4
 8007a40:	d105      	bne.n	8007a4e <__libc_init_array+0x2e>
 8007a42:	bd70      	pop	{r4, r5, r6, pc}
 8007a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a48:	4798      	blx	r3
 8007a4a:	3601      	adds	r6, #1
 8007a4c:	e7ee      	b.n	8007a2c <__libc_init_array+0xc>
 8007a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a52:	4798      	blx	r3
 8007a54:	3601      	adds	r6, #1
 8007a56:	e7f2      	b.n	8007a3e <__libc_init_array+0x1e>
 8007a58:	08007b58 	.word	0x08007b58
 8007a5c:	08007b58 	.word	0x08007b58
 8007a60:	08007b58 	.word	0x08007b58
 8007a64:	08007b5c 	.word	0x08007b5c

08007a68 <memset>:
 8007a68:	4402      	add	r2, r0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d100      	bne.n	8007a72 <memset+0xa>
 8007a70:	4770      	bx	lr
 8007a72:	f803 1b01 	strb.w	r1, [r3], #1
 8007a76:	e7f9      	b.n	8007a6c <memset+0x4>

08007a78 <_init>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr

08007a84 <_fini>:
 8007a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a86:	bf00      	nop
 8007a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8a:	bc08      	pop	{r3}
 8007a8c:	469e      	mov	lr, r3
 8007a8e:	4770      	bx	lr
