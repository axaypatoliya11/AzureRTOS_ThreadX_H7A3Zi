
f767zi_TX_NX_HTTP_SERVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005024  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052fc  080052fc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005304  08005304  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005304  08005304  00015304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800530c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000101c  20000074  08005380  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001090  08005380  00021090  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000271c3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051b8  00000000  00000000  00047265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0004c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0004cf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d21d  00000000  00000000  0004d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001529f  00000000  00000000  0007a9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010245d  00000000  00000000  0008fc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001920c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a4  00000000  00000000  0019211c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	0800520c 	.word	0x0800520c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	0800520c 	.word	0x0800520c

08000240 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000240:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000242:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000246:	4919      	ldr	r1, [pc, #100]	; (80002ac <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000248:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800024c:	4818      	ldr	r0, [pc, #96]	; (80002b0 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800024e:	4917      	ldr	r1, [pc, #92]	; (80002ac <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000250:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000252:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000254:	4817      	ldr	r0, [pc, #92]	; (80002b4 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000256:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000258:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800025c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800025e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000262:	4915      	ldr	r1, [pc, #84]	; (80002b8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000264:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000266:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800026a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800026c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000270:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000274:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000278:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800027c:	490f      	ldr	r1, [pc, #60]	; (80002bc <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800027e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000282:	4770      	bx	lr

08000284 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_BadHandler>

08000288 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_HardfaultHandler>

0800028c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800028c:	f7ff bffe 	b.w	800028c <__tx_SVCallHandler>

08000290 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000290:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000292:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000296:	4770      	bx	lr

08000298 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000298:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800029a:	f000 f891 	bl	80003c0 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800029e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 80002a2:	4770      	bx	lr

080002a4 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002a4:	f7ff bffe 	b.w	80002a4 <__tx_NMIHandler>

080002a8 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002a8:	f7ff bffe 	b.w	80002a8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ac:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002b0:	20000b08 	.word	0x20000b08
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002b4:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 80002b8:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 80002bc:	40ff0000 	.word	0x40ff0000

080002c0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002c0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002c4:	4a2a      	ldr	r2, [pc, #168]	; (8000370 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002c6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002c8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002cc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002d0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002d4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002d6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002da:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002de:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 80002e2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002e6:	f3bf 8f6f 	isb	sy

080002ea <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ea:	e7fe      	b.n	80002ea <__tx_wait_here>

080002ec <PendSV_Handler>:
    BL      _tx_execution_thread_exit               // Call the thread exit function
    POP     {r0, lr}                                // Recover LR
    CPSIE   i                                       // Enable interrupts
#endif

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002ec:	4821      	ldr	r0, [pc, #132]	; (8000374 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ee:	4a22      	ldr	r2, [pc, #136]	; (8000378 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002f0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002f4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002f6:	b191      	cbz	r1, 800031e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002f8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002fa:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002fe:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000302:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000306:	d101      	bne.n	800030c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000308:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800030c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030c:	4c1b      	ldr	r4, [pc, #108]	; (800037c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800030e:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000312:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000314:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000318:	b10d      	cbz	r5, 800031e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800031a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800031c:	6023      	str	r3, [r4, #0]

0800031e <__tx_ts_new>:

__tx_ts_new:

    /* Now we are looking for a new thread to execute!  */

    CPSID   i                                       // Disable interrupts
 800031e:	b672      	cpsid	i
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000320:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000322:	b1b1      	cbz	r1, 8000352 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000324:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       // Enable interrupts
 8000326:	b662      	cpsie	i

08000328 <__tx_ts_restore>:

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000328:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800032a:	4c14      	ldr	r4, [pc, #80]	; (800037c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800032c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800032e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000332:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000334:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000336:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800033a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800033e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000342:	d101      	bne.n	8000348 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000344:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000348 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000348:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800034c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000350:	4770      	bx	lr

08000352 <__tx_ts_wait>:
    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
       are disabled to allow use of WFI for waiting for a thread to arrive.  */

__tx_ts_wait:
    CPSID   i                                       // Disable interrupts
 8000352:	b672      	cpsid	i
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000354:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000356:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000358:	b909      	cbnz	r1, 800035e <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       // Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       // Enable interrupts
 800035a:	b662      	cpsie	i
    B       __tx_ts_wait                            // Loop to continue waiting
 800035c:	e7f9      	b.n	8000352 <__tx_ts_wait>

0800035e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800035e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000362:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000366:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04

    /* Re-enable interrupts and restore new thread.  */

    CPSIE   i                                       // Enable interrupts
 800036a:	b662      	cpsie	i
    B       __tx_ts_restore                         // Restore the thread
 800036c:	e7dc      	b.n	8000328 <__tx_ts_restore>

0800036e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800036e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000370:	20000b0c 	.word	0x20000b0c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000374:	20000b10 	.word	0x20000b10
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000378:	20000b14 	.word	0x20000b14
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800037c:	20000ba4 	.word	0x20000ba4

08000380 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000380:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000382:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000386:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800038a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800038e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000390:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000394:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000396:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000398:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800039a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800039c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800039e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003a0:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003a2:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003a4:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003a6:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003aa:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003ac:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003ae:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003b2:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 80003b4:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 80003b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 80003ba:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 80003bc:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 80003be:	4770      	bx	lr

080003c0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003c0:	4922      	ldr	r1, [pc, #136]	; (800044c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003c2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003c4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003c8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003ca:	4b21      	ldr	r3, [pc, #132]	; (8000450 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003cc:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ce:	b13a      	cbz	r2, 80003e0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003d0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003d4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003d6:	b91a      	cbnz	r2, 80003e0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003d8:	4b1e      	ldr	r3, [pc, #120]	; (8000454 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003da:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003de:	6018      	str	r0, [r3, #0]

080003e0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003e0:	491d      	ldr	r1, [pc, #116]	; (8000458 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003e2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003e4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003e6:	b122      	cbz	r2, 80003f2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003e8:	4b1c      	ldr	r3, [pc, #112]	; (800045c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ea:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ee:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003f0:	e008      	b.n	8000404 <__tx_timer_done>

080003f2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003f2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003f8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003fa:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003fc:	d101      	bne.n	8000402 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003fe:	4b19      	ldr	r3, [pc, #100]	; (8000464 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 8000400:	6818      	ldr	r0, [r3, #0]

08000402 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 8000402:	6008      	str	r0, [r1, #0]

08000404 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000404:	4b13      	ldr	r3, [pc, #76]	; (8000454 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000406:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000408:	b912      	cbnz	r2, 8000410 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 800040a:	4914      	ldr	r1, [pc, #80]	; (800045c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 800040c:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800040e:	b1d0      	cbz	r0, 8000446 <__tx_timer_nothing_expired>

08000410 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 8000410:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 8000414:	4911      	ldr	r1, [pc, #68]	; (800045c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000416:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000418:	b108      	cbz	r0, 800041e <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 800041a:	f003 fdb3 	bl	8003f84 <_tx_timer_expiration_process>

0800041e <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000420:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000422:	b172      	cbz	r2, 8000442 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000424:	f003 fd20 	bl	8003e68 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000428:	480f      	ldr	r0, [pc, #60]	; (8000468 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800042a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800042c:	b949      	cbnz	r1, 8000442 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800042e:	480f      	ldr	r0, [pc, #60]	; (800046c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000430:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000432:	4a0f      	ldr	r2, [pc, #60]	; (8000470 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000434:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000436:	480f      	ldr	r0, [pc, #60]	; (8000474 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800043c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800043e:	d000      	beq.n	8000442 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000440:	6002      	str	r2, [r0, #0]

08000442 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000442:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000446 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000446:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800044a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800044c:	2000107c 	.word	0x2000107c
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000450:	20000ba4 	.word	0x20000ba4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000454:	20001078 	.word	0x20001078
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000458:	20000b1c 	.word	0x20000b1c
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800045c:	20000ba0 	.word	0x20000ba0
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000460:	20000bac 	.word	0x20000bac
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000464:	20000c64 	.word	0x20000c64
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000468:	20000b0c 	.word	0x20000b0c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800046c:	20000b10 	.word	0x20000b10
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000470:	20000b14 	.word	0x20000b14
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000474:	e000ed04 	.word	0xe000ed04

08000478 <__aeabi_uldivmod>:
 8000478:	b953      	cbnz	r3, 8000490 <__aeabi_uldivmod+0x18>
 800047a:	b94a      	cbnz	r2, 8000490 <__aeabi_uldivmod+0x18>
 800047c:	2900      	cmp	r1, #0
 800047e:	bf08      	it	eq
 8000480:	2800      	cmpeq	r0, #0
 8000482:	bf1c      	itt	ne
 8000484:	f04f 31ff 	movne.w	r1, #4294967295
 8000488:	f04f 30ff 	movne.w	r0, #4294967295
 800048c:	f000 b96e 	b.w	800076c <__aeabi_idiv0>
 8000490:	f1ad 0c08 	sub.w	ip, sp, #8
 8000494:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000498:	f000 f806 	bl	80004a8 <__udivmoddi4>
 800049c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80004a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80004a4:	b004      	add	sp, #16
 80004a6:	4770      	bx	lr

080004a8 <__udivmoddi4>:
 80004a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004ac:	9d08      	ldr	r5, [sp, #32]
 80004ae:	4604      	mov	r4, r0
 80004b0:	468c      	mov	ip, r1
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	f040 8083 	bne.w	80005be <__udivmoddi4+0x116>
 80004b8:	428a      	cmp	r2, r1
 80004ba:	4617      	mov	r7, r2
 80004bc:	d947      	bls.n	800054e <__udivmoddi4+0xa6>
 80004be:	fab2 f282 	clz	r2, r2
 80004c2:	b142      	cbz	r2, 80004d6 <__udivmoddi4+0x2e>
 80004c4:	f1c2 0020 	rsb	r0, r2, #32
 80004c8:	fa24 f000 	lsr.w	r0, r4, r0
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4097      	lsls	r7, r2
 80004d0:	ea40 0c01 	orr.w	ip, r0, r1
 80004d4:	4094      	lsls	r4, r2
 80004d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80004da:	0c23      	lsrs	r3, r4, #16
 80004dc:	fbbc f6f8 	udiv	r6, ip, r8
 80004e0:	fa1f fe87 	uxth.w	lr, r7
 80004e4:	fb08 c116 	mls	r1, r8, r6, ip
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb06 f10e 	mul.w	r1, r6, lr
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d909      	bls.n	8000508 <__udivmoddi4+0x60>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80004fa:	f080 8119 	bcs.w	8000730 <__udivmoddi4+0x288>
 80004fe:	4299      	cmp	r1, r3
 8000500:	f240 8116 	bls.w	8000730 <__udivmoddi4+0x288>
 8000504:	3e02      	subs	r6, #2
 8000506:	443b      	add	r3, r7
 8000508:	1a5b      	subs	r3, r3, r1
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000510:	fb08 3310 	mls	r3, r8, r0, r3
 8000514:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	45a6      	cmp	lr, r4
 800051e:	d909      	bls.n	8000534 <__udivmoddi4+0x8c>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f100 33ff 	add.w	r3, r0, #4294967295
 8000526:	f080 8105 	bcs.w	8000734 <__udivmoddi4+0x28c>
 800052a:	45a6      	cmp	lr, r4
 800052c:	f240 8102 	bls.w	8000734 <__udivmoddi4+0x28c>
 8000530:	3802      	subs	r0, #2
 8000532:	443c      	add	r4, r7
 8000534:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000538:	eba4 040e 	sub.w	r4, r4, lr
 800053c:	2600      	movs	r6, #0
 800053e:	b11d      	cbz	r5, 8000548 <__udivmoddi4+0xa0>
 8000540:	40d4      	lsrs	r4, r2
 8000542:	2300      	movs	r3, #0
 8000544:	e9c5 4300 	strd	r4, r3, [r5]
 8000548:	4631      	mov	r1, r6
 800054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054e:	b902      	cbnz	r2, 8000552 <__udivmoddi4+0xaa>
 8000550:	deff      	udf	#255	; 0xff
 8000552:	fab2 f282 	clz	r2, r2
 8000556:	2a00      	cmp	r2, #0
 8000558:	d150      	bne.n	80005fc <__udivmoddi4+0x154>
 800055a:	1bcb      	subs	r3, r1, r7
 800055c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	2601      	movs	r6, #1
 8000566:	fbb3 fcfe 	udiv	ip, r3, lr
 800056a:	0c21      	lsrs	r1, r4, #16
 800056c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb08 f30c 	mul.w	r3, r8, ip
 8000578:	428b      	cmp	r3, r1
 800057a:	d907      	bls.n	800058c <__udivmoddi4+0xe4>
 800057c:	1879      	adds	r1, r7, r1
 800057e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000582:	d202      	bcs.n	800058a <__udivmoddi4+0xe2>
 8000584:	428b      	cmp	r3, r1
 8000586:	f200 80e9 	bhi.w	800075c <__udivmoddi4+0x2b4>
 800058a:	4684      	mov	ip, r0
 800058c:	1ac9      	subs	r1, r1, r3
 800058e:	b2a3      	uxth	r3, r4
 8000590:	fbb1 f0fe 	udiv	r0, r1, lr
 8000594:	fb0e 1110 	mls	r1, lr, r0, r1
 8000598:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800059c:	fb08 f800 	mul.w	r8, r8, r0
 80005a0:	45a0      	cmp	r8, r4
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x10c>
 80005a4:	193c      	adds	r4, r7, r4
 80005a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80005aa:	d202      	bcs.n	80005b2 <__udivmoddi4+0x10a>
 80005ac:	45a0      	cmp	r8, r4
 80005ae:	f200 80d9 	bhi.w	8000764 <__udivmoddi4+0x2bc>
 80005b2:	4618      	mov	r0, r3
 80005b4:	eba4 0408 	sub.w	r4, r4, r8
 80005b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80005bc:	e7bf      	b.n	800053e <__udivmoddi4+0x96>
 80005be:	428b      	cmp	r3, r1
 80005c0:	d909      	bls.n	80005d6 <__udivmoddi4+0x12e>
 80005c2:	2d00      	cmp	r5, #0
 80005c4:	f000 80b1 	beq.w	800072a <__udivmoddi4+0x282>
 80005c8:	2600      	movs	r6, #0
 80005ca:	e9c5 0100 	strd	r0, r1, [r5]
 80005ce:	4630      	mov	r0, r6
 80005d0:	4631      	mov	r1, r6
 80005d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d6:	fab3 f683 	clz	r6, r3
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d14a      	bne.n	8000674 <__udivmoddi4+0x1cc>
 80005de:	428b      	cmp	r3, r1
 80005e0:	d302      	bcc.n	80005e8 <__udivmoddi4+0x140>
 80005e2:	4282      	cmp	r2, r0
 80005e4:	f200 80b8 	bhi.w	8000758 <__udivmoddi4+0x2b0>
 80005e8:	1a84      	subs	r4, r0, r2
 80005ea:	eb61 0103 	sbc.w	r1, r1, r3
 80005ee:	2001      	movs	r0, #1
 80005f0:	468c      	mov	ip, r1
 80005f2:	2d00      	cmp	r5, #0
 80005f4:	d0a8      	beq.n	8000548 <__udivmoddi4+0xa0>
 80005f6:	e9c5 4c00 	strd	r4, ip, [r5]
 80005fa:	e7a5      	b.n	8000548 <__udivmoddi4+0xa0>
 80005fc:	f1c2 0320 	rsb	r3, r2, #32
 8000600:	fa20 f603 	lsr.w	r6, r0, r3
 8000604:	4097      	lsls	r7, r2
 8000606:	fa01 f002 	lsl.w	r0, r1, r2
 800060a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800060e:	40d9      	lsrs	r1, r3
 8000610:	4330      	orrs	r0, r6
 8000612:	0c03      	lsrs	r3, r0, #16
 8000614:	fbb1 f6fe 	udiv	r6, r1, lr
 8000618:	fa1f f887 	uxth.w	r8, r7
 800061c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000620:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000624:	fb06 f108 	mul.w	r1, r6, r8
 8000628:	4299      	cmp	r1, r3
 800062a:	fa04 f402 	lsl.w	r4, r4, r2
 800062e:	d909      	bls.n	8000644 <__udivmoddi4+0x19c>
 8000630:	18fb      	adds	r3, r7, r3
 8000632:	f106 3cff 	add.w	ip, r6, #4294967295
 8000636:	f080 808d 	bcs.w	8000754 <__udivmoddi4+0x2ac>
 800063a:	4299      	cmp	r1, r3
 800063c:	f240 808a 	bls.w	8000754 <__udivmoddi4+0x2ac>
 8000640:	3e02      	subs	r6, #2
 8000642:	443b      	add	r3, r7
 8000644:	1a5b      	subs	r3, r3, r1
 8000646:	b281      	uxth	r1, r0
 8000648:	fbb3 f0fe 	udiv	r0, r3, lr
 800064c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000650:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000654:	fb00 f308 	mul.w	r3, r0, r8
 8000658:	428b      	cmp	r3, r1
 800065a:	d907      	bls.n	800066c <__udivmoddi4+0x1c4>
 800065c:	1879      	adds	r1, r7, r1
 800065e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000662:	d273      	bcs.n	800074c <__udivmoddi4+0x2a4>
 8000664:	428b      	cmp	r3, r1
 8000666:	d971      	bls.n	800074c <__udivmoddi4+0x2a4>
 8000668:	3802      	subs	r0, #2
 800066a:	4439      	add	r1, r7
 800066c:	1acb      	subs	r3, r1, r3
 800066e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000672:	e778      	b.n	8000566 <__udivmoddi4+0xbe>
 8000674:	f1c6 0c20 	rsb	ip, r6, #32
 8000678:	fa03 f406 	lsl.w	r4, r3, r6
 800067c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000680:	431c      	orrs	r4, r3
 8000682:	fa20 f70c 	lsr.w	r7, r0, ip
 8000686:	fa01 f306 	lsl.w	r3, r1, r6
 800068a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800068e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000692:	431f      	orrs	r7, r3
 8000694:	0c3b      	lsrs	r3, r7, #16
 8000696:	fbb1 f9fe 	udiv	r9, r1, lr
 800069a:	fa1f f884 	uxth.w	r8, r4
 800069e:	fb0e 1119 	mls	r1, lr, r9, r1
 80006a2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80006a6:	fb09 fa08 	mul.w	sl, r9, r8
 80006aa:	458a      	cmp	sl, r1
 80006ac:	fa02 f206 	lsl.w	r2, r2, r6
 80006b0:	fa00 f306 	lsl.w	r3, r0, r6
 80006b4:	d908      	bls.n	80006c8 <__udivmoddi4+0x220>
 80006b6:	1861      	adds	r1, r4, r1
 80006b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80006bc:	d248      	bcs.n	8000750 <__udivmoddi4+0x2a8>
 80006be:	458a      	cmp	sl, r1
 80006c0:	d946      	bls.n	8000750 <__udivmoddi4+0x2a8>
 80006c2:	f1a9 0902 	sub.w	r9, r9, #2
 80006c6:	4421      	add	r1, r4
 80006c8:	eba1 010a 	sub.w	r1, r1, sl
 80006cc:	b2bf      	uxth	r7, r7
 80006ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80006d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80006d6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80006da:	fb00 f808 	mul.w	r8, r0, r8
 80006de:	45b8      	cmp	r8, r7
 80006e0:	d907      	bls.n	80006f2 <__udivmoddi4+0x24a>
 80006e2:	19e7      	adds	r7, r4, r7
 80006e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80006e8:	d22e      	bcs.n	8000748 <__udivmoddi4+0x2a0>
 80006ea:	45b8      	cmp	r8, r7
 80006ec:	d92c      	bls.n	8000748 <__udivmoddi4+0x2a0>
 80006ee:	3802      	subs	r0, #2
 80006f0:	4427      	add	r7, r4
 80006f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80006f6:	eba7 0708 	sub.w	r7, r7, r8
 80006fa:	fba0 8902 	umull	r8, r9, r0, r2
 80006fe:	454f      	cmp	r7, r9
 8000700:	46c6      	mov	lr, r8
 8000702:	4649      	mov	r1, r9
 8000704:	d31a      	bcc.n	800073c <__udivmoddi4+0x294>
 8000706:	d017      	beq.n	8000738 <__udivmoddi4+0x290>
 8000708:	b15d      	cbz	r5, 8000722 <__udivmoddi4+0x27a>
 800070a:	ebb3 020e 	subs.w	r2, r3, lr
 800070e:	eb67 0701 	sbc.w	r7, r7, r1
 8000712:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000716:	40f2      	lsrs	r2, r6
 8000718:	ea4c 0202 	orr.w	r2, ip, r2
 800071c:	40f7      	lsrs	r7, r6
 800071e:	e9c5 2700 	strd	r2, r7, [r5]
 8000722:	2600      	movs	r6, #0
 8000724:	4631      	mov	r1, r6
 8000726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072a:	462e      	mov	r6, r5
 800072c:	4628      	mov	r0, r5
 800072e:	e70b      	b.n	8000548 <__udivmoddi4+0xa0>
 8000730:	4606      	mov	r6, r0
 8000732:	e6e9      	b.n	8000508 <__udivmoddi4+0x60>
 8000734:	4618      	mov	r0, r3
 8000736:	e6fd      	b.n	8000534 <__udivmoddi4+0x8c>
 8000738:	4543      	cmp	r3, r8
 800073a:	d2e5      	bcs.n	8000708 <__udivmoddi4+0x260>
 800073c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000740:	eb69 0104 	sbc.w	r1, r9, r4
 8000744:	3801      	subs	r0, #1
 8000746:	e7df      	b.n	8000708 <__udivmoddi4+0x260>
 8000748:	4608      	mov	r0, r1
 800074a:	e7d2      	b.n	80006f2 <__udivmoddi4+0x24a>
 800074c:	4660      	mov	r0, ip
 800074e:	e78d      	b.n	800066c <__udivmoddi4+0x1c4>
 8000750:	4681      	mov	r9, r0
 8000752:	e7b9      	b.n	80006c8 <__udivmoddi4+0x220>
 8000754:	4666      	mov	r6, ip
 8000756:	e775      	b.n	8000644 <__udivmoddi4+0x19c>
 8000758:	4630      	mov	r0, r6
 800075a:	e74a      	b.n	80005f2 <__udivmoddi4+0x14a>
 800075c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000760:	4439      	add	r1, r7
 8000762:	e713      	b.n	800058c <__udivmoddi4+0xe4>
 8000764:	3802      	subs	r0, #2
 8000766:	443c      	add	r4, r7
 8000768:	e724      	b.n	80005b4 <__udivmoddi4+0x10c>
 800076a:	bf00      	nop

0800076c <__aeabi_idiv0>:
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop

08000770 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af02      	add	r7, sp, #8
 8000776:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8000778:	2334      	movs	r3, #52	; 0x34
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000780:	4a10      	ldr	r2, [pc, #64]	; (80007c4 <tx_application_define+0x54>)
 8000782:	4911      	ldr	r1, [pc, #68]	; (80007c8 <tx_application_define+0x58>)
 8000784:	4811      	ldr	r0, [pc, #68]	; (80007cc <tx_application_define+0x5c>)
 8000786:	f003 fea7 	bl	80044d8 <_txe_byte_pool_create>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d104      	bne.n	800079a <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <tx_application_define+0x5c>)
 8000792:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000794:	68f8      	ldr	r0, [r7, #12]
 8000796:	f000 f821 	bl	80007dc <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&nx_app_byte_pool, "Nx App memory pool", nx_byte_pool_buffer, NX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800079a:	2334      	movs	r3, #52	; 0x34
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007a2:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <tx_application_define+0x60>)
 80007a4:	490b      	ldr	r1, [pc, #44]	; (80007d4 <tx_application_define+0x64>)
 80007a6:	480c      	ldr	r0, [pc, #48]	; (80007d8 <tx_application_define+0x68>)
 80007a8:	f003 fe96 	bl	80044d8 <_txe_byte_pool_create>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d104      	bne.n	80007bc <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&nx_app_byte_pool;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <tx_application_define+0x68>)
 80007b4:	60fb      	str	r3, [r7, #12]

    if (MX_NetXDuo_Init(memory_ptr) != NX_SUCCESS)
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f004 f820 	bl	80047fc <MX_NetXDuo_Init>

    /* USER CODE END MX_NetXDuo_Init_Success */

  }

}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000090 	.word	0x20000090
 80007c8:	08005224 	.word	0x08005224
 80007cc:	20000490 	.word	0x20000490
 80007d0:	200004c4 	.word	0x200004c4
 80007d4:	08005238 	.word	0x08005238
 80007d8:	200008c4 	.word	0x200008c4

080007dc <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08e      	sub	sp, #56	; 0x38
 80007e0:	af08      	add	r7, sp, #32
 80007e2:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	613b      	str	r3, [r7, #16]

  /* USER CODE BEGIN App_ThreadX_Init */
  CHAR *pointer;

  /* <!-- create a thread --> */
  if(tx_byte_allocate(byte_pool, (void **)&pointer, THREAD_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 80007ec:	f107 010c 	add.w	r1, r7, #12
 80007f0:	2300      	movs	r3, #0
 80007f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f6:	6938      	ldr	r0, [r7, #16]
 80007f8:	f003 fdfa 	bl	80043f0 <_txe_byte_allocate>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <App_ThreadX_Init+0x2a>
	  ret = TX_POOL_ERROR;
 8000802:	2302      	movs	r3, #2
 8000804:	617b      	str	r3, [r7, #20]
  }
  if(tx_thread_create(&server_thread, "Server Thread", (void*)server_thread_func, NULL_DATA_FOR_THREAD, pointer, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START) != TX_SUCCESS){
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	22b0      	movs	r2, #176	; 0xb0
 800080a:	9206      	str	r2, [sp, #24]
 800080c:	2201      	movs	r2, #1
 800080e:	9205      	str	r2, [sp, #20]
 8000810:	2201      	movs	r2, #1
 8000812:	9204      	str	r2, [sp, #16]
 8000814:	220f      	movs	r2, #15
 8000816:	9203      	str	r2, [sp, #12]
 8000818:	220f      	movs	r2, #15
 800081a:	9202      	str	r2, [sp, #8]
 800081c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000820:	9201      	str	r2, [sp, #4]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	2300      	movs	r3, #0
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <App_ThreadX_Init+0x84>)
 8000828:	490e      	ldr	r1, [pc, #56]	; (8000864 <App_ThreadX_Init+0x88>)
 800082a:	480f      	ldr	r0, [pc, #60]	; (8000868 <App_ThreadX_Init+0x8c>)
 800082c:	f003 fef4 	bl	8004618 <_txe_thread_create>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <App_ThreadX_Init+0x5e>
	  ret = TX_POOL_ERROR;
 8000836:	2302      	movs	r3, #2
 8000838:	617b      	str	r3, [r7, #20]
  }

  /* Allocate the memory for packet_pool.  */
  if (tx_byte_allocate(byte_pool, (void **)&pointer, NETX_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS){
 800083a:	f107 010c 	add.w	r1, r7, #12
 800083e:	2300      	movs	r3, #0
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	6938      	ldr	r0, [r7, #16]
 8000846:	f003 fdd3 	bl	80043f0 <_txe_byte_allocate>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <App_ThreadX_Init+0x78>
    return TX_POOL_ERROR;
 8000850:	2302      	movs	r3, #2
 8000852:	e000      	b.n	8000856 <App_ThreadX_Init+0x7a>
  }

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000854:	697b      	ldr	r3, [r7, #20]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3718      	adds	r7, #24
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	08000879 	.word	0x08000879
 8000864:	0800524c 	.word	0x0800524c
 8000868:	20000904 	.word	0x20000904

0800086c <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000870:	f002 ff00 	bl	8003674 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <server_thread_func>:

/* USER CODE BEGIN 1 */
void server_thread_func(void){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	while(1){
		printf("sample data\r\n");
 800087c:	4801      	ldr	r0, [pc, #4]	; (8000884 <server_thread_func+0xc>)
 800087e:	f004 f86d 	bl	800495c <puts>
 8000882:	e7fb      	b.n	800087c <server_thread_func+0x4>
 8000884:	0800525c 	.word	0x0800525c

08000888 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	b29a      	uxth	r2, r3
 8000898:	f04f 33ff 	mov.w	r3, #4294967295
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	4804      	ldr	r0, [pc, #16]	; (80008b0 <_write+0x28>)
 80008a0:	f001 ff22 	bl	80026e8 <HAL_UART_Transmit>
	return len;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3710      	adds	r7, #16
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200009b4 	.word	0x200009b4

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b8:	f000 fafd 	bl	8000eb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008bc:	f000 f808 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c0:	f000 f892 	bl	80009e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008c4:	f000 f860 	bl	8000988 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80008c8:	f7ff ffd0 	bl	800086c <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <main+0x18>
	...

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	2234      	movs	r2, #52	; 0x34
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 ffc6 	bl	8004870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 0308 	add.w	r3, r7, #8
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <SystemClock_Config+0xb0>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	4a21      	ldr	r2, [pc, #132]	; (8000980 <SystemClock_Config+0xb0>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <SystemClock_Config+0xb0>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <SystemClock_Config+0xb4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000914:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <SystemClock_Config+0xb4>)
 8000916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b19      	ldr	r3, [pc, #100]	; (8000984 <SystemClock_Config+0xb4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000930:	2310      	movs	r3, #16
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fdaf 	bl	80014a0 <HAL_RCC_OscConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000948:	f000 f952 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094c:	230f      	movs	r3, #15
 800094e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f847 	bl	80019fc <HAL_RCC_ClockConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000974:	f000 f93c 	bl	8000bf0 <Error_Handler>
  }
}
 8000978:	bf00      	nop
 800097a:	3750      	adds	r7, #80	; 0x50
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800
 8000984:	40007000 	.word	0x40007000

08000988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_USART3_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USART3_UART_Init+0x58>)
 80009cc:	f001 fe3e 	bl	800264c <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 f90b 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200009b4 	.word	0x200009b4
 80009e4:	40004800 	.word	0x40004800

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08c      	sub	sp, #48	; 0x30
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b77      	ldr	r3, [pc, #476]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a76      	ldr	r2, [pc, #472]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a04:	f043 0304 	orr.w	r3, r3, #4
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b74      	ldr	r3, [pc, #464]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0304 	and.w	r3, r3, #4
 8000a12:	61bb      	str	r3, [r7, #24]
 8000a14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a16:	4b71      	ldr	r3, [pc, #452]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a70      	ldr	r2, [pc, #448]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b6e      	ldr	r3, [pc, #440]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b6b      	ldr	r3, [pc, #428]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a6a      	ldr	r2, [pc, #424]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b68      	ldr	r3, [pc, #416]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	613b      	str	r3, [r7, #16]
 8000a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b65      	ldr	r3, [pc, #404]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a64      	ldr	r2, [pc, #400]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b62      	ldr	r3, [pc, #392]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	4b5f      	ldr	r3, [pc, #380]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a5e      	ldr	r2, [pc, #376]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b5c      	ldr	r3, [pc, #368]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a76:	4b59      	ldr	r3, [pc, #356]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a58      	ldr	r2, [pc, #352]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b56      	ldr	r3, [pc, #344]	; (8000bdc <MX_GPIO_Init+0x1f4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a94:	4852      	ldr	r0, [pc, #328]	; (8000be0 <MX_GPIO_Init+0x1f8>)
 8000a96:	f000 fce9 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	4851      	ldr	r0, [pc, #324]	; (8000be4 <MX_GPIO_Init+0x1fc>)
 8000aa0:	f000 fce4 	bl	800146c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aaa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	484b      	ldr	r0, [pc, #300]	; (8000be8 <MX_GPIO_Init+0x200>)
 8000abc:	f000 fb2a 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ac0:	2332      	movs	r3, #50	; 0x32
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ad0:	230b      	movs	r3, #11
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4843      	ldr	r0, [pc, #268]	; (8000be8 <MX_GPIO_Init+0x200>)
 8000adc:	f000 fb1a 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ae0:	2386      	movs	r3, #134	; 0x86
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	483c      	ldr	r0, [pc, #240]	; (8000bec <MX_GPIO_Init+0x204>)
 8000afc:	f000 fb0a 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b00:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	f107 031c 	add.w	r3, r7, #28
 8000b16:	4619      	mov	r1, r3
 8000b18:	4831      	ldr	r0, [pc, #196]	; (8000be0 <MX_GPIO_Init+0x1f8>)
 8000b1a:	f000 fafb 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b30:	230b      	movs	r3, #11
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 031c 	add.w	r3, r7, #28
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4829      	ldr	r0, [pc, #164]	; (8000be0 <MX_GPIO_Init+0x1f8>)
 8000b3c:	f000 faea 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4823      	ldr	r0, [pc, #140]	; (8000be4 <MX_GPIO_Init+0x1fc>)
 8000b58:	f000 fadc 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b5c:	2380      	movs	r3, #128	; 0x80
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481d      	ldr	r0, [pc, #116]	; (8000be4 <MX_GPIO_Init+0x1fc>)
 8000b70:	f000 fad0 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b74:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b82:	2303      	movs	r3, #3
 8000b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b86:	230a      	movs	r3, #10
 8000b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 031c 	add.w	r3, r7, #28
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4816      	ldr	r0, [pc, #88]	; (8000bec <MX_GPIO_Init+0x204>)
 8000b92:	f000 fabf 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4810      	ldr	r0, [pc, #64]	; (8000bec <MX_GPIO_Init+0x204>)
 8000bac:	f000 fab2 	bl	8001114 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc2:	230b      	movs	r3, #11
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_GPIO_Init+0x1fc>)
 8000bce:	f000 faa1 	bl	8001114 <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3730      	adds	r7, #48	; 0x30
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020400 	.word	0x40020400
 8000be4:	40021800 	.word	0x40021800
 8000be8:	40020800 	.word	0x40020800
 8000bec:	40020000 	.word	0x40020000

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c24:	6453      	str	r3, [r2, #68]	; 0x44
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0ae      	sub	sp, #184	; 0xb8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2290      	movs	r2, #144	; 0x90
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fe03 	bl	8004870 <memset>
  if(huart->Instance==USART3)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a22      	ldr	r2, [pc, #136]	; (8000cf8 <HAL_UART_MspInit+0xb4>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d13c      	bne.n	8000cee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c78:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 f8ba 	bl	8001dfc <HAL_RCCEx_PeriphCLKConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c8e:	f7ff ffaf 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000cb0:	f043 0308 	orr.w	r3, r3, #8
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_UART_MspInit+0xbc>)
 8000cea:	f000 fa13 	bl	8001114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	37b8      	adds	r7, #184	; 0xb8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40020c00 	.word	0x40020c00

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e00a      	b.n	8000d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d42:	f3af 8000 	nop.w
 8000d46:	4601      	mov	r1, r0
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf0      	blt.n	8000d42 <_read+0x12>
	}

return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
	return -1;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d92:	605a      	str	r2, [r3, #4]
	return 0;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <_isatty>:

int _isatty(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	return 1;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <_sbrk+0x5c>)
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <_sbrk+0x60>)
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <_sbrk+0x64>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <_sbrk+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d207      	bcs.n	8000e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e04:	f003 fd0a 	bl	800481c <__errno>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e12:	e009      	b.n	8000e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e14:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	4a05      	ldr	r2, [pc, #20]	; (8000e38 <_sbrk+0x64>)
 8000e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e26:	68fb      	ldr	r3, [r7, #12]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20080000 	.word	0x20080000
 8000e34:	00000400 	.word	0x00000400
 8000e38:	200008f8 	.word	0x200008f8
 8000e3c:	20001090 	.word	0x20001090

08000e40 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <SystemInit+0x20>)
 8000e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4a:	4a05      	ldr	r2, [pc, #20]	; (8000e60 <SystemInit+0x20>)
 8000e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e68:	480d      	ldr	r0, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e6a:	490e      	ldr	r1, [pc, #56]	; (8000ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e80:	4c0b      	ldr	r4, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e8e:	f7ff ffd7 	bl	8000e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e92:	f003 fcc9 	bl	8004828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fd0d 	bl	80008b4 <main>
  bx  lr    
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ea8:	0800530c 	.word	0x0800530c
  ldr r2, =_sbss
 8000eac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000eb0:	20001090 	.word	0x20001090

08000eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC_IRQHandler>

08000eb6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eba:	2003      	movs	r0, #3
 8000ebc:	f000 f8f6 	bl	80010ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f000 f805 	bl	8000ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec6:	f7ff fe99 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_InitTick+0x54>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <HAL_InitTick+0x58>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f903 	bl	80010fa <HAL_SYSTICK_Config>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00e      	b.n	8000f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b0f      	cmp	r3, #15
 8000f02:	d80a      	bhi.n	8000f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f04:	2200      	movs	r2, #0
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f000 f8d9 	bl	80010c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f10:	4a06      	ldr	r2, [pc, #24]	; (8000f2c <HAL_InitTick+0x5c>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e000      	b.n	8000f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000004 	.word	0x20000004

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <HAL_GetTick+0x14>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000a3c 	.word	0x20000a3c

08000f48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <__NVIC_SetPriorityGrouping+0x40>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f64:	4013      	ands	r3, r2
 8000f66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x40>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00
 8000f8c:	05fa0000 	.word	0x05fa0000

08000f90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	f003 0307 	and.w	r3, r3, #7
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
	...

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001078:	d301      	bcc.n	800107e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107a:	2301      	movs	r3, #1
 800107c:	e00f      	b.n	800109e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107e:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <SysTick_Config+0x40>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001086:	210f      	movs	r1, #15
 8001088:	f04f 30ff 	mov.w	r0, #4294967295
 800108c:	f7ff ff8e 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <SysTick_Config+0x40>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001096:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <SysTick_Config+0x40>)
 8001098:	2207      	movs	r2, #7
 800109a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	e000e010 	.word	0xe000e010

080010ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff ff47 	bl	8000f48 <__NVIC_SetPriorityGrouping>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b086      	sub	sp, #24
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d4:	f7ff ff5c 	bl	8000f90 <__NVIC_GetPriorityGrouping>
 80010d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	6978      	ldr	r0, [r7, #20]
 80010e0:	f7ff ff8e 	bl	8001000 <NVIC_EncodePriority>
 80010e4:	4602      	mov	r2, r0
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5d 	bl	8000fac <__NVIC_SetPriority>
}
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffb0 	bl	8001068 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
 8001132:	e175      	b.n	8001420 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001134:	2201      	movs	r2, #1
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 8164 	bne.w	800141a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <HAL_GPIO_Init+0x56>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d130      	bne.n	80011cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a0:	2201      	movs	r2, #1
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 0201 	and.w	r2, r3, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b03      	cmp	r3, #3
 80011d6:	d017      	beq.n	8001208 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d123      	bne.n	800125c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	08da      	lsrs	r2, r3, #3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3208      	adds	r2, #8
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	08da      	lsrs	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3208      	adds	r2, #8
 8001256:	69b9      	ldr	r1, [r7, #24]
 8001258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	2203      	movs	r2, #3
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 0203 	and.w	r2, r3, #3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80be 	beq.w	800141a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	4b66      	ldr	r3, [pc, #408]	; (8001438 <HAL_GPIO_Init+0x324>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	4a65      	ldr	r2, [pc, #404]	; (8001438 <HAL_GPIO_Init+0x324>)
 80012a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012a8:	6453      	str	r3, [r2, #68]	; 0x44
 80012aa:	4b63      	ldr	r3, [pc, #396]	; (8001438 <HAL_GPIO_Init+0x324>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012b6:	4a61      	ldr	r2, [pc, #388]	; (800143c <HAL_GPIO_Init+0x328>)
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3302      	adds	r3, #2
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	220f      	movs	r2, #15
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_GPIO_Init+0x32c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d037      	beq.n	8001352 <HAL_GPIO_Init+0x23e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a57      	ldr	r2, [pc, #348]	; (8001444 <HAL_GPIO_Init+0x330>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d031      	beq.n	800134e <HAL_GPIO_Init+0x23a>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a56      	ldr	r2, [pc, #344]	; (8001448 <HAL_GPIO_Init+0x334>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d02b      	beq.n	800134a <HAL_GPIO_Init+0x236>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a55      	ldr	r2, [pc, #340]	; (800144c <HAL_GPIO_Init+0x338>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d025      	beq.n	8001346 <HAL_GPIO_Init+0x232>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a54      	ldr	r2, [pc, #336]	; (8001450 <HAL_GPIO_Init+0x33c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01f      	beq.n	8001342 <HAL_GPIO_Init+0x22e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a53      	ldr	r2, [pc, #332]	; (8001454 <HAL_GPIO_Init+0x340>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x22a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a52      	ldr	r2, [pc, #328]	; (8001458 <HAL_GPIO_Init+0x344>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x226>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a51      	ldr	r2, [pc, #324]	; (800145c <HAL_GPIO_Init+0x348>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x222>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a50      	ldr	r2, [pc, #320]	; (8001460 <HAL_GPIO_Init+0x34c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x21e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4f      	ldr	r2, [pc, #316]	; (8001464 <HAL_GPIO_Init+0x350>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x21a>
 800132a:	2309      	movs	r3, #9
 800132c:	e012      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800132e:	230a      	movs	r3, #10
 8001330:	e010      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001332:	2308      	movs	r3, #8
 8001334:	e00e      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001336:	2307      	movs	r3, #7
 8001338:	e00c      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800133a:	2306      	movs	r3, #6
 800133c:	e00a      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800133e:	2305      	movs	r3, #5
 8001340:	e008      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001342:	2304      	movs	r3, #4
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001346:	2303      	movs	r3, #3
 8001348:	e004      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800134a:	2302      	movs	r3, #2
 800134c:	e002      	b.n	8001354 <HAL_GPIO_Init+0x240>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <HAL_GPIO_Init+0x240>
 8001352:	2300      	movs	r3, #0
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	f002 0203 	and.w	r2, r2, #3
 800135a:	0092      	lsls	r2, r2, #2
 800135c:	4093      	lsls	r3, r2
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001364:	4935      	ldr	r1, [pc, #212]	; (800143c <HAL_GPIO_Init+0x328>)
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	089b      	lsrs	r3, r3, #2
 800136a:	3302      	adds	r3, #2
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001372:	4b3d      	ldr	r3, [pc, #244]	; (8001468 <HAL_GPIO_Init+0x354>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	4313      	orrs	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001396:	4a34      	ldr	r2, [pc, #208]	; (8001468 <HAL_GPIO_Init+0x354>)
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <HAL_GPIO_Init+0x354>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013c0:	4a29      	ldr	r2, [pc, #164]	; (8001468 <HAL_GPIO_Init+0x354>)
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_GPIO_Init+0x354>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ea:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_GPIO_Init+0x354>)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_GPIO_Init+0x354>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001414:	4a14      	ldr	r2, [pc, #80]	; (8001468 <HAL_GPIO_Init+0x354>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3301      	adds	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	f67f ae86 	bls.w	8001134 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001428:	bf00      	nop
 800142a:	bf00      	nop
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40013800 	.word	0x40013800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020400 	.word	0x40020400
 8001448:	40020800 	.word	0x40020800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40021000 	.word	0x40021000
 8001454:	40021400 	.word	0x40021400
 8001458:	40021800 	.word	0x40021800
 800145c:	40021c00 	.word	0x40021c00
 8001460:	40022000 	.word	0x40022000
 8001464:	40022400 	.word	0x40022400
 8001468:	40013c00 	.word	0x40013c00

0800146c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800147c:	787b      	ldrb	r3, [r7, #1]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d003      	beq.n	800148a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001488:	e003      	b.n	8001492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800148a:	887b      	ldrh	r3, [r7, #2]
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e29b      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 8087 	beq.w	80015d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014c4:	4b96      	ldr	r3, [pc, #600]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b04      	cmp	r3, #4
 80014ce:	d00c      	beq.n	80014ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014d0:	4b93      	ldr	r3, [pc, #588]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d112      	bne.n	8001502 <HAL_RCC_OscConfig+0x62>
 80014dc:	4b90      	ldr	r3, [pc, #576]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014e8:	d10b      	bne.n	8001502 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ea:	4b8d      	ldr	r3, [pc, #564]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d06c      	beq.n	80015d0 <HAL_RCC_OscConfig+0x130>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d168      	bne.n	80015d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e275      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x7a>
 800150c:	4b84      	ldr	r3, [pc, #528]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a83      	ldr	r2, [pc, #524]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e02e      	b.n	8001578 <HAL_RCC_OscConfig+0xd8>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x9c>
 8001522:	4b7f      	ldr	r3, [pc, #508]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7e      	ldr	r2, [pc, #504]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b7c      	ldr	r3, [pc, #496]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a7b      	ldr	r2, [pc, #492]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001534:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xd8>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0xc0>
 8001546:	4b76      	ldr	r3, [pc, #472]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a75      	ldr	r2, [pc, #468]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b73      	ldr	r3, [pc, #460]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a72      	ldr	r2, [pc, #456]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xd8>
 8001560:	4b6f      	ldr	r3, [pc, #444]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a6e      	ldr	r2, [pc, #440]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b6c      	ldr	r3, [pc, #432]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a6b      	ldr	r2, [pc, #428]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fcd6 	bl	8000f30 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fcd2 	bl	8000f30 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e229      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b61      	ldr	r3, [pc, #388]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xe8>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fcc2 	bl	8000f30 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fcbe 	bl	8000f30 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e215      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b57      	ldr	r3, [pc, #348]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0x110>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d069      	beq.n	80016b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015de:	4b50      	ldr	r3, [pc, #320]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x190>
 80015f6:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b47      	ldr	r3, [pc, #284]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x17a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1e9      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b41      	ldr	r3, [pc, #260]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	493d      	ldr	r1, [pc, #244]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e040      	b.n	80016b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d023      	beq.n	8001680 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b39      	ldr	r3, [pc, #228]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a38      	ldr	r2, [pc, #224]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fc74 	bl	8000f30 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164c:	f7ff fc70 	bl	8000f30 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e1c7      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165e:	4b30      	ldr	r3, [pc, #192]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800166a:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4929      	ldr	r1, [pc, #164]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
 800167e:	e018      	b.n	80016b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001680:	4b27      	ldr	r3, [pc, #156]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a26      	ldr	r2, [pc, #152]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001686:	f023 0301 	bic.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fc50 	bl	8000f30 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fc4c 	bl	8000f30 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e1a3      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d038      	beq.n	8001730 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d019      	beq.n	80016fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80016c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff fc2d 	bl	8000f30 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff fc29 	bl	8000f30 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e180      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80016ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x23a>
 80016f8:	e01a      	b.n	8001730 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 80016fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_RCC_OscConfig+0x280>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001706:	f7ff fc13 	bl	8000f30 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800170c:	e00a      	b.n	8001724 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170e:	f7ff fc0f 	bl	8000f30 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d903      	bls.n	8001724 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e166      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
 8001720:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001724:	4b92      	ldr	r3, [pc, #584]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1ee      	bne.n	800170e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 80a4 	beq.w	8001886 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b8c      	ldr	r3, [pc, #560]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10d      	bne.n	8001766 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b89      	ldr	r3, [pc, #548]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a88      	ldr	r2, [pc, #544]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b86      	ldr	r3, [pc, #536]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001762:	2301      	movs	r3, #1
 8001764:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001766:	4b83      	ldr	r3, [pc, #524]	; (8001974 <HAL_RCC_OscConfig+0x4d4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176e:	2b00      	cmp	r3, #0
 8001770:	d118      	bne.n	80017a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001772:	4b80      	ldr	r3, [pc, #512]	; (8001974 <HAL_RCC_OscConfig+0x4d4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a7f      	ldr	r2, [pc, #508]	; (8001974 <HAL_RCC_OscConfig+0x4d4>)
 8001778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800177c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177e:	f7ff fbd7 	bl	8000f30 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001784:	e008      	b.n	8001798 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001786:	f7ff fbd3 	bl	8000f30 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b64      	cmp	r3, #100	; 0x64
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e12a      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001798:	4b76      	ldr	r3, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0x4d4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0f0      	beq.n	8001786 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x31a>
 80017ac:	4b70      	ldr	r3, [pc, #448]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b0:	4a6f      	ldr	r2, [pc, #444]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6713      	str	r3, [r2, #112]	; 0x70
 80017b8:	e02d      	b.n	8001816 <HAL_RCC_OscConfig+0x376>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <HAL_RCC_OscConfig+0x33c>
 80017c2:	4b6b      	ldr	r3, [pc, #428]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c6:	4a6a      	ldr	r2, [pc, #424]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017c8:	f023 0301 	bic.w	r3, r3, #1
 80017cc:	6713      	str	r3, [r2, #112]	; 0x70
 80017ce:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	4a67      	ldr	r2, [pc, #412]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017d4:	f023 0304 	bic.w	r3, r3, #4
 80017d8:	6713      	str	r3, [r2, #112]	; 0x70
 80017da:	e01c      	b.n	8001816 <HAL_RCC_OscConfig+0x376>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x35e>
 80017e4:	4b62      	ldr	r3, [pc, #392]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a61      	ldr	r2, [pc, #388]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a5e      	ldr	r2, [pc, #376]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	e00b      	b.n	8001816 <HAL_RCC_OscConfig+0x376>
 80017fe:	4b5c      	ldr	r3, [pc, #368]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a5b      	ldr	r2, [pc, #364]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	4b59      	ldr	r3, [pc, #356]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a58      	ldr	r2, [pc, #352]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d015      	beq.n	800184a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff fb87 	bl	8000f30 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fb83 	bl	8000f30 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0d8      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	4b4c      	ldr	r3, [pc, #304]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ee      	beq.n	8001826 <HAL_RCC_OscConfig+0x386>
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184a:	f7ff fb71 	bl	8000f30 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fb6d 	bl	8000f30 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0c2      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	4b41      	ldr	r3, [pc, #260]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a3c      	ldr	r2, [pc, #240]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80ae 	beq.w	80019ec <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d06d      	beq.n	8001978 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d14b      	bne.n	800193c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b32      	ldr	r3, [pc, #200]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a31      	ldr	r2, [pc, #196]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80018aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b0:	f7ff fb3e 	bl	8000f30 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff fb3a 	bl	8000f30 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e091      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	4b29      	ldr	r3, [pc, #164]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f0      	bne.n	80018b8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	085b      	lsrs	r3, r3, #1
 80018ee:	3b01      	subs	r3, #1
 80018f0:	041b      	lsls	r3, r3, #16
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	071b      	lsls	r3, r3, #28
 8001902:	491b      	ldr	r1, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a18      	ldr	r2, [pc, #96]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff fb0c 	bl	8000f30 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff fb08 	bl	8000f30 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e05f      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x47c>
 800193a:	e057      	b.n	80019ec <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001946:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff faf2 	bl	8000f30 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff faee 	bl	8000f30 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e045      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001962:	4b03      	ldr	r3, [pc, #12]	; (8001970 <HAL_RCC_OscConfig+0x4d0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x4b0>
 800196e:	e03d      	b.n	80019ec <HAL_RCC_OscConfig+0x54c>
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_RCC_OscConfig+0x558>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d030      	beq.n	80019e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d129      	bne.n	80019e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	429a      	cmp	r2, r3
 80019a0:	d122      	bne.n	80019e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019a8:	4013      	ands	r3, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d119      	bne.n	80019e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	085b      	lsrs	r3, r3, #1
 80019c0:	3b01      	subs	r3, #1
 80019c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d10f      	bne.n	80019e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d107      	bne.n	80019e8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e0d0      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d910      	bls.n	8001a44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 020f 	bic.w	r2, r3, #15
 8001a2a:	4965      	ldr	r1, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b63      	ldr	r3, [pc, #396]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b8      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d020      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5c:	4b59      	ldr	r3, [pc, #356]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a58      	ldr	r2, [pc, #352]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b50      	ldr	r3, [pc, #320]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	494d      	ldr	r1, [pc, #308]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d040      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d115      	bne.n	8001ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e07f      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e073      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e06b      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ade:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f023 0203 	bic.w	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4936      	ldr	r1, [pc, #216]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af0:	f7ff fa1e 	bl	8000f30 <HAL_GetTick>
 8001af4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af8:	f7ff fa1a 	bl	8000f30 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e053      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	4b2d      	ldr	r3, [pc, #180]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 020c 	and.w	r2, r3, #12
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1eb      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d210      	bcs.n	8001b50 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 020f 	bic.w	r2, r3, #15
 8001b36:	4922      	ldr	r1, [pc, #136]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e032      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d008      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	4916      	ldr	r1, [pc, #88]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0308 	and.w	r3, r3, #8
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d009      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	490e      	ldr	r1, [pc, #56]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8e:	f000 f821 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b92:	4602      	mov	r2, r0
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	490a      	ldr	r1, [pc, #40]	; (8001bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ba0:	5ccb      	ldrb	r3, [r1, r3]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1d0>)
 8001ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1d4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff f98e 	bl	8000ed0 <HAL_InitTick>

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023c00 	.word	0x40023c00
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	08005280 	.word	0x08005280
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	2300      	movs	r3, #0
 8001be6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bec:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d00d      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x40>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	f200 80bd 	bhi.w	8001d78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d002      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x34>
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c06:	e0b7      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c08:	4b61      	ldr	r3, [pc, #388]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c0a:	60bb      	str	r3, [r7, #8]
      break;
 8001c0c:	e0b7      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c0e:	4b60      	ldr	r3, [pc, #384]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001c10:	60bb      	str	r3, [r7, #8]
      break;
 8001c12:	e0b4      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c14:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c1c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c1e:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d04d      	beq.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c2a:	4b58      	ldr	r3, [pc, #352]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	099b      	lsrs	r3, r3, #6
 8001c30:	461a      	mov	r2, r3
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c3a:	f04f 0100 	mov.w	r1, #0
 8001c3e:	ea02 0800 	and.w	r8, r2, r0
 8001c42:	ea03 0901 	and.w	r9, r3, r1
 8001c46:	4640      	mov	r0, r8
 8001c48:	4649      	mov	r1, r9
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	014b      	lsls	r3, r1, #5
 8001c54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c58:	0142      	lsls	r2, r0, #5
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	ebb0 0008 	subs.w	r0, r0, r8
 8001c62:	eb61 0109 	sbc.w	r1, r1, r9
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	018b      	lsls	r3, r1, #6
 8001c70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c74:	0182      	lsls	r2, r0, #6
 8001c76:	1a12      	subs	r2, r2, r0
 8001c78:	eb63 0301 	sbc.w	r3, r3, r1
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	00d9      	lsls	r1, r3, #3
 8001c86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c8a:	00d0      	lsls	r0, r2, #3
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	eb12 0208 	adds.w	r2, r2, r8
 8001c94:	eb43 0309 	adc.w	r3, r3, r9
 8001c98:	f04f 0000 	mov.w	r0, #0
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	0299      	lsls	r1, r3, #10
 8001ca2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ca6:	0290      	lsls	r0, r2, #10
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	f7fe fbde 	bl	8000478 <__aeabi_uldivmod>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e04a      	b.n	8001d5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc6:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	099b      	lsrs	r3, r3, #6
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cd6:	f04f 0100 	mov.w	r1, #0
 8001cda:	ea02 0400 	and.w	r4, r2, r0
 8001cde:	ea03 0501 	and.w	r5, r3, r1
 8001ce2:	4620      	mov	r0, r4
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	014b      	lsls	r3, r1, #5
 8001cf0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001cf4:	0142      	lsls	r2, r0, #5
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	1b00      	subs	r0, r0, r4
 8001cfc:	eb61 0105 	sbc.w	r1, r1, r5
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	018b      	lsls	r3, r1, #6
 8001d0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d0e:	0182      	lsls	r2, r0, #6
 8001d10:	1a12      	subs	r2, r2, r0
 8001d12:	eb63 0301 	sbc.w	r3, r3, r1
 8001d16:	f04f 0000 	mov.w	r0, #0
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	00d9      	lsls	r1, r3, #3
 8001d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d24:	00d0      	lsls	r0, r2, #3
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	1912      	adds	r2, r2, r4
 8001d2c:	eb45 0303 	adc.w	r3, r5, r3
 8001d30:	f04f 0000 	mov.w	r0, #0
 8001d34:	f04f 0100 	mov.w	r1, #0
 8001d38:	0299      	lsls	r1, r3, #10
 8001d3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d3e:	0290      	lsls	r0, r2, #10
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	f7fe fb92 	bl	8000478 <__aeabi_uldivmod>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4613      	mov	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	0c1b      	lsrs	r3, r3, #16
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	3301      	adds	r3, #1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	60bb      	str	r3, [r7, #8]
      break;
 8001d76:	e002      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001d7a:	60bb      	str	r3, [r7, #8]
      break;
 8001d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	00f42400 	.word	0x00f42400

08001d94 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000000 	.word	0x20000000

08001dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001db0:	f7ff fff0 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001db4:	4602      	mov	r2, r0
 8001db6:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	0a9b      	lsrs	r3, r3, #10
 8001dbc:	f003 0307 	and.w	r3, r3, #7
 8001dc0:	4903      	ldr	r1, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc2:	5ccb      	ldrb	r3, [r1, r3]
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	08005290 	.word	0x08005290

08001dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dd8:	f7ff ffdc 	bl	8001d94 <HAL_RCC_GetHCLKFreq>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	0b5b      	lsrs	r3, r3, #13
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	4903      	ldr	r1, [pc, #12]	; (8001df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dea:	5ccb      	ldrb	r3, [r1, r3]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40023800 	.word	0x40023800
 8001df8:	08005290 	.word	0x08005290

08001dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d012      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e24:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e2a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e2e:	6093      	str	r3, [r2, #8]
 8001e30:	4b66      	ldr	r3, [pc, #408]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e38:	4964      	ldr	r1, [pc, #400]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001e46:	2301      	movs	r3, #1
 8001e48:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d017      	beq.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e56:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	4959      	ldr	r1, [pc, #356]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e74:	d101      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d017      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e92:	4b4e      	ldr	r3, [pc, #312]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	494a      	ldr	r1, [pc, #296]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 808b 	beq.w	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	4a39      	ldr	r2, [pc, #228]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eea:	6413      	str	r3, [r2, #64]	; 0x40
 8001eec:	4b37      	ldr	r3, [pc, #220]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a34      	ldr	r2, [pc, #208]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f04:	f7ff f814 	bl	8000f30 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f0c:	f7ff f810 	bl	8000f30 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e38f      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001f1e:	4b2c      	ldr	r3, [pc, #176]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f2a:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f32:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d035      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d02e      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f48:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f50:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5e:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a1a      	ldr	r2, [pc, #104]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001f6a:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d114      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ffd8 	bl	8000f30 <HAL_GetTick>
 8001f80:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f82:	e00a      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f84:	f7fe ffd4 	bl	8000f30 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e351      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0ee      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001fb2:	d111      	bne.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001fc2:	400b      	ands	r3, r1
 8001fc4:	4901      	ldr	r1, [pc, #4]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
 8001fca:	e00b      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	0ffffcff 	.word	0x0ffffcff
 8001fd8:	4bb3      	ldr	r3, [pc, #716]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4ab2      	ldr	r2, [pc, #712]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fe2:	6093      	str	r3, [r2, #8]
 8001fe4:	4bb0      	ldr	r3, [pc, #704]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fe6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	49ad      	ldr	r1, [pc, #692]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002002:	4ba9      	ldr	r3, [pc, #676]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002008:	4aa7      	ldr	r2, [pc, #668]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800200a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800200e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002012:	4ba5      	ldr	r3, [pc, #660]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002014:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	49a2      	ldr	r1, [pc, #648]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d00a      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002030:	4b9d      	ldr	r3, [pc, #628]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800203e:	499a      	ldr	r1, [pc, #616]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002052:	4b95      	ldr	r3, [pc, #596]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002058:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002060:	4991      	ldr	r1, [pc, #580]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002062:	4313      	orrs	r3, r2
 8002064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00a      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002074:	4b8c      	ldr	r3, [pc, #560]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002082:	4989      	ldr	r1, [pc, #548]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00a      	beq.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002096:	4b84      	ldr	r3, [pc, #528]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4980      	ldr	r1, [pc, #512]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b8:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4978      	ldr	r1, [pc, #480]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00a      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020da:	4b73      	ldr	r3, [pc, #460]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e0:	f023 020c 	bic.w	r2, r3, #12
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020e8:	496f      	ldr	r1, [pc, #444]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00a      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	4967      	ldr	r1, [pc, #412]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00a      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800211e:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002124:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800212c:	495e      	ldr	r1, [pc, #376]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002140:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002146:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800214e:	4956      	ldr	r1, [pc, #344]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00a      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002162:	4b51      	ldr	r3, [pc, #324]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002168:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	494d      	ldr	r1, [pc, #308]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002184:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	4945      	ldr	r1, [pc, #276]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002194:	4313      	orrs	r3, r2
 8002196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80021a6:	4b40      	ldr	r3, [pc, #256]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b4:	493c      	ldr	r1, [pc, #240]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80021c8:	4b37      	ldr	r3, [pc, #220]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80021d6:	4934      	ldr	r1, [pc, #208]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d011      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80021ea:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021f8:	492b      	ldr	r1, [pc, #172]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800220a:	2301      	movs	r3, #1
 800220c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800222a:	4b1f      	ldr	r3, [pc, #124]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002230:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002238:	491b      	ldr	r1, [pc, #108]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800223a:	4313      	orrs	r3, r2
 800223c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00b      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800224c:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225c:	4912      	ldr	r1, [pc, #72]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00b      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002270:	4b0d      	ldr	r3, [pc, #52]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002280:	4909      	ldr	r1, [pc, #36]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00f      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a4:	e002      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	4986      	ldr	r1, [pc, #536]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00b      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80022c0:	4b81      	ldr	r3, [pc, #516]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d0:	497d      	ldr	r1, [pc, #500]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d006      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 80d6 	beq.w	8002498 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80022ec:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a75      	ldr	r2, [pc, #468]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f8:	f7fe fe1a 	bl	8000f30 <HAL_GetTick>
 80022fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002300:	f7fe fe16 	bl	8000f30 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	; 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e195      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002312:	4b6d      	ldr	r3, [pc, #436]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d021      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	2b00      	cmp	r3, #0
 8002330:	d11d      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002332:	4b65      	ldr	r3, [pc, #404]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002338:	0c1b      	lsrs	r3, r3, #16
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002340:	4b61      	ldr	r3, [pc, #388]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002346:	0e1b      	lsrs	r3, r3, #24
 8002348:	f003 030f 	and.w	r3, r3, #15
 800234c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	019a      	lsls	r2, r3, #6
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	041b      	lsls	r3, r3, #16
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	061b      	lsls	r3, r3, #24
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	071b      	lsls	r3, r3, #28
 8002366:	4958      	ldr	r1, [pc, #352]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800238c:	2b00      	cmp	r3, #0
 800238e:	d02e      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002398:	d129      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800239a:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800239c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023a8:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ae:	0f1b      	lsrs	r3, r3, #28
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	019a      	lsls	r2, r3, #6
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	041b      	lsls	r3, r3, #16
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	061b      	lsls	r3, r3, #24
 80023c8:	431a      	orrs	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	071b      	lsls	r3, r3, #28
 80023ce:	493e      	ldr	r1, [pc, #248]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80023d6:	4b3c      	ldr	r3, [pc, #240]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023dc:	f023 021f 	bic.w	r2, r3, #31
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	3b01      	subs	r3, #1
 80023e6:	4938      	ldr	r1, [pc, #224]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d01d      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023fa:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80023fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002400:	0e1b      	lsrs	r3, r3, #24
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800240a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800240e:	0f1b      	lsrs	r3, r3, #28
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	019a      	lsls	r2, r3, #6
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	431a      	orrs	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	061b      	lsls	r3, r3, #24
 8002428:	431a      	orrs	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	071b      	lsls	r3, r3, #28
 800242e:	4926      	ldr	r1, [pc, #152]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002430:	4313      	orrs	r3, r2
 8002432:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d011      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	019a      	lsls	r2, r3, #6
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	061b      	lsls	r3, r3, #24
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	071b      	lsls	r3, r3, #28
 800245e:	491a      	ldr	r1, [pc, #104]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a17      	ldr	r2, [pc, #92]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800246c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002470:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002472:	f7fe fd5d 	bl	8000f30 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002478:	e008      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800247a:	f7fe fd59 	bl	8000f30 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	; 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e0d8      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b01      	cmp	r3, #1
 800249c:	f040 80ce 	bne.w	800263c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80024a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ac:	f7fe fd40 	bl	8000f30 <HAL_GetTick>
 80024b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024b2:	e00b      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024b4:	f7fe fd3c 	bl	8000f30 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d904      	bls.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e0bb      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80024cc:	4b5e      	ldr	r3, [pc, #376]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024d8:	d0ec      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d02e      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d12a      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002502:	4b51      	ldr	r3, [pc, #324]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002510:	4b4d      	ldr	r3, [pc, #308]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	0f1b      	lsrs	r3, r3, #28
 8002518:	f003 0307 	and.w	r3, r3, #7
 800251c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	019a      	lsls	r2, r3, #6
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	041b      	lsls	r3, r3, #16
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	061b      	lsls	r3, r3, #24
 8002530:	431a      	orrs	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	071b      	lsls	r3, r3, #28
 8002536:	4944      	ldr	r1, [pc, #272]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800253e:	4b42      	ldr	r3, [pc, #264]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002544:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	493d      	ldr	r1, [pc, #244]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d022      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002568:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800256c:	d11d      	bne.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800256e:	4b36      	ldr	r3, [pc, #216]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	0e1b      	lsrs	r3, r3, #24
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800257c:	4b32      	ldr	r3, [pc, #200]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	0f1b      	lsrs	r3, r3, #28
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	019a      	lsls	r2, r3, #6
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	041b      	lsls	r3, r3, #16
 8002596:	431a      	orrs	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	061b      	lsls	r3, r3, #24
 800259c:	431a      	orrs	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	071b      	lsls	r3, r3, #28
 80025a2:	4929      	ldr	r1, [pc, #164]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d028      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025bc:	0e1b      	lsrs	r3, r3, #24
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025c4:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	0c1b      	lsrs	r3, r3, #16
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	019a      	lsls	r2, r3, #6
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	431a      	orrs	r2, r3
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	061b      	lsls	r3, r3, #24
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	071b      	lsls	r3, r3, #28
 80025ea:	4917      	ldr	r1, [pc, #92]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80025f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	4911      	ldr	r1, [pc, #68]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002612:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002614:	f7fe fc8c 	bl	8000f30 <HAL_GetTick>
 8002618:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800261c:	f7fe fc88 	bl	8000f30 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b64      	cmp	r3, #100	; 0x64
 8002628:	d901      	bls.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e007      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800262e:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800263a:	d1ef      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800

0800264c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e040      	b.n	80026e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fae8 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0201 	bic.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f8b0 	bl	80027f0 <UART_SetConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e022      	b.n	80026e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fb06 	bl	8002cb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fb8d 	bl	8002df8 <UART_CheckIdleState>
 80026de:	4603      	mov	r3, r0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08a      	sub	sp, #40	; 0x28
 80026ec:	af02      	add	r7, sp, #8
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d171      	bne.n	80027e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <HAL_UART_Transmit+0x24>
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e06a      	b.n	80027e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2221      	movs	r2, #33	; 0x21
 800271c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800271e:	f7fe fc07 	bl	8000f30 <HAL_GetTick>
 8002722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	88fa      	ldrh	r2, [r7, #6]
 8002730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273c:	d108      	bne.n	8002750 <HAL_UART_Transmit+0x68>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d104      	bne.n	8002750 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	e003      	b.n	8002758 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002758:	e02c      	b.n	80027b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	2200      	movs	r2, #0
 8002762:	2180      	movs	r1, #128	; 0x80
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f000 fb94 	bl	8002e92 <UART_WaitOnFlagUntilTimeout>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e038      	b.n	80027e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10b      	bne.n	8002792 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002788:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	3302      	adds	r3, #2
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e007      	b.n	80027a2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	781a      	ldrb	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3301      	adds	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1cc      	bne.n	800275a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2140      	movs	r1, #64	; 0x40
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 fb61 	bl	8002e92 <UART_WaitOnFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e005      	b.n	80027e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2220      	movs	r2, #32
 80027de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b088      	sub	sp, #32
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4ba7      	ldr	r3, [pc, #668]	; (8002ab8 <UART_SetConfig+0x2c8>)
 800281c:	4013      	ands	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	6979      	ldr	r1, [r7, #20]
 8002824:	430b      	orrs	r3, r1
 8002826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a95      	ldr	r2, [pc, #596]	; (8002abc <UART_SetConfig+0x2cc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d120      	bne.n	80028ae <UART_SetConfig+0xbe>
 800286c:	4b94      	ldr	r3, [pc, #592]	; (8002ac0 <UART_SetConfig+0x2d0>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b03      	cmp	r3, #3
 8002878:	d816      	bhi.n	80028a8 <UART_SetConfig+0xb8>
 800287a:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <UART_SetConfig+0x90>)
 800287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002880:	08002891 	.word	0x08002891
 8002884:	0800289d 	.word	0x0800289d
 8002888:	08002897 	.word	0x08002897
 800288c:	080028a3 	.word	0x080028a3
 8002890:	2301      	movs	r3, #1
 8002892:	77fb      	strb	r3, [r7, #31]
 8002894:	e14f      	b.n	8002b36 <UART_SetConfig+0x346>
 8002896:	2302      	movs	r3, #2
 8002898:	77fb      	strb	r3, [r7, #31]
 800289a:	e14c      	b.n	8002b36 <UART_SetConfig+0x346>
 800289c:	2304      	movs	r3, #4
 800289e:	77fb      	strb	r3, [r7, #31]
 80028a0:	e149      	b.n	8002b36 <UART_SetConfig+0x346>
 80028a2:	2308      	movs	r3, #8
 80028a4:	77fb      	strb	r3, [r7, #31]
 80028a6:	e146      	b.n	8002b36 <UART_SetConfig+0x346>
 80028a8:	2310      	movs	r3, #16
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e143      	b.n	8002b36 <UART_SetConfig+0x346>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a84      	ldr	r2, [pc, #528]	; (8002ac4 <UART_SetConfig+0x2d4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d132      	bne.n	800291e <UART_SetConfig+0x12e>
 80028b8:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <UART_SetConfig+0x2d0>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	f003 030c 	and.w	r3, r3, #12
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	d828      	bhi.n	8002918 <UART_SetConfig+0x128>
 80028c6:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <UART_SetConfig+0xdc>)
 80028c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028cc:	08002901 	.word	0x08002901
 80028d0:	08002919 	.word	0x08002919
 80028d4:	08002919 	.word	0x08002919
 80028d8:	08002919 	.word	0x08002919
 80028dc:	0800290d 	.word	0x0800290d
 80028e0:	08002919 	.word	0x08002919
 80028e4:	08002919 	.word	0x08002919
 80028e8:	08002919 	.word	0x08002919
 80028ec:	08002907 	.word	0x08002907
 80028f0:	08002919 	.word	0x08002919
 80028f4:	08002919 	.word	0x08002919
 80028f8:	08002919 	.word	0x08002919
 80028fc:	08002913 	.word	0x08002913
 8002900:	2300      	movs	r3, #0
 8002902:	77fb      	strb	r3, [r7, #31]
 8002904:	e117      	b.n	8002b36 <UART_SetConfig+0x346>
 8002906:	2302      	movs	r3, #2
 8002908:	77fb      	strb	r3, [r7, #31]
 800290a:	e114      	b.n	8002b36 <UART_SetConfig+0x346>
 800290c:	2304      	movs	r3, #4
 800290e:	77fb      	strb	r3, [r7, #31]
 8002910:	e111      	b.n	8002b36 <UART_SetConfig+0x346>
 8002912:	2308      	movs	r3, #8
 8002914:	77fb      	strb	r3, [r7, #31]
 8002916:	e10e      	b.n	8002b36 <UART_SetConfig+0x346>
 8002918:	2310      	movs	r3, #16
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	e10b      	b.n	8002b36 <UART_SetConfig+0x346>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a69      	ldr	r2, [pc, #420]	; (8002ac8 <UART_SetConfig+0x2d8>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d120      	bne.n	800296a <UART_SetConfig+0x17a>
 8002928:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <UART_SetConfig+0x2d0>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002932:	2b30      	cmp	r3, #48	; 0x30
 8002934:	d013      	beq.n	800295e <UART_SetConfig+0x16e>
 8002936:	2b30      	cmp	r3, #48	; 0x30
 8002938:	d814      	bhi.n	8002964 <UART_SetConfig+0x174>
 800293a:	2b20      	cmp	r3, #32
 800293c:	d009      	beq.n	8002952 <UART_SetConfig+0x162>
 800293e:	2b20      	cmp	r3, #32
 8002940:	d810      	bhi.n	8002964 <UART_SetConfig+0x174>
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <UART_SetConfig+0x15c>
 8002946:	2b10      	cmp	r3, #16
 8002948:	d006      	beq.n	8002958 <UART_SetConfig+0x168>
 800294a:	e00b      	b.n	8002964 <UART_SetConfig+0x174>
 800294c:	2300      	movs	r3, #0
 800294e:	77fb      	strb	r3, [r7, #31]
 8002950:	e0f1      	b.n	8002b36 <UART_SetConfig+0x346>
 8002952:	2302      	movs	r3, #2
 8002954:	77fb      	strb	r3, [r7, #31]
 8002956:	e0ee      	b.n	8002b36 <UART_SetConfig+0x346>
 8002958:	2304      	movs	r3, #4
 800295a:	77fb      	strb	r3, [r7, #31]
 800295c:	e0eb      	b.n	8002b36 <UART_SetConfig+0x346>
 800295e:	2308      	movs	r3, #8
 8002960:	77fb      	strb	r3, [r7, #31]
 8002962:	e0e8      	b.n	8002b36 <UART_SetConfig+0x346>
 8002964:	2310      	movs	r3, #16
 8002966:	77fb      	strb	r3, [r7, #31]
 8002968:	e0e5      	b.n	8002b36 <UART_SetConfig+0x346>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a57      	ldr	r2, [pc, #348]	; (8002acc <UART_SetConfig+0x2dc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d120      	bne.n	80029b6 <UART_SetConfig+0x1c6>
 8002974:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <UART_SetConfig+0x2d0>)
 8002976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800297e:	2bc0      	cmp	r3, #192	; 0xc0
 8002980:	d013      	beq.n	80029aa <UART_SetConfig+0x1ba>
 8002982:	2bc0      	cmp	r3, #192	; 0xc0
 8002984:	d814      	bhi.n	80029b0 <UART_SetConfig+0x1c0>
 8002986:	2b80      	cmp	r3, #128	; 0x80
 8002988:	d009      	beq.n	800299e <UART_SetConfig+0x1ae>
 800298a:	2b80      	cmp	r3, #128	; 0x80
 800298c:	d810      	bhi.n	80029b0 <UART_SetConfig+0x1c0>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <UART_SetConfig+0x1a8>
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d006      	beq.n	80029a4 <UART_SetConfig+0x1b4>
 8002996:	e00b      	b.n	80029b0 <UART_SetConfig+0x1c0>
 8002998:	2300      	movs	r3, #0
 800299a:	77fb      	strb	r3, [r7, #31]
 800299c:	e0cb      	b.n	8002b36 <UART_SetConfig+0x346>
 800299e:	2302      	movs	r3, #2
 80029a0:	77fb      	strb	r3, [r7, #31]
 80029a2:	e0c8      	b.n	8002b36 <UART_SetConfig+0x346>
 80029a4:	2304      	movs	r3, #4
 80029a6:	77fb      	strb	r3, [r7, #31]
 80029a8:	e0c5      	b.n	8002b36 <UART_SetConfig+0x346>
 80029aa:	2308      	movs	r3, #8
 80029ac:	77fb      	strb	r3, [r7, #31]
 80029ae:	e0c2      	b.n	8002b36 <UART_SetConfig+0x346>
 80029b0:	2310      	movs	r3, #16
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	e0bf      	b.n	8002b36 <UART_SetConfig+0x346>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a45      	ldr	r2, [pc, #276]	; (8002ad0 <UART_SetConfig+0x2e0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d125      	bne.n	8002a0c <UART_SetConfig+0x21c>
 80029c0:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <UART_SetConfig+0x2d0>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ce:	d017      	beq.n	8002a00 <UART_SetConfig+0x210>
 80029d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029d4:	d817      	bhi.n	8002a06 <UART_SetConfig+0x216>
 80029d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029da:	d00b      	beq.n	80029f4 <UART_SetConfig+0x204>
 80029dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029e0:	d811      	bhi.n	8002a06 <UART_SetConfig+0x216>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <UART_SetConfig+0x1fe>
 80029e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ea:	d006      	beq.n	80029fa <UART_SetConfig+0x20a>
 80029ec:	e00b      	b.n	8002a06 <UART_SetConfig+0x216>
 80029ee:	2300      	movs	r3, #0
 80029f0:	77fb      	strb	r3, [r7, #31]
 80029f2:	e0a0      	b.n	8002b36 <UART_SetConfig+0x346>
 80029f4:	2302      	movs	r3, #2
 80029f6:	77fb      	strb	r3, [r7, #31]
 80029f8:	e09d      	b.n	8002b36 <UART_SetConfig+0x346>
 80029fa:	2304      	movs	r3, #4
 80029fc:	77fb      	strb	r3, [r7, #31]
 80029fe:	e09a      	b.n	8002b36 <UART_SetConfig+0x346>
 8002a00:	2308      	movs	r3, #8
 8002a02:	77fb      	strb	r3, [r7, #31]
 8002a04:	e097      	b.n	8002b36 <UART_SetConfig+0x346>
 8002a06:	2310      	movs	r3, #16
 8002a08:	77fb      	strb	r3, [r7, #31]
 8002a0a:	e094      	b.n	8002b36 <UART_SetConfig+0x346>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a30      	ldr	r2, [pc, #192]	; (8002ad4 <UART_SetConfig+0x2e4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d125      	bne.n	8002a62 <UART_SetConfig+0x272>
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <UART_SetConfig+0x2d0>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a24:	d017      	beq.n	8002a56 <UART_SetConfig+0x266>
 8002a26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a2a:	d817      	bhi.n	8002a5c <UART_SetConfig+0x26c>
 8002a2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a30:	d00b      	beq.n	8002a4a <UART_SetConfig+0x25a>
 8002a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a36:	d811      	bhi.n	8002a5c <UART_SetConfig+0x26c>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <UART_SetConfig+0x254>
 8002a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a40:	d006      	beq.n	8002a50 <UART_SetConfig+0x260>
 8002a42:	e00b      	b.n	8002a5c <UART_SetConfig+0x26c>
 8002a44:	2301      	movs	r3, #1
 8002a46:	77fb      	strb	r3, [r7, #31]
 8002a48:	e075      	b.n	8002b36 <UART_SetConfig+0x346>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	77fb      	strb	r3, [r7, #31]
 8002a4e:	e072      	b.n	8002b36 <UART_SetConfig+0x346>
 8002a50:	2304      	movs	r3, #4
 8002a52:	77fb      	strb	r3, [r7, #31]
 8002a54:	e06f      	b.n	8002b36 <UART_SetConfig+0x346>
 8002a56:	2308      	movs	r3, #8
 8002a58:	77fb      	strb	r3, [r7, #31]
 8002a5a:	e06c      	b.n	8002b36 <UART_SetConfig+0x346>
 8002a5c:	2310      	movs	r3, #16
 8002a5e:	77fb      	strb	r3, [r7, #31]
 8002a60:	e069      	b.n	8002b36 <UART_SetConfig+0x346>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <UART_SetConfig+0x2e8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d137      	bne.n	8002adc <UART_SetConfig+0x2ec>
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <UART_SetConfig+0x2d0>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002a76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a7a:	d017      	beq.n	8002aac <UART_SetConfig+0x2bc>
 8002a7c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002a80:	d817      	bhi.n	8002ab2 <UART_SetConfig+0x2c2>
 8002a82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a86:	d00b      	beq.n	8002aa0 <UART_SetConfig+0x2b0>
 8002a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8c:	d811      	bhi.n	8002ab2 <UART_SetConfig+0x2c2>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <UART_SetConfig+0x2aa>
 8002a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a96:	d006      	beq.n	8002aa6 <UART_SetConfig+0x2b6>
 8002a98:	e00b      	b.n	8002ab2 <UART_SetConfig+0x2c2>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	77fb      	strb	r3, [r7, #31]
 8002a9e:	e04a      	b.n	8002b36 <UART_SetConfig+0x346>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	77fb      	strb	r3, [r7, #31]
 8002aa4:	e047      	b.n	8002b36 <UART_SetConfig+0x346>
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	77fb      	strb	r3, [r7, #31]
 8002aaa:	e044      	b.n	8002b36 <UART_SetConfig+0x346>
 8002aac:	2308      	movs	r3, #8
 8002aae:	77fb      	strb	r3, [r7, #31]
 8002ab0:	e041      	b.n	8002b36 <UART_SetConfig+0x346>
 8002ab2:	2310      	movs	r3, #16
 8002ab4:	77fb      	strb	r3, [r7, #31]
 8002ab6:	e03e      	b.n	8002b36 <UART_SetConfig+0x346>
 8002ab8:	efff69f3 	.word	0xefff69f3
 8002abc:	40011000 	.word	0x40011000
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	40004400 	.word	0x40004400
 8002ac8:	40004800 	.word	0x40004800
 8002acc:	40004c00 	.word	0x40004c00
 8002ad0:	40005000 	.word	0x40005000
 8002ad4:	40011400 	.word	0x40011400
 8002ad8:	40007800 	.word	0x40007800
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a71      	ldr	r2, [pc, #452]	; (8002ca8 <UART_SetConfig+0x4b8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d125      	bne.n	8002b32 <UART_SetConfig+0x342>
 8002ae6:	4b71      	ldr	r3, [pc, #452]	; (8002cac <UART_SetConfig+0x4bc>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002af0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002af4:	d017      	beq.n	8002b26 <UART_SetConfig+0x336>
 8002af6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002afa:	d817      	bhi.n	8002b2c <UART_SetConfig+0x33c>
 8002afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b00:	d00b      	beq.n	8002b1a <UART_SetConfig+0x32a>
 8002b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b06:	d811      	bhi.n	8002b2c <UART_SetConfig+0x33c>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <UART_SetConfig+0x324>
 8002b0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b10:	d006      	beq.n	8002b20 <UART_SetConfig+0x330>
 8002b12:	e00b      	b.n	8002b2c <UART_SetConfig+0x33c>
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
 8002b18:	e00d      	b.n	8002b36 <UART_SetConfig+0x346>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	77fb      	strb	r3, [r7, #31]
 8002b1e:	e00a      	b.n	8002b36 <UART_SetConfig+0x346>
 8002b20:	2304      	movs	r3, #4
 8002b22:	77fb      	strb	r3, [r7, #31]
 8002b24:	e007      	b.n	8002b36 <UART_SetConfig+0x346>
 8002b26:	2308      	movs	r3, #8
 8002b28:	77fb      	strb	r3, [r7, #31]
 8002b2a:	e004      	b.n	8002b36 <UART_SetConfig+0x346>
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	77fb      	strb	r3, [r7, #31]
 8002b30:	e001      	b.n	8002b36 <UART_SetConfig+0x346>
 8002b32:	2310      	movs	r3, #16
 8002b34:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3e:	d15a      	bne.n	8002bf6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8002b40:	7ffb      	ldrb	r3, [r7, #31]
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d827      	bhi.n	8002b96 <UART_SetConfig+0x3a6>
 8002b46:	a201      	add	r2, pc, #4	; (adr r2, 8002b4c <UART_SetConfig+0x35c>)
 8002b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4c:	08002b71 	.word	0x08002b71
 8002b50:	08002b79 	.word	0x08002b79
 8002b54:	08002b81 	.word	0x08002b81
 8002b58:	08002b97 	.word	0x08002b97
 8002b5c:	08002b87 	.word	0x08002b87
 8002b60:	08002b97 	.word	0x08002b97
 8002b64:	08002b97 	.word	0x08002b97
 8002b68:	08002b97 	.word	0x08002b97
 8002b6c:	08002b8f 	.word	0x08002b8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b70:	f7ff f91c 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8002b74:	61b8      	str	r0, [r7, #24]
        break;
 8002b76:	e013      	b.n	8002ba0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b78:	f7ff f92c 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8002b7c:	61b8      	str	r0, [r7, #24]
        break;
 8002b7e:	e00f      	b.n	8002ba0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b80:	4b4b      	ldr	r3, [pc, #300]	; (8002cb0 <UART_SetConfig+0x4c0>)
 8002b82:	61bb      	str	r3, [r7, #24]
        break;
 8002b84:	e00c      	b.n	8002ba0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b86:	f7ff f825 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8002b8a:	61b8      	str	r0, [r7, #24]
        break;
 8002b8c:	e008      	b.n	8002ba0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b92:	61bb      	str	r3, [r7, #24]
        break;
 8002b94:	e004      	b.n	8002ba0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	77bb      	strb	r3, [r7, #30]
        break;
 8002b9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d074      	beq.n	8002c90 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	005a      	lsls	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	441a      	add	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	2b0f      	cmp	r3, #15
 8002bc0:	d916      	bls.n	8002bf0 <UART_SetConfig+0x400>
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d212      	bcs.n	8002bf0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f023 030f 	bic.w	r3, r3, #15
 8002bd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	085b      	lsrs	r3, r3, #1
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	89fb      	ldrh	r3, [r7, #14]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	89fa      	ldrh	r2, [r7, #14]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	e04f      	b.n	8002c90 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	77bb      	strb	r3, [r7, #30]
 8002bf4:	e04c      	b.n	8002c90 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bf6:	7ffb      	ldrb	r3, [r7, #31]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d828      	bhi.n	8002c4e <UART_SetConfig+0x45e>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <UART_SetConfig+0x414>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002c29 	.word	0x08002c29
 8002c08:	08002c31 	.word	0x08002c31
 8002c0c:	08002c39 	.word	0x08002c39
 8002c10:	08002c4f 	.word	0x08002c4f
 8002c14:	08002c3f 	.word	0x08002c3f
 8002c18:	08002c4f 	.word	0x08002c4f
 8002c1c:	08002c4f 	.word	0x08002c4f
 8002c20:	08002c4f 	.word	0x08002c4f
 8002c24:	08002c47 	.word	0x08002c47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c28:	f7ff f8c0 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
 8002c2c:	61b8      	str	r0, [r7, #24]
        break;
 8002c2e:	e013      	b.n	8002c58 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c30:	f7ff f8d0 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8002c34:	61b8      	str	r0, [r7, #24]
        break;
 8002c36:	e00f      	b.n	8002c58 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c38:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <UART_SetConfig+0x4c0>)
 8002c3a:	61bb      	str	r3, [r7, #24]
        break;
 8002c3c:	e00c      	b.n	8002c58 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3e:	f7fe ffc9 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8002c42:	61b8      	str	r0, [r7, #24]
        break;
 8002c44:	e008      	b.n	8002c58 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4a:	61bb      	str	r3, [r7, #24]
        break;
 8002c4c:	e004      	b.n	8002c58 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	77bb      	strb	r3, [r7, #30]
        break;
 8002c56:	bf00      	nop
    }

    if (pclk != 0U)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d018      	beq.n	8002c90 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	085a      	lsrs	r2, r3, #1
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	441a      	add	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b0f      	cmp	r3, #15
 8002c76:	d909      	bls.n	8002c8c <UART_SetConfig+0x49c>
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7e:	d205      	bcs.n	8002c8c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	e001      	b.n	8002c90 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002c9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40007c00 	.word	0x40007c00
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	00f42400 	.word	0x00f42400

08002cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d48:	f003 0310 	and.w	r3, r3, #16
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d01a      	beq.n	8002dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db2:	d10a      	bne.n	8002dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
  }
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e08:	f7fe f892 	bl	8000f30 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d10e      	bne.n	8002e3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f831 	bl	8002e92 <UART_WaitOnFlagUntilTimeout>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e027      	b.n	8002e8a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d10e      	bne.n	8002e66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e4c:	9300      	str	r3, [sp, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f81b 	bl	8002e92 <UART_WaitOnFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e011      	b.n	8002e8a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b09c      	sub	sp, #112	; 0x70
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	60f8      	str	r0, [r7, #12]
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	603b      	str	r3, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea2:	e0a7      	b.n	8002ff4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eaa:	f000 80a3 	beq.w	8002ff4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7fe f83f 	bl	8000f30 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0x32>
 8002ebe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d13f      	bne.n	8002f44 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ecc:	e853 3f00 	ldrex	r3, [r3]
 8002ed0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ee4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002ee8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002eea:	e841 2300 	strex	r3, r2, [r1]
 8002eee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1e6      	bne.n	8002ec4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	3308      	adds	r3, #8
 8002efc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f00:	e853 3f00 	ldrex	r3, [r3]
 8002f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3308      	adds	r3, #8
 8002f14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f16:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f1a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f1e:	e841 2300 	strex	r3, r2, [r1]
 8002f22:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1e5      	bne.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e068      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d050      	beq.n	8002ff4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69db      	ldr	r3, [r3, #28]
 8002f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f60:	d148      	bne.n	8002ff4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461a      	mov	r2, r3
 8002f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f92:	e841 2300 	strex	r3, r2, [r1]
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1e6      	bne.n	8002f6c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	e853 3f00 	ldrex	r3, [r3]
 8002fac:	613b      	str	r3, [r7, #16]
   return(result);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	3308      	adds	r3, #8
 8002fbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fbe:	623a      	str	r2, [r7, #32]
 8002fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	69f9      	ldr	r1, [r7, #28]
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	e841 2300 	strex	r3, r2, [r1]
 8002fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e5      	bne.n	8002f9e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e010      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	461a      	mov	r2, r3
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	429a      	cmp	r2, r3
 8003010:	f43f af48 	beq.w	8002ea4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3770      	adds	r7, #112	; 0x70
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b096      	sub	sp, #88	; 0x58
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3303      	adds	r3, #3
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003038:	f3ef 8310 	mrs	r3, PRIMASK
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800303e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8003040:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8003042:	b672      	cpsid	i
#endif
    return(int_posture);
 8003044:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 8003046:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003048:	4b55      	ldr	r3, [pc, #340]	; (80031a0 <_tx_byte_allocate+0x180>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800304e:	2300      	movs	r3, #0
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003056:	621a      	str	r2, [r3, #32]
 8003058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	f383 8810 	msr	PRIMASK, r3
}
 8003062:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f9b2 	bl	80033d0 <_tx_byte_pool_search>
 800306c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800306e:	f3ef 8310 	mrs	r3, PRIMASK
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8003076:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8003078:	b672      	cpsid	i
    return(int_posture);
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800307c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800307e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8003084:	2301      	movs	r3, #1
 8003086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003088:	e006      	b.n	8003098 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003090:	429a      	cmp	r2, r3
 8003092:	d101      	bne.n	8003098 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8003094:	2301      	movs	r3, #1
 8003096:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 8003098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0d9      	beq.n	8003052 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030a2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80030a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <_tx_byte_allocate+0x9c>
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f383 8810 	msr	PRIMASK, r3
}
 80030b4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80030b6:	2300      	movs	r3, #0
 80030b8:	653b      	str	r3, [r7, #80]	; 0x50
 80030ba:	e06c      	b.n	8003196 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d061      	beq.n	8003186 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80030c2:	4b38      	ldr	r3, [pc, #224]	; (80031a4 <_tx_byte_allocate+0x184>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80030ca:	2310      	movs	r3, #16
 80030cc:	653b      	str	r3, [r7, #80]	; 0x50
 80030ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030d0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	f383 8810 	msr	PRIMASK, r3
}
 80030d8:	e05d      	b.n	8003196 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80030da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030dc:	4a32      	ldr	r2, [pc, #200]	; (80031a8 <_tx_byte_allocate+0x188>)
 80030de:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80030e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80030e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80030ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80030f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80030f8:	1c5a      	adds	r2, r3, #1
 80030fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003104:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8003110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800311c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800311e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003120:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8003122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003126:	675a      	str	r2, [r3, #116]	; 0x74
 8003128:	e011      	b.n	800314e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8003130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003132:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003134:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8003136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800313c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003140:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003146:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8003148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800314c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800314e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003150:	2209      	movs	r2, #9
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8003154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003156:	2201      	movs	r2, #1
 8003158:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800315a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <_tx_byte_allocate+0x184>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	4a0f      	ldr	r2, [pc, #60]	; (80031a4 <_tx_byte_allocate+0x184>)
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800316c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f383 8810 	msr	PRIMASK, r3
}
 8003174:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8003176:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003178:	f000 fd5e 	bl	8003c38 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800317c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003182:	653b      	str	r3, [r7, #80]	; 0x50
 8003184:	e007      	b.n	8003196 <_tx_byte_allocate+0x176>
 8003186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003188:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f383 8810 	msr	PRIMASK, r3
}
 8003190:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 8003192:	2310      	movs	r3, #16
 8003194:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 8003196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8003198:	4618      	mov	r0, r3
 800319a:	3758      	adds	r7, #88	; 0x58
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000b10 	.word	0x20000b10
 80031a4:	20000b0c 	.word	0x20000b0c
 80031a8:	080031ad 	.word	0x080031ad

080031ac <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08e      	sub	sp, #56	; 0x38
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80031b6:	f3ef 8310 	mrs	r3, PRIMASK
 80031ba:	623b      	str	r3, [r7, #32]
    return(posture);
 80031bc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80031be:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80031c0:	b672      	cpsid	i
    return(int_posture);
 80031c2:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ca:	4a33      	ldr	r2, [pc, #204]	; (8003298 <_tx_byte_pool_cleanup+0xec>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d158      	bne.n	8003282 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d152      	bne.n	8003282 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e0:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80031e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d04c      	beq.n	8003282 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a2b      	ldr	r2, [pc, #172]	; (800329c <_tx_byte_pool_cleanup+0xf0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d147      	bne.n	8003282 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80031f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d043      	beq.n	8003282 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	1e5a      	subs	r2, r3, #1
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	2200      	movs	r2, #0
 800321a:	625a      	str	r2, [r3, #36]	; 0x24
 800321c:	e013      	b.n	8003246 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003222:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800322a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003234:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d102      	bne.n	8003246 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003244:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	2b09      	cmp	r3, #9
 800324c:	d119      	bne.n	8003282 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2210      	movs	r2, #16
 8003252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8003256:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <_tx_byte_pool_cleanup+0xf4>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	4a10      	ldr	r2, [pc, #64]	; (80032a0 <_tx_byte_pool_cleanup+0xf4>)
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003262:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f383 8810 	msr	PRIMASK, r3
}
 800326a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fbe3 	bl	8003a38 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003272:	f3ef 8310 	mrs	r3, PRIMASK
 8003276:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003278:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800327a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800327c:	b672      	cpsid	i
    return(int_posture);
 800327e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8003280:	637b      	str	r3, [r7, #52]	; 0x34
 8003282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003284:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f383 8810 	msr	PRIMASK, r3
}
 800328c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800328e:	bf00      	nop
 8003290:	3738      	adds	r7, #56	; 0x38
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	080031ad 	.word	0x080031ad
 800329c:	42595445 	.word	0x42595445
 80032a0:	20000b0c 	.word	0x20000b0c

080032a4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08e      	sub	sp, #56	; 0x38
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
 80032b0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80032b2:	2234      	movs	r2, #52	; 0x34
 80032b4:	2100      	movs	r1, #0
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f001 fada 	bl	8004870 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f1a3 0208 	sub.w	r2, r3, #8
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2202      	movs	r2, #2
 80032f0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80032f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	3b04      	subs	r3, #4
 8003302:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800330c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003310:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003314:	3b04      	subs	r3, #4
 8003316:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8003318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800332e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8003334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003336:	3304      	adds	r3, #4
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800333e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003340:	4a1f      	ldr	r2, [pc, #124]	; (80033c0 <_tx_byte_pool_create+0x11c>)
 8003342:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800334a:	f3ef 8310 	mrs	r3, PRIMASK
 800334e:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003350:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003352:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003354:	b672      	cpsid	i
    return(int_posture);
 8003356:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8003358:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a19      	ldr	r2, [pc, #100]	; (80033c4 <_tx_byte_pool_create+0x120>)
 800335e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8003360:	4b19      	ldr	r3, [pc, #100]	; (80033c8 <_tx_byte_pool_create+0x124>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d109      	bne.n	800337c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8003368:	4a18      	ldr	r2, [pc, #96]	; (80033cc <_tx_byte_pool_create+0x128>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	631a      	str	r2, [r3, #48]	; 0x30
 800337a:	e011      	b.n	80033a0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <_tx_byte_pool_create+0x128>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8003382:	6a3b      	ldr	r3, [r7, #32]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a3a      	ldr	r2, [r7, #32]
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <_tx_byte_pool_create+0x124>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	4a08      	ldr	r2, [pc, #32]	; (80033c8 <_tx_byte_pool_create+0x124>)
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f383 8810 	msr	PRIMASK, r3
}
 80033b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3738      	adds	r7, #56	; 0x38
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	ffffeeee 	.word	0xffffeeee
 80033c4:	42595445 	.word	0x42595445
 80033c8:	20000a70 	.word	0x20000a70
 80033cc:	20000a54 	.word	0x20000a54

080033d0 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b097      	sub	sp, #92	; 0x5c
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80033da:	2300      	movs	r3, #0
 80033dc:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80033de:	f3ef 8310 	mrs	r3, PRIMASK
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80033e6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80033e8:	b672      	cpsid	i
    return(int_posture);
 80033ea:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80033ec:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	3b02      	subs	r3, #2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003402:	429a      	cmp	r2, r3
 8003404:	d308      	bcc.n	8003418 <_tx_byte_pool_search+0x48>
 8003406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003408:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f383 8810 	msr	PRIMASK, r3
}
 8003410:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8003412:	2300      	movs	r3, #0
 8003414:	653b      	str	r3, [r7, #80]	; 0x50
 8003416:	e0dd      	b.n	80035d4 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8003418:	4b72      	ldr	r3, [pc, #456]	; (80035e4 <_tx_byte_pool_search+0x214>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003422:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	3301      	adds	r3, #1
 8003430:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8003432:	2300      	movs	r3, #0
 8003434:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8003436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003438:	3304      	adds	r3, #4
 800343a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800343c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <_tx_byte_pool_search+0x218>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d143      	bne.n	80034d2 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800344a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800344c:	2b00      	cmp	r3, #0
 800344e:	d104      	bne.n	800345a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003454:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8003456:	2301      	movs	r3, #1
 8003458:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800345a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8003464:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800346c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800346e:	3b08      	subs	r3, #8
 8003470:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8003472:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d257      	bcs.n	800352a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800347a:	2300      	movs	r3, #0
 800347c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	3304      	adds	r3, #4
 8003482:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8003484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a56      	ldr	r2, [pc, #344]	; (80035e8 <_tx_byte_pool_search+0x218>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d113      	bne.n	80034ba <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8003492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	1e5a      	subs	r2, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d114      	bne.n	80034dc <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034b6:	615a      	str	r2, [r3, #20]
 80034b8:	e010      	b.n	80034dc <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80034ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80034c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d008      	beq.n	80034dc <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80034ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034cc:	3b01      	subs	r3, #1
 80034ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80034d0:	e004      	b.n	80034dc <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80034d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d4:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80034dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 80034e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e4:	3b01      	subs	r3, #1
 80034e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80034e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f383 8810 	msr	PRIMASK, r3
}
 80034f2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80034f4:	f3ef 8310 	mrs	r3, PRIMASK
 80034f8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80034fa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80034fc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80034fe:	b672      	cpsid	i
    return(int_posture);
 8003500:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8003502:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800350a:	429a      	cmp	r2, r3
 800350c:	d009      	beq.n	8003522 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	3301      	adds	r3, #1
 800351a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003520:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8003522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003524:	2b00      	cmp	r3, #0
 8003526:	d186      	bne.n	8003436 <_tx_byte_pool_search+0x66>
 8003528:	e000      	b.n	800352c <_tx_byte_pool_search+0x15c>
                    break;
 800352a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800352c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352e:	2b00      	cmp	r3, #0
 8003530:	d048      	beq.n	80035c4 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8003532:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b13      	cmp	r3, #19
 800353a:	d91e      	bls.n	800357a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	3308      	adds	r3, #8
 8003540:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003542:	4413      	add	r3, r2
 8003544:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8003546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800354a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800354c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	3304      	adds	r3, #4
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8003560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003562:	4a21      	ldr	r2, [pc, #132]	; (80035e8 <_tx_byte_pool_search+0x218>)
 8003564:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8003570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003574:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800357a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357c:	3304      	adds	r3, #4
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f1a3 0208 	sub.w	r2, r3, #8
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d105      	bne.n	80035b0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80035a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a6:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	615a      	str	r2, [r3, #20]
 80035b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f383 8810 	msr	PRIMASK, r3
}
 80035ba:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80035bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035be:	3308      	adds	r3, #8
 80035c0:	653b      	str	r3, [r7, #80]	; 0x50
 80035c2:	e007      	b.n	80035d4 <_tx_byte_pool_search+0x204>
 80035c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80035d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	375c      	adds	r7, #92	; 0x5c
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	20000b10 	.word	0x20000b10
 80035e8:	ffffeeee 	.word	0xffffeeee

080035ec <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80035f0:	f000 f960 	bl	80038b4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80035f4:	f000 fce8 	bl	8003fc8 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80035f8:	4b12      	ldr	r3, [pc, #72]	; (8003644 <_tx_initialize_high_level+0x58>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	601a      	str	r2, [r3, #0]
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <_tx_initialize_high_level+0x5c>)
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8003604:	4b11      	ldr	r3, [pc, #68]	; (800364c <_tx_initialize_high_level+0x60>)
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	4b11      	ldr	r3, [pc, #68]	; (8003650 <_tx_initialize_high_level+0x64>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <_tx_initialize_high_level+0x68>)
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	4b10      	ldr	r3, [pc, #64]	; (8003658 <_tx_initialize_high_level+0x6c>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <_tx_initialize_high_level+0x70>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	4b0f      	ldr	r3, [pc, #60]	; (8003660 <_tx_initialize_high_level+0x74>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8003628:	4b0e      	ldr	r3, [pc, #56]	; (8003664 <_tx_initialize_high_level+0x78>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
 800362e:	4b0e      	ldr	r3, [pc, #56]	; (8003668 <_tx_initialize_high_level+0x7c>)
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8003634:	4b0d      	ldr	r3, [pc, #52]	; (800366c <_tx_initialize_high_level+0x80>)
 8003636:	2200      	movs	r2, #0
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	4b0d      	ldr	r3, [pc, #52]	; (8003670 <_tx_initialize_high_level+0x84>)
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
#endif
}
 8003640:	bf00      	nop
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000a50 	.word	0x20000a50
 8003648:	20000a60 	.word	0x20000a60
 800364c:	20000a6c 	.word	0x20000a6c
 8003650:	20000a4c 	.word	0x20000a4c
 8003654:	20000a40 	.word	0x20000a40
 8003658:	20000a64 	.word	0x20000a64
 800365c:	20000a68 	.word	0x20000a68
 8003660:	20000a5c 	.word	0x20000a5c
 8003664:	20000a54 	.word	0x20000a54
 8003668:	20000a70 	.word	0x20000a70
 800366c:	20000a48 	.word	0x20000a48
 8003670:	20000a44 	.word	0x20000a44

08003674 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8003678:	4b10      	ldr	r3, [pc, #64]	; (80036bc <_tx_initialize_kernel_enter+0x48>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8003680:	d00c      	beq.n	800369c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <_tx_initialize_kernel_enter+0x48>)
 8003684:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8003688:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800368a:	f7fc fdd9 	bl	8000240 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800368e:	f7ff ffad 	bl	80035ec <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8003692:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <_tx_initialize_kernel_enter+0x4c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	4a09      	ldr	r2, [pc, #36]	; (80036c0 <_tx_initialize_kernel_enter+0x4c>)
 800369a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <_tx_initialize_kernel_enter+0x48>)
 800369e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 80036a2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <_tx_initialize_kernel_enter+0x50>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fd f861 	bl	8000770 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80036ae:	4b03      	ldr	r3, [pc, #12]	; (80036bc <_tx_initialize_kernel_enter+0x48>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80036b4:	f7fc fe04 	bl	80002c0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80036b8:	bf00      	nop
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	2000000c 	.word	0x2000000c
 80036c0:	20000b0c 	.word	0x20000b0c
 80036c4:	20000a58 	.word	0x20000a58

080036c8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b092      	sub	sp, #72	; 0x48
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80036d6:	2300      	movs	r3, #0
 80036d8:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80036da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80036dc:	21ef      	movs	r1, #239	; 0xef
 80036de:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80036e0:	f001 f8c6 	bl	8004870 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80036e4:	22b0      	movs	r2, #176	; 0xb0
 80036e6:	2100      	movs	r1, #0
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f001 f8c1 	bl	8004870 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	683a      	ldr	r2, [r7, #0]
 80036fe:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003704:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800370a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003710:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003716:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800371e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003724:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800372e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003730:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8003732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003734:	3b01      	subs	r3, #1
 8003736:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003738:	4413      	add	r3, r2
 800373a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003740:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8003742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003746:	429a      	cmp	r2, r3
 8003748:	d007      	beq.n	800375a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003758:	e006      	b.n	8003768 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800375e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003764:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2203      	movs	r2, #3
 800376c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4a48      	ldr	r2, [pc, #288]	; (8003894 <_tx_thread_create+0x1cc>)
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800377a:	4947      	ldr	r1, [pc, #284]	; (8003898 <_tx_thread_create+0x1d0>)
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fc fdff 	bl	8000380 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003782:	f3ef 8310 	mrs	r3, PRIMASK
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800378a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800378c:	b672      	cpsid	i
    return(int_posture);
 800378e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8003790:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4a41      	ldr	r2, [pc, #260]	; (800389c <_tx_thread_create+0x1d4>)
 8003796:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8003798:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <_tx_thread_create+0x1d8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80037a0:	4a40      	ldr	r2, [pc, #256]	; (80038a4 <_tx_thread_create+0x1dc>)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80037b6:	e016      	b.n	80037e6 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80037b8:	4b3a      	ldr	r3, [pc, #232]	; (80038a4 <_tx_thread_create+0x1dc>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80037c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80037e6:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <_tx_thread_create+0x1d8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	4a2c      	ldr	r2, [pc, #176]	; (80038a0 <_tx_thread_create+0x1d8>)
 80037ee:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <_tx_thread_create+0x1e0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <_tx_thread_create+0x1e0>)
 80037f8:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80037fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d129      	bne.n	8003854 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003800:	f3ef 8305 	mrs	r3, IPSR
 8003804:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8003806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8003808:	4b28      	ldr	r3, [pc, #160]	; (80038ac <_tx_thread_create+0x1e4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4313      	orrs	r3, r2
 800380e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8003812:	d30d      	bcc.n	8003830 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8003814:	4b26      	ldr	r3, [pc, #152]	; (80038b0 <_tx_thread_create+0x1e8>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800381a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381c:	2b00      	cmp	r3, #0
 800381e:	d009      	beq.n	8003834 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8003820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003824:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8003826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800382c:	63da      	str	r2, [r3, #60]	; 0x3c
 800382e:	e001      	b.n	8003834 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	647b      	str	r3, [r7, #68]	; 0x44
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f383 8810 	msr	PRIMASK, r3
}
 800383e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f8f9 	bl	8003a38 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8003846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01e      	beq.n	800388a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800384c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003850:	63da      	str	r2, [r3, #60]	; 0x3c
 8003852:	e01a      	b.n	800388a <_tx_thread_create+0x1c2>
 8003854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003856:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f383 8810 	msr	PRIMASK, r3
}
 800385e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003860:	f3ef 8310 	mrs	r3, PRIMASK
 8003864:	61bb      	str	r3, [r7, #24]
    return(posture);
 8003866:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8003868:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800386a:	b672      	cpsid	i
    return(int_posture);
 800386c:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800386e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8003870:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <_tx_thread_create+0x1e0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3b01      	subs	r3, #1
 8003876:	4a0c      	ldr	r2, [pc, #48]	; (80038a8 <_tx_thread_create+0x1e0>)
 8003878:	6013      	str	r3, [r2, #0]
 800387a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800387c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f383 8810 	msr	PRIMASK, r3
}
 8003884:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8003886:	f000 f89d 	bl	80039c4 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3748      	adds	r7, #72	; 0x48
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	08003f0d 	.word	0x08003f0d
 8003898:	0800392d 	.word	0x0800392d
 800389c:	54485244 	.word	0x54485244
 80038a0:	20000b04 	.word	0x20000b04
 80038a4:	20000afc 	.word	0x20000afc
 80038a8:	20000b0c 	.word	0x20000b0c
 80038ac:	2000000c 	.word	0x2000000c
 80038b0:	20000b14 	.word	0x20000b14

080038b4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <_tx_thread_initialize+0x50>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80038be:	4b12      	ldr	r3, [pc, #72]	; (8003908 <_tx_thread_initialize+0x54>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <_tx_thread_initialize+0x58>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <_tx_thread_initialize+0x5c>)
 80038cc:	2220      	movs	r2, #32
 80038ce:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80038d0:	2280      	movs	r2, #128	; 0x80
 80038d2:	2100      	movs	r1, #0
 80038d4:	480f      	ldr	r0, [pc, #60]	; (8003914 <_tx_thread_initialize+0x60>)
 80038d6:	f000 ffcb 	bl	8004870 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <_tx_thread_initialize+0x64>)
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <_tx_thread_initialize+0x68>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80038e6:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <_tx_thread_initialize+0x6c>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <_tx_thread_initialize+0x70>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <_tx_thread_initialize+0x74>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80038fa:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <_tx_thread_initialize+0x74>)
 80038fc:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000b10 	.word	0x20000b10
 8003908:	20000b14 	.word	0x20000b14
 800390c:	20000af8 	.word	0x20000af8
 8003910:	20000b18 	.word	0x20000b18
 8003914:	20000a74 	.word	0x20000a74
 8003918:	20000afc 	.word	0x20000afc
 800391c:	20000b04 	.word	0x20000b04
 8003920:	20000b0c 	.word	0x20000b0c
 8003924:	20000af4 	.word	0x20000af4
 8003928:	20000b00 	.word	0x20000b00

0800392c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003932:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <_tx_thread_shell_entry+0x8c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003940:	4610      	mov	r0, r2
 8003942:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <_tx_thread_shell_entry+0x90>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <_tx_thread_shell_entry+0x90>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	69f8      	ldr	r0, [r7, #28]
 8003952:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003954:	f3ef 8310 	mrs	r3, PRIMASK
 8003958:	607b      	str	r3, [r7, #4]
    return(posture);
 800395a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800395c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800395e:	b672      	cpsid	i
    return(int_posture);
 8003960:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8003962:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	2201      	movs	r2, #1
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2201      	movs	r2, #1
 800396e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	2200      	movs	r2, #0
 8003974:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <_tx_thread_shell_entry+0x94>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3301      	adds	r3, #1
 800397c:	4a10      	ldr	r2, [pc, #64]	; (80039c0 <_tx_thread_shell_entry+0x94>)
 800397e:	6013      	str	r3, [r2, #0]
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	f383 8810 	msr	PRIMASK, r3
}
 800398a:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800398c:	f3ef 8314 	mrs	r3, CONTROL
 8003990:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8003992:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f383 8814 	msr	CONTROL, r3
}
 80039a8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80039aa:	69f8      	ldr	r0, [r7, #28]
 80039ac:	f000 f944 	bl	8003c38 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80039b0:	bf00      	nop
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000b10 	.word	0x20000b10
 80039bc:	20000af4 	.word	0x20000af4
 80039c0:	20000b0c 	.word	0x20000b0c

080039c4 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	; 0x24
 80039c8:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <_tx_thread_system_preempt_check+0x64>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d121      	bne.n	8003a1a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80039d6:	4b15      	ldr	r3, [pc, #84]	; (8003a2c <_tx_thread_system_preempt_check+0x68>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80039dc:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <_tx_thread_system_preempt_check+0x6c>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d017      	beq.n	8003a1a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <_tx_thread_system_preempt_check+0x70>)
 80039ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80039f2:	f3ef 8305 	mrs	r3, IPSR
 80039f6:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80039f8:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10c      	bne.n	8003a18 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	60fb      	str	r3, [r7, #12]
    return(posture);
 8003a04:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8003a06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003a08:	b662      	cpsie	i
}
 8003a0a:	bf00      	nop
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f383 8810 	msr	PRIMASK, r3
}
 8003a16:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8003a18:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8003a1a:	bf00      	nop
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20000b0c 	.word	0x20000b0c
 8003a2c:	20000b10 	.word	0x20000b10
 8003a30:	20000b14 	.word	0x20000b14
 8003a34:	e000ed04 	.word	0xe000ed04

08003a38 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b096      	sub	sp, #88	; 0x58
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003a40:	f3ef 8310 	mrs	r3, PRIMASK
 8003a44:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 8003a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8003a48:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8003a4a:	b672      	cpsid	i
    return(int_posture);
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8003a4e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	334c      	adds	r3, #76	; 0x4c
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fb91 	bl	8004184 <_tx_timer_system_deactivate>
 8003a62:	e002      	b.n	8003a6a <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003a6a:	4b6c      	ldr	r3, [pc, #432]	; (8003c1c <_tx_thread_system_resume+0x1e4>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	4a6a      	ldr	r2, [pc, #424]	; (8003c1c <_tx_thread_system_resume+0x1e4>)
 8003a72:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f040 8083 	bne.w	8003b84 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 8097 	beq.w	8003bb6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d172      	bne.n	8003b76 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8003a9c:	4a60      	ldr	r2, [pc, #384]	; (8003c20 <_tx_thread_system_resume+0x1e8>)
 8003a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d154      	bne.n	8003b56 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8003aac:	495c      	ldr	r1, [pc, #368]	; (8003c20 <_tx_thread_system_resume+0x1e8>)
 8003aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8003acc:	4b55      	ldr	r3, [pc, #340]	; (8003c24 <_tx_thread_system_resume+0x1ec>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	4a53      	ldr	r2, [pc, #332]	; (8003c24 <_tx_thread_system_resume+0x1ec>)
 8003ad6:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <_tx_thread_system_resume+0x1f0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d269      	bcs.n	8003bb6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8003ae2:	4a51      	ldr	r2, [pc, #324]	; (8003c28 <_tx_thread_system_resume+0x1f0>)
 8003ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae6:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8003ae8:	4b50      	ldr	r3, [pc, #320]	; (8003c2c <_tx_thread_system_resume+0x1f4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8003aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d103      	bne.n	8003afc <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8003af4:	4a4d      	ldr	r2, [pc, #308]	; (8003c2c <_tx_thread_system_resume+0x1f4>)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e05c      	b.n	8003bb6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8003afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d257      	bcs.n	8003bb6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8003b06:	4a49      	ldr	r2, [pc, #292]	; (8003c2c <_tx_thread_system_resume+0x1f4>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b12:	f383 8810 	msr	PRIMASK, r3
}
 8003b16:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003b18:	4b40      	ldr	r3, [pc, #256]	; (8003c1c <_tx_thread_system_resume+0x1e4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8003b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d174      	bne.n	8003c0e <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003b24:	4b42      	ldr	r3, [pc, #264]	; (8003c30 <_tx_thread_system_resume+0x1f8>)
 8003b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003b2c:	f3ef 8305 	mrs	r3, IPSR
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10c      	bne.n	8003b52 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003b38:	f3ef 8310 	mrs	r3, PRIMASK
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8003b40:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003b42:	b662      	cpsie	i
}
 8003b44:	bf00      	nop
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f383 8810 	msr	PRIMASK, r3
}
 8003b50:	bf00      	nop
}
 8003b52:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8003b54:	e05b      	b.n	8003c0e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8003b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8003b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8003b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b72:	621a      	str	r2, [r3, #32]
 8003b74:	e01f      	b.n	8003bb6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2203      	movs	r2, #3
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
 8003b82:	e018      	b.n	8003bb6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d014      	beq.n	8003bb6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d010      	beq.n	8003bb6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ba8:	e005      	b.n	8003bb6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	; (8003c34 <_tx_thread_system_resume+0x1fc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8003bc8:	4b18      	ldr	r3, [pc, #96]	; (8003c2c <_tx_thread_system_resume+0x1f4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d020      	beq.n	8003c14 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <_tx_thread_system_resume+0x1e4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d11a      	bne.n	8003c14 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003bde:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <_tx_thread_system_resume+0x1f8>)
 8003be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003be6:	f3ef 8305 	mrs	r3, IPSR
 8003bea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8003bec:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf6:	613b      	str	r3, [r7, #16]
    return(posture);
 8003bf8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8003bfa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003bfc:	b662      	cpsie	i
}
 8003bfe:	bf00      	nop
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f383 8810 	msr	PRIMASK, r3
}
 8003c0a:	bf00      	nop
}
 8003c0c:	e001      	b.n	8003c12 <_tx_thread_system_resume+0x1da>
                                return;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <_tx_thread_system_resume+0x1dc>
 8003c12:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8003c14:	3758      	adds	r7, #88	; 0x58
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000b0c 	.word	0x20000b0c
 8003c20:	20000a74 	.word	0x20000a74
 8003c24:	20000af8 	.word	0x20000af8
 8003c28:	20000b18 	.word	0x20000b18
 8003c2c:	20000b14 	.word	0x20000b14
 8003c30:	e000ed04 	.word	0xe000ed04
 8003c34:	20000b10 	.word	0x20000b10

08003c38 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b09e      	sub	sp, #120	; 0x78
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8003c40:	4b81      	ldr	r3, [pc, #516]	; (8003e48 <_tx_thread_system_suspend+0x210>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003c46:	f3ef 8310 	mrs	r3, PRIMASK
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8003c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8003c4e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8003c50:	b672      	cpsid	i
    return(int_posture);
 8003c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8003c54:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d112      	bne.n	8003c84 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c62:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8003c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d008      	beq.n	8003c7c <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d004      	beq.n	8003c7c <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	334c      	adds	r3, #76	; 0x4c
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fa22 	bl	80040c0 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	4a72      	ldr	r2, [pc, #456]	; (8003e4c <_tx_thread_system_suspend+0x214>)
 8003c82:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8003c84:	4b72      	ldr	r3, [pc, #456]	; (8003e50 <_tx_thread_system_suspend+0x218>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	4a71      	ldr	r2, [pc, #452]	; (8003e50 <_tx_thread_system_suspend+0x218>)
 8003c8c:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	f040 80a6 	bne.w	8003de4 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8003caa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d015      	beq.n	8003cde <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8003cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003cc2:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8003cc4:	4a63      	ldr	r2, [pc, #396]	; (8003e54 <_tx_thread_system_suspend+0x21c>)
 8003cc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d157      	bne.n	8003d82 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8003cd2:	4960      	ldr	r1, [pc, #384]	; (8003e54 <_tx_thread_system_suspend+0x21c>)
 8003cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cd6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003cdc:	e051      	b.n	8003d82 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8003cde:	4a5d      	ldr	r2, [pc, #372]	; (8003e54 <_tx_thread_system_suspend+0x21c>)
 8003ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8003cf2:	4b59      	ldr	r3, [pc, #356]	; (8003e58 <_tx_thread_system_suspend+0x220>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	4a56      	ldr	r2, [pc, #344]	; (8003e58 <_tx_thread_system_suspend+0x220>)
 8003cfe:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8003d00:	2300      	movs	r3, #0
 8003d02:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8003d04:	4b54      	ldr	r3, [pc, #336]	; (8003e58 <_tx_thread_system_suspend+0x220>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8003d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d12b      	bne.n	8003d68 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8003d10:	4b52      	ldr	r3, [pc, #328]	; (8003e5c <_tx_thread_system_suspend+0x224>)
 8003d12:	2220      	movs	r2, #32
 8003d14:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8003d16:	4b52      	ldr	r3, [pc, #328]	; (8003e60 <_tx_thread_system_suspend+0x228>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d1e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003d28:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <_tx_thread_system_suspend+0x218>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f040 8081 	bne.w	8003e38 <_tx_thread_system_suspend+0x200>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003d36:	4b4b      	ldr	r3, [pc, #300]	; (8003e64 <_tx_thread_system_suspend+0x22c>)
 8003d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d3c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003d3e:	f3ef 8305 	mrs	r3, IPSR
 8003d42:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8003d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10c      	bne.n	8003d64 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8003d52:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003d54:	b662      	cpsie	i
}
 8003d56:	bf00      	nop
 8003d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	f383 8810 	msr	PRIMASK, r3
}
 8003d62:	bf00      	nop
}
 8003d64:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8003d66:	e067      	b.n	8003e38 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8003d68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8003d78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d7c:	4413      	add	r3, r2
 8003d7e:	4a37      	ldr	r2, [pc, #220]	; (8003e5c <_tx_thread_system_suspend+0x224>)
 8003d80:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <_tx_thread_system_suspend+0x228>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d12b      	bne.n	8003de4 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003d8c:	4b33      	ldr	r3, [pc, #204]	; (8003e5c <_tx_thread_system_suspend+0x224>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a30      	ldr	r2, [pc, #192]	; (8003e54 <_tx_thread_system_suspend+0x21c>)
 8003d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d96:	4a32      	ldr	r2, [pc, #200]	; (8003e60 <_tx_thread_system_suspend+0x228>)
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d9c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	f383 8810 	msr	PRIMASK, r3
}
 8003da4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003da6:	4b2a      	ldr	r3, [pc, #168]	; (8003e50 <_tx_thread_system_suspend+0x218>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8003dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d144      	bne.n	8003e3c <_tx_thread_system_suspend+0x204>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003db2:	4b2c      	ldr	r3, [pc, #176]	; (8003e64 <_tx_thread_system_suspend+0x22c>)
 8003db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003dba:	f3ef 8305 	mrs	r3, IPSR
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8003dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10c      	bne.n	8003de0 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8003dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003dd0:	b662      	cpsie	i
}
 8003dd2:	bf00      	nop
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	bf00      	nop
}
 8003de0:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8003de2:	e02b      	b.n	8003e3c <_tx_thread_system_suspend+0x204>
 8003de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003de6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f383 8810 	msr	PRIMASK, r3
}
 8003dee:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <_tx_thread_system_suspend+0x228>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d022      	beq.n	8003e40 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8003dfa:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <_tx_thread_system_suspend+0x218>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8003e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d11c      	bne.n	8003e40 <_tx_thread_system_suspend+0x208>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <_tx_thread_system_suspend+0x22c>)
 8003e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8003e0e:	f3ef 8305 	mrs	r3, IPSR
 8003e12:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8003e14:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10c      	bne.n	8003e34 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1e:	617b      	str	r3, [r7, #20]
    return(posture);
 8003e20:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8003e22:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8003e24:	b662      	cpsie	i
}
 8003e26:	bf00      	nop
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	bf00      	nop
}
 8003e34:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8003e36:	e003      	b.n	8003e40 <_tx_thread_system_suspend+0x208>
                return;
 8003e38:	bf00      	nop
 8003e3a:	e002      	b.n	8003e42 <_tx_thread_system_suspend+0x20a>
            return;
 8003e3c:	bf00      	nop
 8003e3e:	e000      	b.n	8003e42 <_tx_thread_system_suspend+0x20a>
    return;
 8003e40:	bf00      	nop
}
 8003e42:	3778      	adds	r7, #120	; 0x78
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000b10 	.word	0x20000b10
 8003e4c:	20000ba4 	.word	0x20000ba4
 8003e50:	20000b0c 	.word	0x20000b0c
 8003e54:	20000a74 	.word	0x20000a74
 8003e58:	20000af8 	.word	0x20000af8
 8003e5c:	20000b18 	.word	0x20000b18
 8003e60:	20000b14 	.word	0x20000b14
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8003e6e:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <_tx_thread_time_slice+0x8c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003e74:	f3ef 8310 	mrs	r3, PRIMASK
 8003e78:	60fb      	str	r3, [r7, #12]
    return(posture);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8003e7c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003e7e:	b672      	cpsid	i
    return(int_posture);
 8003e80:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8003e82:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8003e84:	4b1c      	ldr	r3, [pc, #112]	; (8003ef8 <_tx_thread_time_slice+0x90>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d024      	beq.n	8003eda <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d120      	bne.n	8003eda <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	4a15      	ldr	r2, [pc, #84]	; (8003efc <_tx_thread_time_slice+0x94>)
 8003ea6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d013      	beq.n	8003eda <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d10d      	bne.n	8003eda <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	6a12      	ldr	r2, [r2, #32]
 8003ec6:	490e      	ldr	r1, [pc, #56]	; (8003f00 <_tx_thread_time_slice+0x98>)
 8003ec8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <_tx_thread_time_slice+0x9c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <_tx_thread_time_slice+0x98>)
 8003ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	; (8003f08 <_tx_thread_time_slice+0xa0>)
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	20000b10 	.word	0x20000b10
 8003ef8:	20001078 	.word	0x20001078
 8003efc:	20000ba4 	.word	0x20000ba4
 8003f00:	20000a74 	.word	0x20000a74
 8003f04:	20000b18 	.word	0x20000b18
 8003f08:	20000b14 	.word	0x20000b14

08003f0c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003f18:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1c:	617b      	str	r3, [r7, #20]
    return(posture);
 8003f1e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8003f20:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003f22:	b672      	cpsid	i
    return(int_posture);
 8003f24:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8003f26:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d10e      	bne.n	8003f4e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <_tx_thread_timeout+0x74>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3301      	adds	r3, #1
 8003f36:	4a12      	ldr	r2, [pc, #72]	; (8003f80 <_tx_thread_timeout+0x74>)
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f383 8810 	msr	PRIMASK, r3
}
 8003f44:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8003f46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f48:	f7ff fd76 	bl	8003a38 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8003f4c:	e013      	b.n	8003f76 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f52:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f5a:	61bb      	str	r3, [r7, #24]
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f383 8810 	msr	PRIMASK, r3
}
 8003f66:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	69b9      	ldr	r1, [r7, #24]
 8003f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f74:	4798      	blx	r3
}
 8003f76:	bf00      	nop
 8003f78:	3728      	adds	r7, #40	; 0x28
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	20000b0c 	.word	0x20000b0c

08003f84 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8003f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8e:	607b      	str	r3, [r7, #4]
    return(posture);
 8003f90:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8003f92:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8003f94:	b672      	cpsid	i
    return(int_posture);
 8003f96:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8003f98:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <_tx_timer_expiration_process+0x3c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	4a07      	ldr	r2, [pc, #28]	; (8003fc0 <_tx_timer_expiration_process+0x3c>)
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f383 8810 	msr	PRIMASK, r3
}
 8003fae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8003fb0:	4804      	ldr	r0, [pc, #16]	; (8003fc4 <_tx_timer_expiration_process+0x40>)
 8003fb2:	f7ff fd41 	bl	8003a38 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	20000b0c 	.word	0x20000b0c
 8003fc4:	20000bb0 	.word	0x20000bb0

08003fc8 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8003fc8:	b590      	push	{r4, r7, lr}
 8003fca:	b089      	sub	sp, #36	; 0x24
 8003fcc:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8003fce:	4b28      	ldr	r3, [pc, #160]	; (8004070 <_tx_timer_initialize+0xa8>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8003fd4:	4b27      	ldr	r3, [pc, #156]	; (8004074 <_tx_timer_initialize+0xac>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8003fda:	4b27      	ldr	r3, [pc, #156]	; (8004078 <_tx_timer_initialize+0xb0>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8003fe0:	4b26      	ldr	r3, [pc, #152]	; (800407c <_tx_timer_initialize+0xb4>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8003fe6:	4b26      	ldr	r3, [pc, #152]	; (8004080 <_tx_timer_initialize+0xb8>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8003fec:	2280      	movs	r2, #128	; 0x80
 8003fee:	2100      	movs	r1, #0
 8003ff0:	4824      	ldr	r0, [pc, #144]	; (8004084 <_tx_timer_initialize+0xbc>)
 8003ff2:	f000 fc3d 	bl	8004870 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8003ff6:	4b24      	ldr	r3, [pc, #144]	; (8004088 <_tx_timer_initialize+0xc0>)
 8003ff8:	4a22      	ldr	r2, [pc, #136]	; (8004084 <_tx_timer_initialize+0xbc>)
 8003ffa:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8003ffc:	4b23      	ldr	r3, [pc, #140]	; (800408c <_tx_timer_initialize+0xc4>)
 8003ffe:	4a21      	ldr	r2, [pc, #132]	; (8004084 <_tx_timer_initialize+0xbc>)
 8004000:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8004002:	4b23      	ldr	r3, [pc, #140]	; (8004090 <_tx_timer_initialize+0xc8>)
 8004004:	4a23      	ldr	r2, [pc, #140]	; (8004094 <_tx_timer_initialize+0xcc>)
 8004006:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8004008:	4b21      	ldr	r3, [pc, #132]	; (8004090 <_tx_timer_initialize+0xc8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3304      	adds	r3, #4
 800400e:	4a20      	ldr	r2, [pc, #128]	; (8004090 <_tx_timer_initialize+0xc8>)
 8004010:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8004012:	4b21      	ldr	r3, [pc, #132]	; (8004098 <_tx_timer_initialize+0xd0>)
 8004014:	4a21      	ldr	r2, [pc, #132]	; (800409c <_tx_timer_initialize+0xd4>)
 8004016:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <_tx_timer_initialize+0xd8>)
 800401a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800401e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <_tx_timer_initialize+0xdc>)
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8004026:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <_tx_timer_initialize+0xd0>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1d      	ldr	r2, [pc, #116]	; (80040a0 <_tx_timer_initialize+0xd8>)
 800402c:	6812      	ldr	r2, [r2, #0]
 800402e:	491d      	ldr	r1, [pc, #116]	; (80040a4 <_tx_timer_initialize+0xdc>)
 8004030:	6809      	ldr	r1, [r1, #0]
 8004032:	481c      	ldr	r0, [pc, #112]	; (80040a4 <_tx_timer_initialize+0xdc>)
 8004034:	6800      	ldr	r0, [r0, #0]
 8004036:	2400      	movs	r4, #0
 8004038:	9405      	str	r4, [sp, #20]
 800403a:	2400      	movs	r4, #0
 800403c:	9404      	str	r4, [sp, #16]
 800403e:	9003      	str	r0, [sp, #12]
 8004040:	9102      	str	r1, [sp, #8]
 8004042:	9201      	str	r2, [sp, #4]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	4b18      	ldr	r3, [pc, #96]	; (80040a8 <_tx_timer_initialize+0xe0>)
 8004048:	4a18      	ldr	r2, [pc, #96]	; (80040ac <_tx_timer_initialize+0xe4>)
 800404a:	4919      	ldr	r1, [pc, #100]	; (80040b0 <_tx_timer_initialize+0xe8>)
 800404c:	4819      	ldr	r0, [pc, #100]	; (80040b4 <_tx_timer_initialize+0xec>)
 800404e:	f7ff fb3b 	bl	80036c8 <_tx_thread_create>
 8004052:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800405a:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <_tx_timer_initialize+0xf0>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <_tx_timer_initialize+0xf4>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	bd90      	pop	{r4, r7, pc}
 800406e:	bf00      	nop
 8004070:	2000107c 	.word	0x2000107c
 8004074:	20000ba4 	.word	0x20000ba4
 8004078:	20001078 	.word	0x20001078
 800407c:	20000ba0 	.word	0x20000ba0
 8004080:	20000c60 	.word	0x20000c60
 8004084:	20000b20 	.word	0x20000b20
 8004088:	20000c64 	.word	0x20000c64
 800408c:	20000b1c 	.word	0x20000b1c
 8004090:	20000bac 	.word	0x20000bac
 8004094:	20000b9c 	.word	0x20000b9c
 8004098:	20001070 	.word	0x20001070
 800409c:	20000c70 	.word	0x20000c70
 80040a0:	20000c6c 	.word	0x20000c6c
 80040a4:	20000ba8 	.word	0x20000ba8
 80040a8:	4154494d 	.word	0x4154494d
 80040ac:	080041f5 	.word	0x080041f5
 80040b0:	0800526c 	.word	0x0800526c
 80040b4:	20000bb0 	.word	0x20000bb0
 80040b8:	20000c68 	.word	0x20000c68
 80040bc:	20001074 	.word	0x20001074

080040c0 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	; 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d04a      	beq.n	800416a <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040da:	d046      	beq.n	800416a <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d142      	bne.n	800416a <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d902      	bls.n	80040f0 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80040ea:	231f      	movs	r3, #31
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e002      	b.n	80040f6 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3b01      	subs	r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80040f6:	4b20      	ldr	r3, [pc, #128]	; (8004178 <_tx_timer_system_activate+0xb8>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8004102:	4b1e      	ldr	r3, [pc, #120]	; (800417c <_tx_timer_system_activate+0xbc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69fa      	ldr	r2, [r7, #28]
 8004108:	429a      	cmp	r2, r3
 800410a:	d30b      	bcc.n	8004124 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <_tx_timer_system_activate+0xbc>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	69fa      	ldr	r2, [r7, #28]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	109b      	asrs	r3, r3, #2
 8004116:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8004118:	4b19      	ldr	r3, [pc, #100]	; (8004180 <_tx_timer_system_activate+0xc0>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	e011      	b.n	8004164 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800416a:	bf00      	nop
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000b1c 	.word	0x20000b1c
 800417c:	20000bac 	.word	0x20000bac
 8004180:	20000c64 	.word	0x20000c64

08004184 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d026      	beq.n	80041e6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d108      	bne.n	80041b8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d117      	bne.n	80041e0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e013      	b.n	80041e0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d105      	bne.n	80041e0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	619a      	str	r2, [r3, #24]
    }
}
 80041e6:	bf00      	nop
 80041e8:	371c      	adds	r7, #28
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b098      	sub	sp, #96	; 0x60
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80041fc:	2300      	movs	r3, #0
 80041fe:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a73      	ldr	r2, [pc, #460]	; (80043d0 <_tx_timer_thread_entry+0x1dc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	f040 80de 	bne.w	80043c6 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800420a:	f3ef 8310 	mrs	r3, PRIMASK
 800420e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8004210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8004214:	b672      	cpsid	i
    return(int_posture);
 8004216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8004218:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800421a:	4b6e      	ldr	r3, [pc, #440]	; (80043d4 <_tx_timer_thread_entry+0x1e0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f107 020c 	add.w	r2, r7, #12
 800422e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8004230:	4b68      	ldr	r3, [pc, #416]	; (80043d4 <_tx_timer_thread_entry+0x1e0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8004238:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <_tx_timer_thread_entry+0x1e0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	3304      	adds	r3, #4
 800423e:	4a65      	ldr	r2, [pc, #404]	; (80043d4 <_tx_timer_thread_entry+0x1e0>)
 8004240:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8004242:	4b64      	ldr	r3, [pc, #400]	; (80043d4 <_tx_timer_thread_entry+0x1e0>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	4b64      	ldr	r3, [pc, #400]	; (80043d8 <_tx_timer_thread_entry+0x1e4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d103      	bne.n	8004256 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800424e:	4b63      	ldr	r3, [pc, #396]	; (80043dc <_tx_timer_thread_entry+0x1e8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a60      	ldr	r2, [pc, #384]	; (80043d4 <_tx_timer_thread_entry+0x1e0>)
 8004254:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8004256:	4b62      	ldr	r3, [pc, #392]	; (80043e0 <_tx_timer_thread_entry+0x1ec>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004268:	f3ef 8310 	mrs	r3, PRIMASK
 800426c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800426e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8004272:	b672      	cpsid	i
    return(int_posture);
 8004274:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8004276:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8004278:	e07f      	b.n	800437a <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8004288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800428a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800428c:	429a      	cmp	r2, r3
 800428e:	d102      	bne.n	8004296 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	e00e      	b.n	80042b4 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8004296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800429c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042a0:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80042a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a6:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80042a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042aa:	f107 020c 	add.w	r2, r7, #12
 80042ae:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80042b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b2:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80042b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b20      	cmp	r3, #32
 80042ba:	d911      	bls.n	80042e0 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80042bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80042c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c6:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80042cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ce:	f107 0208 	add.w	r2, r7, #8
 80042d2:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80042d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042d8:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80042da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	e01a      	b.n	8004316 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80042e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80042e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80042ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f2:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80042f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d009      	beq.n	8004310 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80042fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fe:	f107 0208 	add.w	r2, r7, #8
 8004302:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8004304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004308:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800430a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430c:	60bb      	str	r3, [r7, #8]
 800430e:	e002      	b.n	8004316 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004312:	2200      	movs	r2, #0
 8004314:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8004316:	4a33      	ldr	r2, [pc, #204]	; (80043e4 <_tx_timer_thread_entry+0x1f0>)
 8004318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	f383 8810 	msr	PRIMASK, r3
}
 8004326:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8004328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800432e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004330:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004332:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004334:	f3ef 8310 	mrs	r3, PRIMASK
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800433e:	b672      	cpsid	i
    return(int_posture);
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8004342:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8004344:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <_tx_timer_thread_entry+0x1f0>)
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800434e:	429a      	cmp	r2, r3
 8004350:	d105      	bne.n	800435e <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8004352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004354:	2200      	movs	r2, #0
 8004356:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8004358:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800435a:	f7ff feb1 	bl	80040c0 <_tx_timer_system_activate>
 800435e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004360:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	f383 8810 	msr	PRIMASK, r3
}
 8004368:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800436a:	f3ef 8310 	mrs	r3, PRIMASK
 800436e:	623b      	str	r3, [r7, #32]
    return(posture);
 8004370:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8004372:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004374:	b672      	cpsid	i
    return(int_posture);
 8004376:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8004378:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	f47f af7c 	bne.w	800427a <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8004382:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <_tx_timer_thread_entry+0x1ec>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d116      	bne.n	80043b8 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <_tx_timer_thread_entry+0x1f4>)
 800438c:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800438e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004390:	2203      	movs	r2, #3
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004396:	2201      	movs	r2, #1
 8004398:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800439a:	4b14      	ldr	r3, [pc, #80]	; (80043ec <_tx_timer_thread_entry+0x1f8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3301      	adds	r3, #1
 80043a0:	4a12      	ldr	r2, [pc, #72]	; (80043ec <_tx_timer_thread_entry+0x1f8>)
 80043a2:	6013      	str	r3, [r2, #0]
 80043a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043a6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f383 8810 	msr	PRIMASK, r3
}
 80043ae:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80043b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80043b2:	f7ff fc41 	bl	8003c38 <_tx_thread_system_suspend>
 80043b6:	e728      	b.n	800420a <_tx_timer_thread_entry+0x16>
 80043b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f383 8810 	msr	PRIMASK, r3
}
 80043c2:	bf00      	nop
            TX_DISABLE
 80043c4:	e721      	b.n	800420a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80043c6:	bf00      	nop
 80043c8:	3760      	adds	r7, #96	; 0x60
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	4154494d 	.word	0x4154494d
 80043d4:	20000b1c 	.word	0x20000b1c
 80043d8:	20000bac 	.word	0x20000bac
 80043dc:	20000c64 	.word	0x20000c64
 80043e0:	20000ba0 	.word	0x20000ba0
 80043e4:	20000c60 	.word	0x20000c60
 80043e8:	20000bb0 	.word	0x20000bb0
 80043ec:	20000b0c 	.word	0x20000b0c

080043f0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
 80043fc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80043fe:	2300      	movs	r3, #0
 8004400:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d102      	bne.n	800440e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8004408:	2302      	movs	r3, #2
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	e029      	b.n	8004462 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a2d      	ldr	r2, [pc, #180]	; (80044c8 <_txe_byte_allocate+0xd8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d002      	beq.n	800441e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8004418:	2302      	movs	r3, #2
 800441a:	627b      	str	r3, [r7, #36]	; 0x24
 800441c:	e021      	b.n	8004462 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8004424:	2303      	movs	r3, #3
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
 8004428:	e01b      	b.n	8004462 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d102      	bne.n	8004436 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8004430:	2305      	movs	r3, #5
 8004432:	627b      	str	r3, [r7, #36]	; 0x24
 8004434:	e015      	b.n	8004462 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	429a      	cmp	r2, r3
 800443e:	d902      	bls.n	8004446 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8004440:	2305      	movs	r3, #5
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
 8004444:	e00d      	b.n	8004462 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800444c:	f3ef 8305 	mrs	r3, IPSR
 8004450:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8004452:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004454:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <_txe_byte_allocate+0xdc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4313      	orrs	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800445e:	2304      	movs	r3, #4
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	2b00      	cmp	r3, #0
 8004466:	d108      	bne.n	800447a <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <_txe_byte_allocate+0xe0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <_txe_byte_allocate+0xe4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d101      	bne.n	800447a <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8004476:	2313      	movs	r3, #19
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	d114      	bne.n	80044aa <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004480:	f3ef 8305 	mrs	r3, IPSR
 8004484:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8004486:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8004488:	4b10      	ldr	r3, [pc, #64]	; (80044cc <_txe_byte_allocate+0xdc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4313      	orrs	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004492:	f3ef 8305 	mrs	r3, IPSR
 8004496:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8004498:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800449a:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <_txe_byte_allocate+0xdc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4313      	orrs	r3, r2
 80044a0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80044a4:	d201      	bcs.n	80044aa <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80044a6:	2313      	movs	r3, #19
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	f7fe fdb2 	bl	8003020 <_tx_byte_allocate>
 80044bc:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3728      	adds	r7, #40	; 0x28
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	42595445 	.word	0x42595445
 80044cc:	2000000c 	.word	0x2000000c
 80044d0:	20000b10 	.word	0x20000b10
 80044d4:	20000bb0 	.word	0x20000bb0

080044d8 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b092      	sub	sp, #72	; 0x48
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80044e6:	2300      	movs	r3, #0
 80044e8:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d102      	bne.n	80044f6 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80044f0:	2302      	movs	r3, #2
 80044f2:	647b      	str	r3, [r7, #68]	; 0x44
 80044f4:	e075      	b.n	80045e2 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80044f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044f8:	2b34      	cmp	r3, #52	; 0x34
 80044fa:	d002      	beq.n	8004502 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80044fc:	2302      	movs	r3, #2
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004500:	e06f      	b.n	80045e2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004502:	f3ef 8310 	mrs	r3, PRIMASK
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800450a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800450c:	b672      	cpsid	i
    return(int_posture);
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <_txe_byte_pool_create+0x128>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3301      	adds	r3, #1
 8004518:	4a39      	ldr	r2, [pc, #228]	; (8004600 <_txe_byte_pool_create+0x128>)
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	f383 8810 	msr	PRIMASK, r3
}
 8004526:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8004528:	4b36      	ldr	r3, [pc, #216]	; (8004604 <_txe_byte_pool_create+0x12c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800452e:	2300      	movs	r3, #0
 8004530:	643b      	str	r3, [r7, #64]	; 0x40
 8004532:	e009      	b.n	8004548 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004538:	429a      	cmp	r2, r3
 800453a:	d00b      	beq.n	8004554 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800453c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8004542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004544:	3301      	adds	r3, #1
 8004546:	643b      	str	r3, [r7, #64]	; 0x40
 8004548:	4b2f      	ldr	r3, [pc, #188]	; (8004608 <_txe_byte_pool_create+0x130>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800454e:	429a      	cmp	r2, r3
 8004550:	d3f0      	bcc.n	8004534 <_txe_byte_pool_create+0x5c>
 8004552:	e000      	b.n	8004556 <_txe_byte_pool_create+0x7e>
                break;
 8004554:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004556:	f3ef 8310 	mrs	r3, PRIMASK
 800455a:	623b      	str	r3, [r7, #32]
    return(posture);
 800455c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800455e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004560:	b672      	cpsid	i
    return(int_posture);
 8004562:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8004564:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8004566:	4b26      	ldr	r3, [pc, #152]	; (8004600 <_txe_byte_pool_create+0x128>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3b01      	subs	r3, #1
 800456c:	4a24      	ldr	r2, [pc, #144]	; (8004600 <_txe_byte_pool_create+0x128>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	f383 8810 	msr	PRIMASK, r3
}
 800457a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800457c:	f7ff fa22 	bl	80039c4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004584:	429a      	cmp	r2, r3
 8004586:	d102      	bne.n	800458e <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8004588:	2302      	movs	r3, #2
 800458a:	647b      	str	r3, [r7, #68]	; 0x44
 800458c:	e029      	b.n	80045e2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d102      	bne.n	800459a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8004594:	2303      	movs	r3, #3
 8004596:	647b      	str	r3, [r7, #68]	; 0x44
 8004598:	e023      	b.n	80045e2 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2b63      	cmp	r3, #99	; 0x63
 800459e:	d802      	bhi.n	80045a6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80045a0:	2305      	movs	r3, #5
 80045a2:	647b      	str	r3, [r7, #68]	; 0x44
 80045a4:	e01d      	b.n	80045e2 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80045a6:	4b19      	ldr	r3, [pc, #100]	; (800460c <_txe_byte_pool_create+0x134>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80045ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ae:	4a18      	ldr	r2, [pc, #96]	; (8004610 <_txe_byte_pool_create+0x138>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80045b4:	2313      	movs	r3, #19
 80045b6:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80045b8:	f3ef 8305 	mrs	r3, IPSR
 80045bc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80045be:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <_txe_byte_pool_create+0x13c>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80045ca:	f3ef 8305 	mrs	r3, IPSR
 80045ce:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80045d0:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <_txe_byte_pool_create+0x13c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80045dc:	d201      	bcs.n	80045e2 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80045de:	2313      	movs	r3, #19
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80045e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7fe fe58 	bl	80032a4 <_tx_byte_pool_create>
 80045f4:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80045f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3748      	adds	r7, #72	; 0x48
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20000b0c 	.word	0x20000b0c
 8004604:	20000a54 	.word	0x20000a54
 8004608:	20000a70 	.word	0x20000a70
 800460c:	20000b10 	.word	0x20000b10
 8004610:	20000bb0 	.word	0x20000bb0
 8004614:	2000000c 	.word	0x2000000c

08004618 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b09a      	sub	sp, #104	; 0x68
 800461c:	af06      	add	r7, sp, #24
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8004626:	2300      	movs	r3, #0
 8004628:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8004630:	230e      	movs	r3, #14
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004634:	e0bb      	b.n	80047ae <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8004636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004638:	2bb0      	cmp	r3, #176	; 0xb0
 800463a:	d002      	beq.n	8004642 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800463c:	230e      	movs	r3, #14
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004640:	e0b5      	b.n	80047ae <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004642:	f3ef 8310 	mrs	r3, PRIMASK
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800464c:	b672      	cpsid	i
    return(int_posture);
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8004650:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8004652:	4b64      	ldr	r3, [pc, #400]	; (80047e4 <_txe_thread_create+0x1cc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	4a62      	ldr	r2, [pc, #392]	; (80047e4 <_txe_thread_create+0x1cc>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	f383 8810 	msr	PRIMASK, r3
}
 8004666:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8004668:	2300      	movs	r3, #0
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800466c:	4b5e      	ldr	r3, [pc, #376]	; (80047e8 <_txe_thread_create+0x1d0>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8004672:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004674:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8004676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004678:	3b01      	subs	r3, #1
 800467a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800467c:	4413      	add	r3, r2
 800467e:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8004680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004682:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8004684:	2300      	movs	r3, #0
 8004686:	647b      	str	r3, [r7, #68]	; 0x44
 8004688:	e02b      	b.n	80046e2 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800468e:	429a      	cmp	r2, r3
 8004690:	d101      	bne.n	8004696 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8004692:	2301      	movs	r3, #1
 8004694:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8004696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004698:	2b01      	cmp	r3, #1
 800469a:	d028      	beq.n	80046ee <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d308      	bcc.n	80046b8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80046a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d203      	bcs.n	80046b8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80046b0:	2300      	movs	r3, #0
 80046b2:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80046b4:	2301      	movs	r3, #1
 80046b6:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80046b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046be:	429a      	cmp	r2, r3
 80046c0:	d308      	bcc.n	80046d4 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80046c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d203      	bcs.n	80046d4 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80046d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046da:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80046dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046de:	3301      	adds	r3, #1
 80046e0:	647b      	str	r3, [r7, #68]	; 0x44
 80046e2:	4b42      	ldr	r3, [pc, #264]	; (80047ec <_txe_thread_create+0x1d4>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d3ce      	bcc.n	800468a <_txe_thread_create+0x72>
 80046ec:	e000      	b.n	80046f0 <_txe_thread_create+0xd8>
                break;
 80046ee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80046f0:	f3ef 8310 	mrs	r3, PRIMASK
 80046f4:	61fb      	str	r3, [r7, #28]
    return(posture);
 80046f6:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80046f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80046fa:	b672      	cpsid	i
    return(int_posture);
 80046fc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8004700:	4b38      	ldr	r3, [pc, #224]	; (80047e4 <_txe_thread_create+0x1cc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3b01      	subs	r3, #1
 8004706:	4a37      	ldr	r2, [pc, #220]	; (80047e4 <_txe_thread_create+0x1cc>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f383 8810 	msr	PRIMASK, r3
}
 8004714:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8004716:	f7ff f955 	bl	80039c4 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471e:	429a      	cmp	r2, r3
 8004720:	d102      	bne.n	8004728 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8004722:	230e      	movs	r3, #14
 8004724:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004726:	e042      	b.n	80047ae <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8004728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800472a:	2b00      	cmp	r3, #0
 800472c:	d102      	bne.n	8004734 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800472e:	2303      	movs	r3, #3
 8004730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004732:	e03c      	b.n	80047ae <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d102      	bne.n	8004740 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800473a:	2303      	movs	r3, #3
 800473c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473e:	e036      	b.n	80047ae <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8004740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004742:	2bc7      	cmp	r3, #199	; 0xc7
 8004744:	d802      	bhi.n	800474c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8004746:	2305      	movs	r3, #5
 8004748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474a:	e030      	b.n	80047ae <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800474c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800474e:	2b1f      	cmp	r3, #31
 8004750:	d902      	bls.n	8004758 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8004752:	230f      	movs	r3, #15
 8004754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004756:	e02a      	b.n	80047ae <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8004758:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800475a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800475c:	429a      	cmp	r2, r3
 800475e:	d902      	bls.n	8004766 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8004760:	2318      	movs	r3, #24
 8004762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004764:	e023      	b.n	80047ae <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8004766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004768:	2b01      	cmp	r3, #1
 800476a:	d902      	bls.n	8004772 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800476c:	2310      	movs	r3, #16
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004770:	e01d      	b.n	80047ae <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8004772:	4b1f      	ldr	r3, [pc, #124]	; (80047f0 <_txe_thread_create+0x1d8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	4a1e      	ldr	r2, [pc, #120]	; (80047f4 <_txe_thread_create+0x1dc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d101      	bne.n	8004784 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8004780:	2313      	movs	r3, #19
 8004782:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004784:	f3ef 8305 	mrs	r3, IPSR
 8004788:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800478a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <_txe_thread_create+0x1e0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8004796:	f3ef 8305 	mrs	r3, IPSR
 800479a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800479c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800479e:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <_txe_thread_create+0x1e0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80047a8:	d201      	bcs.n	80047ae <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80047aa:	2313      	movs	r3, #19
 80047ac:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80047ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d112      	bne.n	80047da <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80047b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047b6:	9305      	str	r3, [sp, #20]
 80047b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ba:	9304      	str	r3, [sp, #16]
 80047bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047be:	9303      	str	r3, [sp, #12]
 80047c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047c2:	9302      	str	r3, [sp, #8]
 80047c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	68b9      	ldr	r1, [r7, #8]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f7fe ff78 	bl	80036c8 <_tx_thread_create>
 80047d8:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80047da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3750      	adds	r7, #80	; 0x50
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20000b0c 	.word	0x20000b0c
 80047e8:	20000afc 	.word	0x20000afc
 80047ec:	20000b04 	.word	0x20000b04
 80047f0:	20000b10 	.word	0x20000b10
 80047f4:	20000bb0 	.word	0x20000bb0
 80047f8:	2000000c 	.word	0x2000000c

080047fc <MX_NetXDuo_Init>:
  * @brief  Application NetXDuo Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_NetXDuo_Init(VOID *memory_ptr)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UINT ret = NX_SUCCESS;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN MX_NetXDuo_Init */

  /* USER CODE END MX_NetXDuo_Init */

  return ret;
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
	...

0800481c <__errno>:
 800481c:	4b01      	ldr	r3, [pc, #4]	; (8004824 <__errno+0x8>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000010 	.word	0x20000010

08004828 <__libc_init_array>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4d0d      	ldr	r5, [pc, #52]	; (8004860 <__libc_init_array+0x38>)
 800482c:	4c0d      	ldr	r4, [pc, #52]	; (8004864 <__libc_init_array+0x3c>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	2600      	movs	r6, #0
 8004834:	42a6      	cmp	r6, r4
 8004836:	d109      	bne.n	800484c <__libc_init_array+0x24>
 8004838:	4d0b      	ldr	r5, [pc, #44]	; (8004868 <__libc_init_array+0x40>)
 800483a:	4c0c      	ldr	r4, [pc, #48]	; (800486c <__libc_init_array+0x44>)
 800483c:	f000 fce6 	bl	800520c <_init>
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	2600      	movs	r6, #0
 8004846:	42a6      	cmp	r6, r4
 8004848:	d105      	bne.n	8004856 <__libc_init_array+0x2e>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004850:	4798      	blx	r3
 8004852:	3601      	adds	r6, #1
 8004854:	e7ee      	b.n	8004834 <__libc_init_array+0xc>
 8004856:	f855 3b04 	ldr.w	r3, [r5], #4
 800485a:	4798      	blx	r3
 800485c:	3601      	adds	r6, #1
 800485e:	e7f2      	b.n	8004846 <__libc_init_array+0x1e>
 8004860:	08005304 	.word	0x08005304
 8004864:	08005304 	.word	0x08005304
 8004868:	08005304 	.word	0x08005304
 800486c:	08005308 	.word	0x08005308

08004870 <memset>:
 8004870:	4402      	add	r2, r0
 8004872:	4603      	mov	r3, r0
 8004874:	4293      	cmp	r3, r2
 8004876:	d100      	bne.n	800487a <memset+0xa>
 8004878:	4770      	bx	lr
 800487a:	f803 1b01 	strb.w	r1, [r3], #1
 800487e:	e7f9      	b.n	8004874 <memset+0x4>

08004880 <_puts_r>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	460e      	mov	r6, r1
 8004884:	4605      	mov	r5, r0
 8004886:	b118      	cbz	r0, 8004890 <_puts_r+0x10>
 8004888:	6983      	ldr	r3, [r0, #24]
 800488a:	b90b      	cbnz	r3, 8004890 <_puts_r+0x10>
 800488c:	f000 fa48 	bl	8004d20 <__sinit>
 8004890:	69ab      	ldr	r3, [r5, #24]
 8004892:	68ac      	ldr	r4, [r5, #8]
 8004894:	b913      	cbnz	r3, 800489c <_puts_r+0x1c>
 8004896:	4628      	mov	r0, r5
 8004898:	f000 fa42 	bl	8004d20 <__sinit>
 800489c:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <_puts_r+0xd0>)
 800489e:	429c      	cmp	r4, r3
 80048a0:	d120      	bne.n	80048e4 <_puts_r+0x64>
 80048a2:	686c      	ldr	r4, [r5, #4]
 80048a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048a6:	07db      	lsls	r3, r3, #31
 80048a8:	d405      	bmi.n	80048b6 <_puts_r+0x36>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	0598      	lsls	r0, r3, #22
 80048ae:	d402      	bmi.n	80048b6 <_puts_r+0x36>
 80048b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048b2:	f000 fad3 	bl	8004e5c <__retarget_lock_acquire_recursive>
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	0719      	lsls	r1, r3, #28
 80048ba:	d51d      	bpl.n	80048f8 <_puts_r+0x78>
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	b1db      	cbz	r3, 80048f8 <_puts_r+0x78>
 80048c0:	3e01      	subs	r6, #1
 80048c2:	68a3      	ldr	r3, [r4, #8]
 80048c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048c8:	3b01      	subs	r3, #1
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	bb39      	cbnz	r1, 800491e <_puts_r+0x9e>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	da38      	bge.n	8004944 <_puts_r+0xc4>
 80048d2:	4622      	mov	r2, r4
 80048d4:	210a      	movs	r1, #10
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f848 	bl	800496c <__swbuf_r>
 80048dc:	3001      	adds	r0, #1
 80048de:	d011      	beq.n	8004904 <_puts_r+0x84>
 80048e0:	250a      	movs	r5, #10
 80048e2:	e011      	b.n	8004908 <_puts_r+0x88>
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <_puts_r+0xd4>)
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d101      	bne.n	80048ee <_puts_r+0x6e>
 80048ea:	68ac      	ldr	r4, [r5, #8]
 80048ec:	e7da      	b.n	80048a4 <_puts_r+0x24>
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <_puts_r+0xd8>)
 80048f0:	429c      	cmp	r4, r3
 80048f2:	bf08      	it	eq
 80048f4:	68ec      	ldreq	r4, [r5, #12]
 80048f6:	e7d5      	b.n	80048a4 <_puts_r+0x24>
 80048f8:	4621      	mov	r1, r4
 80048fa:	4628      	mov	r0, r5
 80048fc:	f000 f888 	bl	8004a10 <__swsetup_r>
 8004900:	2800      	cmp	r0, #0
 8004902:	d0dd      	beq.n	80048c0 <_puts_r+0x40>
 8004904:	f04f 35ff 	mov.w	r5, #4294967295
 8004908:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800490a:	07da      	lsls	r2, r3, #31
 800490c:	d405      	bmi.n	800491a <_puts_r+0x9a>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	059b      	lsls	r3, r3, #22
 8004912:	d402      	bmi.n	800491a <_puts_r+0x9a>
 8004914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004916:	f000 faa2 	bl	8004e5e <__retarget_lock_release_recursive>
 800491a:	4628      	mov	r0, r5
 800491c:	bd70      	pop	{r4, r5, r6, pc}
 800491e:	2b00      	cmp	r3, #0
 8004920:	da04      	bge.n	800492c <_puts_r+0xac>
 8004922:	69a2      	ldr	r2, [r4, #24]
 8004924:	429a      	cmp	r2, r3
 8004926:	dc06      	bgt.n	8004936 <_puts_r+0xb6>
 8004928:	290a      	cmp	r1, #10
 800492a:	d004      	beq.n	8004936 <_puts_r+0xb6>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	1c5a      	adds	r2, r3, #1
 8004930:	6022      	str	r2, [r4, #0]
 8004932:	7019      	strb	r1, [r3, #0]
 8004934:	e7c5      	b.n	80048c2 <_puts_r+0x42>
 8004936:	4622      	mov	r2, r4
 8004938:	4628      	mov	r0, r5
 800493a:	f000 f817 	bl	800496c <__swbuf_r>
 800493e:	3001      	adds	r0, #1
 8004940:	d1bf      	bne.n	80048c2 <_puts_r+0x42>
 8004942:	e7df      	b.n	8004904 <_puts_r+0x84>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	250a      	movs	r5, #10
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	6022      	str	r2, [r4, #0]
 800494c:	701d      	strb	r5, [r3, #0]
 800494e:	e7db      	b.n	8004908 <_puts_r+0x88>
 8004950:	080052bc 	.word	0x080052bc
 8004954:	080052dc 	.word	0x080052dc
 8004958:	0800529c 	.word	0x0800529c

0800495c <puts>:
 800495c:	4b02      	ldr	r3, [pc, #8]	; (8004968 <puts+0xc>)
 800495e:	4601      	mov	r1, r0
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	f7ff bf8d 	b.w	8004880 <_puts_r>
 8004966:	bf00      	nop
 8004968:	20000010 	.word	0x20000010

0800496c <__swbuf_r>:
 800496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496e:	460e      	mov	r6, r1
 8004970:	4614      	mov	r4, r2
 8004972:	4605      	mov	r5, r0
 8004974:	b118      	cbz	r0, 800497e <__swbuf_r+0x12>
 8004976:	6983      	ldr	r3, [r0, #24]
 8004978:	b90b      	cbnz	r3, 800497e <__swbuf_r+0x12>
 800497a:	f000 f9d1 	bl	8004d20 <__sinit>
 800497e:	4b21      	ldr	r3, [pc, #132]	; (8004a04 <__swbuf_r+0x98>)
 8004980:	429c      	cmp	r4, r3
 8004982:	d12b      	bne.n	80049dc <__swbuf_r+0x70>
 8004984:	686c      	ldr	r4, [r5, #4]
 8004986:	69a3      	ldr	r3, [r4, #24]
 8004988:	60a3      	str	r3, [r4, #8]
 800498a:	89a3      	ldrh	r3, [r4, #12]
 800498c:	071a      	lsls	r2, r3, #28
 800498e:	d52f      	bpl.n	80049f0 <__swbuf_r+0x84>
 8004990:	6923      	ldr	r3, [r4, #16]
 8004992:	b36b      	cbz	r3, 80049f0 <__swbuf_r+0x84>
 8004994:	6923      	ldr	r3, [r4, #16]
 8004996:	6820      	ldr	r0, [r4, #0]
 8004998:	1ac0      	subs	r0, r0, r3
 800499a:	6963      	ldr	r3, [r4, #20]
 800499c:	b2f6      	uxtb	r6, r6
 800499e:	4283      	cmp	r3, r0
 80049a0:	4637      	mov	r7, r6
 80049a2:	dc04      	bgt.n	80049ae <__swbuf_r+0x42>
 80049a4:	4621      	mov	r1, r4
 80049a6:	4628      	mov	r0, r5
 80049a8:	f000 f926 	bl	8004bf8 <_fflush_r>
 80049ac:	bb30      	cbnz	r0, 80049fc <__swbuf_r+0x90>
 80049ae:	68a3      	ldr	r3, [r4, #8]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	60a3      	str	r3, [r4, #8]
 80049b4:	6823      	ldr	r3, [r4, #0]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	6022      	str	r2, [r4, #0]
 80049ba:	701e      	strb	r6, [r3, #0]
 80049bc:	6963      	ldr	r3, [r4, #20]
 80049be:	3001      	adds	r0, #1
 80049c0:	4283      	cmp	r3, r0
 80049c2:	d004      	beq.n	80049ce <__swbuf_r+0x62>
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	07db      	lsls	r3, r3, #31
 80049c8:	d506      	bpl.n	80049d8 <__swbuf_r+0x6c>
 80049ca:	2e0a      	cmp	r6, #10
 80049cc:	d104      	bne.n	80049d8 <__swbuf_r+0x6c>
 80049ce:	4621      	mov	r1, r4
 80049d0:	4628      	mov	r0, r5
 80049d2:	f000 f911 	bl	8004bf8 <_fflush_r>
 80049d6:	b988      	cbnz	r0, 80049fc <__swbuf_r+0x90>
 80049d8:	4638      	mov	r0, r7
 80049da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <__swbuf_r+0x9c>)
 80049de:	429c      	cmp	r4, r3
 80049e0:	d101      	bne.n	80049e6 <__swbuf_r+0x7a>
 80049e2:	68ac      	ldr	r4, [r5, #8]
 80049e4:	e7cf      	b.n	8004986 <__swbuf_r+0x1a>
 80049e6:	4b09      	ldr	r3, [pc, #36]	; (8004a0c <__swbuf_r+0xa0>)
 80049e8:	429c      	cmp	r4, r3
 80049ea:	bf08      	it	eq
 80049ec:	68ec      	ldreq	r4, [r5, #12]
 80049ee:	e7ca      	b.n	8004986 <__swbuf_r+0x1a>
 80049f0:	4621      	mov	r1, r4
 80049f2:	4628      	mov	r0, r5
 80049f4:	f000 f80c 	bl	8004a10 <__swsetup_r>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d0cb      	beq.n	8004994 <__swbuf_r+0x28>
 80049fc:	f04f 37ff 	mov.w	r7, #4294967295
 8004a00:	e7ea      	b.n	80049d8 <__swbuf_r+0x6c>
 8004a02:	bf00      	nop
 8004a04:	080052bc 	.word	0x080052bc
 8004a08:	080052dc 	.word	0x080052dc
 8004a0c:	0800529c 	.word	0x0800529c

08004a10 <__swsetup_r>:
 8004a10:	4b32      	ldr	r3, [pc, #200]	; (8004adc <__swsetup_r+0xcc>)
 8004a12:	b570      	push	{r4, r5, r6, lr}
 8004a14:	681d      	ldr	r5, [r3, #0]
 8004a16:	4606      	mov	r6, r0
 8004a18:	460c      	mov	r4, r1
 8004a1a:	b125      	cbz	r5, 8004a26 <__swsetup_r+0x16>
 8004a1c:	69ab      	ldr	r3, [r5, #24]
 8004a1e:	b913      	cbnz	r3, 8004a26 <__swsetup_r+0x16>
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 f97d 	bl	8004d20 <__sinit>
 8004a26:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <__swsetup_r+0xd0>)
 8004a28:	429c      	cmp	r4, r3
 8004a2a:	d10f      	bne.n	8004a4c <__swsetup_r+0x3c>
 8004a2c:	686c      	ldr	r4, [r5, #4]
 8004a2e:	89a3      	ldrh	r3, [r4, #12]
 8004a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a34:	0719      	lsls	r1, r3, #28
 8004a36:	d42c      	bmi.n	8004a92 <__swsetup_r+0x82>
 8004a38:	06dd      	lsls	r5, r3, #27
 8004a3a:	d411      	bmi.n	8004a60 <__swsetup_r+0x50>
 8004a3c:	2309      	movs	r3, #9
 8004a3e:	6033      	str	r3, [r6, #0]
 8004a40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a44:	81a3      	strh	r3, [r4, #12]
 8004a46:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4a:	e03e      	b.n	8004aca <__swsetup_r+0xba>
 8004a4c:	4b25      	ldr	r3, [pc, #148]	; (8004ae4 <__swsetup_r+0xd4>)
 8004a4e:	429c      	cmp	r4, r3
 8004a50:	d101      	bne.n	8004a56 <__swsetup_r+0x46>
 8004a52:	68ac      	ldr	r4, [r5, #8]
 8004a54:	e7eb      	b.n	8004a2e <__swsetup_r+0x1e>
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <__swsetup_r+0xd8>)
 8004a58:	429c      	cmp	r4, r3
 8004a5a:	bf08      	it	eq
 8004a5c:	68ec      	ldreq	r4, [r5, #12]
 8004a5e:	e7e6      	b.n	8004a2e <__swsetup_r+0x1e>
 8004a60:	0758      	lsls	r0, r3, #29
 8004a62:	d512      	bpl.n	8004a8a <__swsetup_r+0x7a>
 8004a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a66:	b141      	cbz	r1, 8004a7a <__swsetup_r+0x6a>
 8004a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a6c:	4299      	cmp	r1, r3
 8004a6e:	d002      	beq.n	8004a76 <__swsetup_r+0x66>
 8004a70:	4630      	mov	r0, r6
 8004a72:	f000 fa59 	bl	8004f28 <_free_r>
 8004a76:	2300      	movs	r3, #0
 8004a78:	6363      	str	r3, [r4, #52]	; 0x34
 8004a7a:	89a3      	ldrh	r3, [r4, #12]
 8004a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a80:	81a3      	strh	r3, [r4, #12]
 8004a82:	2300      	movs	r3, #0
 8004a84:	6063      	str	r3, [r4, #4]
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	89a3      	ldrh	r3, [r4, #12]
 8004a8c:	f043 0308 	orr.w	r3, r3, #8
 8004a90:	81a3      	strh	r3, [r4, #12]
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	b94b      	cbnz	r3, 8004aaa <__swsetup_r+0x9a>
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa0:	d003      	beq.n	8004aaa <__swsetup_r+0x9a>
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	f000 f9ff 	bl	8004ea8 <__smakebuf_r>
 8004aaa:	89a0      	ldrh	r0, [r4, #12]
 8004aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ab0:	f010 0301 	ands.w	r3, r0, #1
 8004ab4:	d00a      	beq.n	8004acc <__swsetup_r+0xbc>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60a3      	str	r3, [r4, #8]
 8004aba:	6963      	ldr	r3, [r4, #20]
 8004abc:	425b      	negs	r3, r3
 8004abe:	61a3      	str	r3, [r4, #24]
 8004ac0:	6923      	ldr	r3, [r4, #16]
 8004ac2:	b943      	cbnz	r3, 8004ad6 <__swsetup_r+0xc6>
 8004ac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ac8:	d1ba      	bne.n	8004a40 <__swsetup_r+0x30>
 8004aca:	bd70      	pop	{r4, r5, r6, pc}
 8004acc:	0781      	lsls	r1, r0, #30
 8004ace:	bf58      	it	pl
 8004ad0:	6963      	ldrpl	r3, [r4, #20]
 8004ad2:	60a3      	str	r3, [r4, #8]
 8004ad4:	e7f4      	b.n	8004ac0 <__swsetup_r+0xb0>
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	e7f7      	b.n	8004aca <__swsetup_r+0xba>
 8004ada:	bf00      	nop
 8004adc:	20000010 	.word	0x20000010
 8004ae0:	080052bc 	.word	0x080052bc
 8004ae4:	080052dc 	.word	0x080052dc
 8004ae8:	0800529c 	.word	0x0800529c

08004aec <__sflush_r>:
 8004aec:	898a      	ldrh	r2, [r1, #12]
 8004aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af2:	4605      	mov	r5, r0
 8004af4:	0710      	lsls	r0, r2, #28
 8004af6:	460c      	mov	r4, r1
 8004af8:	d458      	bmi.n	8004bac <__sflush_r+0xc0>
 8004afa:	684b      	ldr	r3, [r1, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	dc05      	bgt.n	8004b0c <__sflush_r+0x20>
 8004b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	dc02      	bgt.n	8004b0c <__sflush_r+0x20>
 8004b06:	2000      	movs	r0, #0
 8004b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b0e:	2e00      	cmp	r6, #0
 8004b10:	d0f9      	beq.n	8004b06 <__sflush_r+0x1a>
 8004b12:	2300      	movs	r3, #0
 8004b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b18:	682f      	ldr	r7, [r5, #0]
 8004b1a:	602b      	str	r3, [r5, #0]
 8004b1c:	d032      	beq.n	8004b84 <__sflush_r+0x98>
 8004b1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b20:	89a3      	ldrh	r3, [r4, #12]
 8004b22:	075a      	lsls	r2, r3, #29
 8004b24:	d505      	bpl.n	8004b32 <__sflush_r+0x46>
 8004b26:	6863      	ldr	r3, [r4, #4]
 8004b28:	1ac0      	subs	r0, r0, r3
 8004b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b2c:	b10b      	cbz	r3, 8004b32 <__sflush_r+0x46>
 8004b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b30:	1ac0      	subs	r0, r0, r3
 8004b32:	2300      	movs	r3, #0
 8004b34:	4602      	mov	r2, r0
 8004b36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b38:	6a21      	ldr	r1, [r4, #32]
 8004b3a:	4628      	mov	r0, r5
 8004b3c:	47b0      	blx	r6
 8004b3e:	1c43      	adds	r3, r0, #1
 8004b40:	89a3      	ldrh	r3, [r4, #12]
 8004b42:	d106      	bne.n	8004b52 <__sflush_r+0x66>
 8004b44:	6829      	ldr	r1, [r5, #0]
 8004b46:	291d      	cmp	r1, #29
 8004b48:	d82c      	bhi.n	8004ba4 <__sflush_r+0xb8>
 8004b4a:	4a2a      	ldr	r2, [pc, #168]	; (8004bf4 <__sflush_r+0x108>)
 8004b4c:	40ca      	lsrs	r2, r1
 8004b4e:	07d6      	lsls	r6, r2, #31
 8004b50:	d528      	bpl.n	8004ba4 <__sflush_r+0xb8>
 8004b52:	2200      	movs	r2, #0
 8004b54:	6062      	str	r2, [r4, #4]
 8004b56:	04d9      	lsls	r1, r3, #19
 8004b58:	6922      	ldr	r2, [r4, #16]
 8004b5a:	6022      	str	r2, [r4, #0]
 8004b5c:	d504      	bpl.n	8004b68 <__sflush_r+0x7c>
 8004b5e:	1c42      	adds	r2, r0, #1
 8004b60:	d101      	bne.n	8004b66 <__sflush_r+0x7a>
 8004b62:	682b      	ldr	r3, [r5, #0]
 8004b64:	b903      	cbnz	r3, 8004b68 <__sflush_r+0x7c>
 8004b66:	6560      	str	r0, [r4, #84]	; 0x54
 8004b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b6a:	602f      	str	r7, [r5, #0]
 8004b6c:	2900      	cmp	r1, #0
 8004b6e:	d0ca      	beq.n	8004b06 <__sflush_r+0x1a>
 8004b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b74:	4299      	cmp	r1, r3
 8004b76:	d002      	beq.n	8004b7e <__sflush_r+0x92>
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 f9d5 	bl	8004f28 <_free_r>
 8004b7e:	2000      	movs	r0, #0
 8004b80:	6360      	str	r0, [r4, #52]	; 0x34
 8004b82:	e7c1      	b.n	8004b08 <__sflush_r+0x1c>
 8004b84:	6a21      	ldr	r1, [r4, #32]
 8004b86:	2301      	movs	r3, #1
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b0      	blx	r6
 8004b8c:	1c41      	adds	r1, r0, #1
 8004b8e:	d1c7      	bne.n	8004b20 <__sflush_r+0x34>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0c4      	beq.n	8004b20 <__sflush_r+0x34>
 8004b96:	2b1d      	cmp	r3, #29
 8004b98:	d001      	beq.n	8004b9e <__sflush_r+0xb2>
 8004b9a:	2b16      	cmp	r3, #22
 8004b9c:	d101      	bne.n	8004ba2 <__sflush_r+0xb6>
 8004b9e:	602f      	str	r7, [r5, #0]
 8004ba0:	e7b1      	b.n	8004b06 <__sflush_r+0x1a>
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	e7ad      	b.n	8004b08 <__sflush_r+0x1c>
 8004bac:	690f      	ldr	r7, [r1, #16]
 8004bae:	2f00      	cmp	r7, #0
 8004bb0:	d0a9      	beq.n	8004b06 <__sflush_r+0x1a>
 8004bb2:	0793      	lsls	r3, r2, #30
 8004bb4:	680e      	ldr	r6, [r1, #0]
 8004bb6:	bf08      	it	eq
 8004bb8:	694b      	ldreq	r3, [r1, #20]
 8004bba:	600f      	str	r7, [r1, #0]
 8004bbc:	bf18      	it	ne
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	eba6 0807 	sub.w	r8, r6, r7
 8004bc4:	608b      	str	r3, [r1, #8]
 8004bc6:	f1b8 0f00 	cmp.w	r8, #0
 8004bca:	dd9c      	ble.n	8004b06 <__sflush_r+0x1a>
 8004bcc:	6a21      	ldr	r1, [r4, #32]
 8004bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bd0:	4643      	mov	r3, r8
 8004bd2:	463a      	mov	r2, r7
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b0      	blx	r6
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	dc06      	bgt.n	8004bea <__sflush_r+0xfe>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	e78e      	b.n	8004b08 <__sflush_r+0x1c>
 8004bea:	4407      	add	r7, r0
 8004bec:	eba8 0800 	sub.w	r8, r8, r0
 8004bf0:	e7e9      	b.n	8004bc6 <__sflush_r+0xda>
 8004bf2:	bf00      	nop
 8004bf4:	20400001 	.word	0x20400001

08004bf8 <_fflush_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	690b      	ldr	r3, [r1, #16]
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	b913      	cbnz	r3, 8004c08 <_fflush_r+0x10>
 8004c02:	2500      	movs	r5, #0
 8004c04:	4628      	mov	r0, r5
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	b118      	cbz	r0, 8004c12 <_fflush_r+0x1a>
 8004c0a:	6983      	ldr	r3, [r0, #24]
 8004c0c:	b90b      	cbnz	r3, 8004c12 <_fflush_r+0x1a>
 8004c0e:	f000 f887 	bl	8004d20 <__sinit>
 8004c12:	4b14      	ldr	r3, [pc, #80]	; (8004c64 <_fflush_r+0x6c>)
 8004c14:	429c      	cmp	r4, r3
 8004c16:	d11b      	bne.n	8004c50 <_fflush_r+0x58>
 8004c18:	686c      	ldr	r4, [r5, #4]
 8004c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0ef      	beq.n	8004c02 <_fflush_r+0xa>
 8004c22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c24:	07d0      	lsls	r0, r2, #31
 8004c26:	d404      	bmi.n	8004c32 <_fflush_r+0x3a>
 8004c28:	0599      	lsls	r1, r3, #22
 8004c2a:	d402      	bmi.n	8004c32 <_fflush_r+0x3a>
 8004c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c2e:	f000 f915 	bl	8004e5c <__retarget_lock_acquire_recursive>
 8004c32:	4628      	mov	r0, r5
 8004c34:	4621      	mov	r1, r4
 8004c36:	f7ff ff59 	bl	8004aec <__sflush_r>
 8004c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c3c:	07da      	lsls	r2, r3, #31
 8004c3e:	4605      	mov	r5, r0
 8004c40:	d4e0      	bmi.n	8004c04 <_fflush_r+0xc>
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	059b      	lsls	r3, r3, #22
 8004c46:	d4dd      	bmi.n	8004c04 <_fflush_r+0xc>
 8004c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c4a:	f000 f908 	bl	8004e5e <__retarget_lock_release_recursive>
 8004c4e:	e7d9      	b.n	8004c04 <_fflush_r+0xc>
 8004c50:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <_fflush_r+0x70>)
 8004c52:	429c      	cmp	r4, r3
 8004c54:	d101      	bne.n	8004c5a <_fflush_r+0x62>
 8004c56:	68ac      	ldr	r4, [r5, #8]
 8004c58:	e7df      	b.n	8004c1a <_fflush_r+0x22>
 8004c5a:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <_fflush_r+0x74>)
 8004c5c:	429c      	cmp	r4, r3
 8004c5e:	bf08      	it	eq
 8004c60:	68ec      	ldreq	r4, [r5, #12]
 8004c62:	e7da      	b.n	8004c1a <_fflush_r+0x22>
 8004c64:	080052bc 	.word	0x080052bc
 8004c68:	080052dc 	.word	0x080052dc
 8004c6c:	0800529c 	.word	0x0800529c

08004c70 <std>:
 8004c70:	2300      	movs	r3, #0
 8004c72:	b510      	push	{r4, lr}
 8004c74:	4604      	mov	r4, r0
 8004c76:	e9c0 3300 	strd	r3, r3, [r0]
 8004c7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c7e:	6083      	str	r3, [r0, #8]
 8004c80:	8181      	strh	r1, [r0, #12]
 8004c82:	6643      	str	r3, [r0, #100]	; 0x64
 8004c84:	81c2      	strh	r2, [r0, #14]
 8004c86:	6183      	str	r3, [r0, #24]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	2208      	movs	r2, #8
 8004c8c:	305c      	adds	r0, #92	; 0x5c
 8004c8e:	f7ff fdef 	bl	8004870 <memset>
 8004c92:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <std+0x38>)
 8004c94:	6263      	str	r3, [r4, #36]	; 0x24
 8004c96:	4b05      	ldr	r3, [pc, #20]	; (8004cac <std+0x3c>)
 8004c98:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c9a:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <std+0x40>)
 8004c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <std+0x44>)
 8004ca0:	6224      	str	r4, [r4, #32]
 8004ca2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ca4:	bd10      	pop	{r4, pc}
 8004ca6:	bf00      	nop
 8004ca8:	0800509d 	.word	0x0800509d
 8004cac:	080050bf 	.word	0x080050bf
 8004cb0:	080050f7 	.word	0x080050f7
 8004cb4:	0800511b 	.word	0x0800511b

08004cb8 <_cleanup_r>:
 8004cb8:	4901      	ldr	r1, [pc, #4]	; (8004cc0 <_cleanup_r+0x8>)
 8004cba:	f000 b8af 	b.w	8004e1c <_fwalk_reent>
 8004cbe:	bf00      	nop
 8004cc0:	08004bf9 	.word	0x08004bf9

08004cc4 <__sfmoreglue>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	1e4a      	subs	r2, r1, #1
 8004cc8:	2568      	movs	r5, #104	; 0x68
 8004cca:	4355      	muls	r5, r2
 8004ccc:	460e      	mov	r6, r1
 8004cce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cd2:	f000 f979 	bl	8004fc8 <_malloc_r>
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	b140      	cbz	r0, 8004cec <__sfmoreglue+0x28>
 8004cda:	2100      	movs	r1, #0
 8004cdc:	e9c0 1600 	strd	r1, r6, [r0]
 8004ce0:	300c      	adds	r0, #12
 8004ce2:	60a0      	str	r0, [r4, #8]
 8004ce4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ce8:	f7ff fdc2 	bl	8004870 <memset>
 8004cec:	4620      	mov	r0, r4
 8004cee:	bd70      	pop	{r4, r5, r6, pc}

08004cf0 <__sfp_lock_acquire>:
 8004cf0:	4801      	ldr	r0, [pc, #4]	; (8004cf8 <__sfp_lock_acquire+0x8>)
 8004cf2:	f000 b8b3 	b.w	8004e5c <__retarget_lock_acquire_recursive>
 8004cf6:	bf00      	nop
 8004cf8:	20001088 	.word	0x20001088

08004cfc <__sfp_lock_release>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	; (8004d04 <__sfp_lock_release+0x8>)
 8004cfe:	f000 b8ae 	b.w	8004e5e <__retarget_lock_release_recursive>
 8004d02:	bf00      	nop
 8004d04:	20001088 	.word	0x20001088

08004d08 <__sinit_lock_acquire>:
 8004d08:	4801      	ldr	r0, [pc, #4]	; (8004d10 <__sinit_lock_acquire+0x8>)
 8004d0a:	f000 b8a7 	b.w	8004e5c <__retarget_lock_acquire_recursive>
 8004d0e:	bf00      	nop
 8004d10:	20001083 	.word	0x20001083

08004d14 <__sinit_lock_release>:
 8004d14:	4801      	ldr	r0, [pc, #4]	; (8004d1c <__sinit_lock_release+0x8>)
 8004d16:	f000 b8a2 	b.w	8004e5e <__retarget_lock_release_recursive>
 8004d1a:	bf00      	nop
 8004d1c:	20001083 	.word	0x20001083

08004d20 <__sinit>:
 8004d20:	b510      	push	{r4, lr}
 8004d22:	4604      	mov	r4, r0
 8004d24:	f7ff fff0 	bl	8004d08 <__sinit_lock_acquire>
 8004d28:	69a3      	ldr	r3, [r4, #24]
 8004d2a:	b11b      	cbz	r3, 8004d34 <__sinit+0x14>
 8004d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d30:	f7ff bff0 	b.w	8004d14 <__sinit_lock_release>
 8004d34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d38:	6523      	str	r3, [r4, #80]	; 0x50
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <__sinit+0x68>)
 8004d3c:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <__sinit+0x6c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d42:	42a3      	cmp	r3, r4
 8004d44:	bf04      	itt	eq
 8004d46:	2301      	moveq	r3, #1
 8004d48:	61a3      	streq	r3, [r4, #24]
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f000 f820 	bl	8004d90 <__sfp>
 8004d50:	6060      	str	r0, [r4, #4]
 8004d52:	4620      	mov	r0, r4
 8004d54:	f000 f81c 	bl	8004d90 <__sfp>
 8004d58:	60a0      	str	r0, [r4, #8]
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f000 f818 	bl	8004d90 <__sfp>
 8004d60:	2200      	movs	r2, #0
 8004d62:	60e0      	str	r0, [r4, #12]
 8004d64:	2104      	movs	r1, #4
 8004d66:	6860      	ldr	r0, [r4, #4]
 8004d68:	f7ff ff82 	bl	8004c70 <std>
 8004d6c:	68a0      	ldr	r0, [r4, #8]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	2109      	movs	r1, #9
 8004d72:	f7ff ff7d 	bl	8004c70 <std>
 8004d76:	68e0      	ldr	r0, [r4, #12]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	2112      	movs	r1, #18
 8004d7c:	f7ff ff78 	bl	8004c70 <std>
 8004d80:	2301      	movs	r3, #1
 8004d82:	61a3      	str	r3, [r4, #24]
 8004d84:	e7d2      	b.n	8004d2c <__sinit+0xc>
 8004d86:	bf00      	nop
 8004d88:	08005298 	.word	0x08005298
 8004d8c:	08004cb9 	.word	0x08004cb9

08004d90 <__sfp>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	4607      	mov	r7, r0
 8004d94:	f7ff ffac 	bl	8004cf0 <__sfp_lock_acquire>
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <__sfp+0x84>)
 8004d9a:	681e      	ldr	r6, [r3, #0]
 8004d9c:	69b3      	ldr	r3, [r6, #24]
 8004d9e:	b913      	cbnz	r3, 8004da6 <__sfp+0x16>
 8004da0:	4630      	mov	r0, r6
 8004da2:	f7ff ffbd 	bl	8004d20 <__sinit>
 8004da6:	3648      	adds	r6, #72	; 0x48
 8004da8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	d503      	bpl.n	8004db8 <__sfp+0x28>
 8004db0:	6833      	ldr	r3, [r6, #0]
 8004db2:	b30b      	cbz	r3, 8004df8 <__sfp+0x68>
 8004db4:	6836      	ldr	r6, [r6, #0]
 8004db6:	e7f7      	b.n	8004da8 <__sfp+0x18>
 8004db8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004dbc:	b9d5      	cbnz	r5, 8004df4 <__sfp+0x64>
 8004dbe:	4b16      	ldr	r3, [pc, #88]	; (8004e18 <__sfp+0x88>)
 8004dc0:	60e3      	str	r3, [r4, #12]
 8004dc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dc6:	6665      	str	r5, [r4, #100]	; 0x64
 8004dc8:	f000 f847 	bl	8004e5a <__retarget_lock_init_recursive>
 8004dcc:	f7ff ff96 	bl	8004cfc <__sfp_lock_release>
 8004dd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004dd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004dd8:	6025      	str	r5, [r4, #0]
 8004dda:	61a5      	str	r5, [r4, #24]
 8004ddc:	2208      	movs	r2, #8
 8004dde:	4629      	mov	r1, r5
 8004de0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004de4:	f7ff fd44 	bl	8004870 <memset>
 8004de8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004dec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004df0:	4620      	mov	r0, r4
 8004df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df4:	3468      	adds	r4, #104	; 0x68
 8004df6:	e7d9      	b.n	8004dac <__sfp+0x1c>
 8004df8:	2104      	movs	r1, #4
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	f7ff ff62 	bl	8004cc4 <__sfmoreglue>
 8004e00:	4604      	mov	r4, r0
 8004e02:	6030      	str	r0, [r6, #0]
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d1d5      	bne.n	8004db4 <__sfp+0x24>
 8004e08:	f7ff ff78 	bl	8004cfc <__sfp_lock_release>
 8004e0c:	230c      	movs	r3, #12
 8004e0e:	603b      	str	r3, [r7, #0]
 8004e10:	e7ee      	b.n	8004df0 <__sfp+0x60>
 8004e12:	bf00      	nop
 8004e14:	08005298 	.word	0x08005298
 8004e18:	ffff0001 	.word	0xffff0001

08004e1c <_fwalk_reent>:
 8004e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e20:	4606      	mov	r6, r0
 8004e22:	4688      	mov	r8, r1
 8004e24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e28:	2700      	movs	r7, #0
 8004e2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e2e:	f1b9 0901 	subs.w	r9, r9, #1
 8004e32:	d505      	bpl.n	8004e40 <_fwalk_reent+0x24>
 8004e34:	6824      	ldr	r4, [r4, #0]
 8004e36:	2c00      	cmp	r4, #0
 8004e38:	d1f7      	bne.n	8004e2a <_fwalk_reent+0xe>
 8004e3a:	4638      	mov	r0, r7
 8004e3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e40:	89ab      	ldrh	r3, [r5, #12]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d907      	bls.n	8004e56 <_fwalk_reent+0x3a>
 8004e46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	d003      	beq.n	8004e56 <_fwalk_reent+0x3a>
 8004e4e:	4629      	mov	r1, r5
 8004e50:	4630      	mov	r0, r6
 8004e52:	47c0      	blx	r8
 8004e54:	4307      	orrs	r7, r0
 8004e56:	3568      	adds	r5, #104	; 0x68
 8004e58:	e7e9      	b.n	8004e2e <_fwalk_reent+0x12>

08004e5a <__retarget_lock_init_recursive>:
 8004e5a:	4770      	bx	lr

08004e5c <__retarget_lock_acquire_recursive>:
 8004e5c:	4770      	bx	lr

08004e5e <__retarget_lock_release_recursive>:
 8004e5e:	4770      	bx	lr

08004e60 <__swhatbuf_r>:
 8004e60:	b570      	push	{r4, r5, r6, lr}
 8004e62:	460e      	mov	r6, r1
 8004e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	b096      	sub	sp, #88	; 0x58
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461d      	mov	r5, r3
 8004e70:	da07      	bge.n	8004e82 <__swhatbuf_r+0x22>
 8004e72:	2300      	movs	r3, #0
 8004e74:	602b      	str	r3, [r5, #0]
 8004e76:	89b3      	ldrh	r3, [r6, #12]
 8004e78:	061a      	lsls	r2, r3, #24
 8004e7a:	d410      	bmi.n	8004e9e <__swhatbuf_r+0x3e>
 8004e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e80:	e00e      	b.n	8004ea0 <__swhatbuf_r+0x40>
 8004e82:	466a      	mov	r2, sp
 8004e84:	f000 f970 	bl	8005168 <_fstat_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	dbf2      	blt.n	8004e72 <__swhatbuf_r+0x12>
 8004e8c:	9a01      	ldr	r2, [sp, #4]
 8004e8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e96:	425a      	negs	r2, r3
 8004e98:	415a      	adcs	r2, r3
 8004e9a:	602a      	str	r2, [r5, #0]
 8004e9c:	e7ee      	b.n	8004e7c <__swhatbuf_r+0x1c>
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	2000      	movs	r0, #0
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	b016      	add	sp, #88	; 0x58
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}

08004ea8 <__smakebuf_r>:
 8004ea8:	898b      	ldrh	r3, [r1, #12]
 8004eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004eac:	079d      	lsls	r5, r3, #30
 8004eae:	4606      	mov	r6, r0
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	d507      	bpl.n	8004ec4 <__smakebuf_r+0x1c>
 8004eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004eb8:	6023      	str	r3, [r4, #0]
 8004eba:	6123      	str	r3, [r4, #16]
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	6163      	str	r3, [r4, #20]
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	ab01      	add	r3, sp, #4
 8004ec6:	466a      	mov	r2, sp
 8004ec8:	f7ff ffca 	bl	8004e60 <__swhatbuf_r>
 8004ecc:	9900      	ldr	r1, [sp, #0]
 8004ece:	4605      	mov	r5, r0
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f000 f879 	bl	8004fc8 <_malloc_r>
 8004ed6:	b948      	cbnz	r0, 8004eec <__smakebuf_r+0x44>
 8004ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004edc:	059a      	lsls	r2, r3, #22
 8004ede:	d4ef      	bmi.n	8004ec0 <__smakebuf_r+0x18>
 8004ee0:	f023 0303 	bic.w	r3, r3, #3
 8004ee4:	f043 0302 	orr.w	r3, r3, #2
 8004ee8:	81a3      	strh	r3, [r4, #12]
 8004eea:	e7e3      	b.n	8004eb4 <__smakebuf_r+0xc>
 8004eec:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <__smakebuf_r+0x7c>)
 8004eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ef0:	89a3      	ldrh	r3, [r4, #12]
 8004ef2:	6020      	str	r0, [r4, #0]
 8004ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ef8:	81a3      	strh	r3, [r4, #12]
 8004efa:	9b00      	ldr	r3, [sp, #0]
 8004efc:	6163      	str	r3, [r4, #20]
 8004efe:	9b01      	ldr	r3, [sp, #4]
 8004f00:	6120      	str	r0, [r4, #16]
 8004f02:	b15b      	cbz	r3, 8004f1c <__smakebuf_r+0x74>
 8004f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f000 f93f 	bl	800518c <_isatty_r>
 8004f0e:	b128      	cbz	r0, 8004f1c <__smakebuf_r+0x74>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	f043 0301 	orr.w	r3, r3, #1
 8004f1a:	81a3      	strh	r3, [r4, #12]
 8004f1c:	89a0      	ldrh	r0, [r4, #12]
 8004f1e:	4305      	orrs	r5, r0
 8004f20:	81a5      	strh	r5, [r4, #12]
 8004f22:	e7cd      	b.n	8004ec0 <__smakebuf_r+0x18>
 8004f24:	08004cb9 	.word	0x08004cb9

08004f28 <_free_r>:
 8004f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f2a:	2900      	cmp	r1, #0
 8004f2c:	d048      	beq.n	8004fc0 <_free_r+0x98>
 8004f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f32:	9001      	str	r0, [sp, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f1a1 0404 	sub.w	r4, r1, #4
 8004f3a:	bfb8      	it	lt
 8004f3c:	18e4      	addlt	r4, r4, r3
 8004f3e:	f000 f947 	bl	80051d0 <__malloc_lock>
 8004f42:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <_free_r+0x9c>)
 8004f44:	9801      	ldr	r0, [sp, #4]
 8004f46:	6813      	ldr	r3, [r2, #0]
 8004f48:	4615      	mov	r5, r2
 8004f4a:	b933      	cbnz	r3, 8004f5a <_free_r+0x32>
 8004f4c:	6063      	str	r3, [r4, #4]
 8004f4e:	6014      	str	r4, [r2, #0]
 8004f50:	b003      	add	sp, #12
 8004f52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f56:	f000 b941 	b.w	80051dc <__malloc_unlock>
 8004f5a:	42a3      	cmp	r3, r4
 8004f5c:	d90b      	bls.n	8004f76 <_free_r+0x4e>
 8004f5e:	6821      	ldr	r1, [r4, #0]
 8004f60:	1862      	adds	r2, r4, r1
 8004f62:	4293      	cmp	r3, r2
 8004f64:	bf04      	itt	eq
 8004f66:	681a      	ldreq	r2, [r3, #0]
 8004f68:	685b      	ldreq	r3, [r3, #4]
 8004f6a:	6063      	str	r3, [r4, #4]
 8004f6c:	bf04      	itt	eq
 8004f6e:	1852      	addeq	r2, r2, r1
 8004f70:	6022      	streq	r2, [r4, #0]
 8004f72:	602c      	str	r4, [r5, #0]
 8004f74:	e7ec      	b.n	8004f50 <_free_r+0x28>
 8004f76:	461a      	mov	r2, r3
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	b10b      	cbz	r3, 8004f80 <_free_r+0x58>
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	d9fa      	bls.n	8004f76 <_free_r+0x4e>
 8004f80:	6811      	ldr	r1, [r2, #0]
 8004f82:	1855      	adds	r5, r2, r1
 8004f84:	42a5      	cmp	r5, r4
 8004f86:	d10b      	bne.n	8004fa0 <_free_r+0x78>
 8004f88:	6824      	ldr	r4, [r4, #0]
 8004f8a:	4421      	add	r1, r4
 8004f8c:	1854      	adds	r4, r2, r1
 8004f8e:	42a3      	cmp	r3, r4
 8004f90:	6011      	str	r1, [r2, #0]
 8004f92:	d1dd      	bne.n	8004f50 <_free_r+0x28>
 8004f94:	681c      	ldr	r4, [r3, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	6053      	str	r3, [r2, #4]
 8004f9a:	4421      	add	r1, r4
 8004f9c:	6011      	str	r1, [r2, #0]
 8004f9e:	e7d7      	b.n	8004f50 <_free_r+0x28>
 8004fa0:	d902      	bls.n	8004fa8 <_free_r+0x80>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	6003      	str	r3, [r0, #0]
 8004fa6:	e7d3      	b.n	8004f50 <_free_r+0x28>
 8004fa8:	6825      	ldr	r5, [r4, #0]
 8004faa:	1961      	adds	r1, r4, r5
 8004fac:	428b      	cmp	r3, r1
 8004fae:	bf04      	itt	eq
 8004fb0:	6819      	ldreq	r1, [r3, #0]
 8004fb2:	685b      	ldreq	r3, [r3, #4]
 8004fb4:	6063      	str	r3, [r4, #4]
 8004fb6:	bf04      	itt	eq
 8004fb8:	1949      	addeq	r1, r1, r5
 8004fba:	6021      	streq	r1, [r4, #0]
 8004fbc:	6054      	str	r4, [r2, #4]
 8004fbe:	e7c7      	b.n	8004f50 <_free_r+0x28>
 8004fc0:	b003      	add	sp, #12
 8004fc2:	bd30      	pop	{r4, r5, pc}
 8004fc4:	200008fc 	.word	0x200008fc

08004fc8 <_malloc_r>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	1ccd      	adds	r5, r1, #3
 8004fcc:	f025 0503 	bic.w	r5, r5, #3
 8004fd0:	3508      	adds	r5, #8
 8004fd2:	2d0c      	cmp	r5, #12
 8004fd4:	bf38      	it	cc
 8004fd6:	250c      	movcc	r5, #12
 8004fd8:	2d00      	cmp	r5, #0
 8004fda:	4606      	mov	r6, r0
 8004fdc:	db01      	blt.n	8004fe2 <_malloc_r+0x1a>
 8004fde:	42a9      	cmp	r1, r5
 8004fe0:	d903      	bls.n	8004fea <_malloc_r+0x22>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	6033      	str	r3, [r6, #0]
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fea:	f000 f8f1 	bl	80051d0 <__malloc_lock>
 8004fee:	4921      	ldr	r1, [pc, #132]	; (8005074 <_malloc_r+0xac>)
 8004ff0:	680a      	ldr	r2, [r1, #0]
 8004ff2:	4614      	mov	r4, r2
 8004ff4:	b99c      	cbnz	r4, 800501e <_malloc_r+0x56>
 8004ff6:	4f20      	ldr	r7, [pc, #128]	; (8005078 <_malloc_r+0xb0>)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	b923      	cbnz	r3, 8005006 <_malloc_r+0x3e>
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4630      	mov	r0, r6
 8005000:	f000 f83c 	bl	800507c <_sbrk_r>
 8005004:	6038      	str	r0, [r7, #0]
 8005006:	4629      	mov	r1, r5
 8005008:	4630      	mov	r0, r6
 800500a:	f000 f837 	bl	800507c <_sbrk_r>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	d123      	bne.n	800505a <_malloc_r+0x92>
 8005012:	230c      	movs	r3, #12
 8005014:	6033      	str	r3, [r6, #0]
 8005016:	4630      	mov	r0, r6
 8005018:	f000 f8e0 	bl	80051dc <__malloc_unlock>
 800501c:	e7e3      	b.n	8004fe6 <_malloc_r+0x1e>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	1b5b      	subs	r3, r3, r5
 8005022:	d417      	bmi.n	8005054 <_malloc_r+0x8c>
 8005024:	2b0b      	cmp	r3, #11
 8005026:	d903      	bls.n	8005030 <_malloc_r+0x68>
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	441c      	add	r4, r3
 800502c:	6025      	str	r5, [r4, #0]
 800502e:	e004      	b.n	800503a <_malloc_r+0x72>
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	42a2      	cmp	r2, r4
 8005034:	bf0c      	ite	eq
 8005036:	600b      	streq	r3, [r1, #0]
 8005038:	6053      	strne	r3, [r2, #4]
 800503a:	4630      	mov	r0, r6
 800503c:	f000 f8ce 	bl	80051dc <__malloc_unlock>
 8005040:	f104 000b 	add.w	r0, r4, #11
 8005044:	1d23      	adds	r3, r4, #4
 8005046:	f020 0007 	bic.w	r0, r0, #7
 800504a:	1ac2      	subs	r2, r0, r3
 800504c:	d0cc      	beq.n	8004fe8 <_malloc_r+0x20>
 800504e:	1a1b      	subs	r3, r3, r0
 8005050:	50a3      	str	r3, [r4, r2]
 8005052:	e7c9      	b.n	8004fe8 <_malloc_r+0x20>
 8005054:	4622      	mov	r2, r4
 8005056:	6864      	ldr	r4, [r4, #4]
 8005058:	e7cc      	b.n	8004ff4 <_malloc_r+0x2c>
 800505a:	1cc4      	adds	r4, r0, #3
 800505c:	f024 0403 	bic.w	r4, r4, #3
 8005060:	42a0      	cmp	r0, r4
 8005062:	d0e3      	beq.n	800502c <_malloc_r+0x64>
 8005064:	1a21      	subs	r1, r4, r0
 8005066:	4630      	mov	r0, r6
 8005068:	f000 f808 	bl	800507c <_sbrk_r>
 800506c:	3001      	adds	r0, #1
 800506e:	d1dd      	bne.n	800502c <_malloc_r+0x64>
 8005070:	e7cf      	b.n	8005012 <_malloc_r+0x4a>
 8005072:	bf00      	nop
 8005074:	200008fc 	.word	0x200008fc
 8005078:	20000900 	.word	0x20000900

0800507c <_sbrk_r>:
 800507c:	b538      	push	{r3, r4, r5, lr}
 800507e:	4d06      	ldr	r5, [pc, #24]	; (8005098 <_sbrk_r+0x1c>)
 8005080:	2300      	movs	r3, #0
 8005082:	4604      	mov	r4, r0
 8005084:	4608      	mov	r0, r1
 8005086:	602b      	str	r3, [r5, #0]
 8005088:	f7fb fea4 	bl	8000dd4 <_sbrk>
 800508c:	1c43      	adds	r3, r0, #1
 800508e:	d102      	bne.n	8005096 <_sbrk_r+0x1a>
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	b103      	cbz	r3, 8005096 <_sbrk_r+0x1a>
 8005094:	6023      	str	r3, [r4, #0]
 8005096:	bd38      	pop	{r3, r4, r5, pc}
 8005098:	2000108c 	.word	0x2000108c

0800509c <__sread>:
 800509c:	b510      	push	{r4, lr}
 800509e:	460c      	mov	r4, r1
 80050a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a4:	f000 f8a0 	bl	80051e8 <_read_r>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	bfab      	itete	ge
 80050ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050ae:	89a3      	ldrhlt	r3, [r4, #12]
 80050b0:	181b      	addge	r3, r3, r0
 80050b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050b6:	bfac      	ite	ge
 80050b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80050ba:	81a3      	strhlt	r3, [r4, #12]
 80050bc:	bd10      	pop	{r4, pc}

080050be <__swrite>:
 80050be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c2:	461f      	mov	r7, r3
 80050c4:	898b      	ldrh	r3, [r1, #12]
 80050c6:	05db      	lsls	r3, r3, #23
 80050c8:	4605      	mov	r5, r0
 80050ca:	460c      	mov	r4, r1
 80050cc:	4616      	mov	r6, r2
 80050ce:	d505      	bpl.n	80050dc <__swrite+0x1e>
 80050d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d4:	2302      	movs	r3, #2
 80050d6:	2200      	movs	r2, #0
 80050d8:	f000 f868 	bl	80051ac <_lseek_r>
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	4632      	mov	r2, r6
 80050ea:	463b      	mov	r3, r7
 80050ec:	4628      	mov	r0, r5
 80050ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050f2:	f000 b817 	b.w	8005124 <_write_r>

080050f6 <__sseek>:
 80050f6:	b510      	push	{r4, lr}
 80050f8:	460c      	mov	r4, r1
 80050fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050fe:	f000 f855 	bl	80051ac <_lseek_r>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	bf15      	itete	ne
 8005108:	6560      	strne	r0, [r4, #84]	; 0x54
 800510a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800510e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005112:	81a3      	strheq	r3, [r4, #12]
 8005114:	bf18      	it	ne
 8005116:	81a3      	strhne	r3, [r4, #12]
 8005118:	bd10      	pop	{r4, pc}

0800511a <__sclose>:
 800511a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511e:	f000 b813 	b.w	8005148 <_close_r>
	...

08005124 <_write_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d07      	ldr	r5, [pc, #28]	; (8005144 <_write_r+0x20>)
 8005128:	4604      	mov	r4, r0
 800512a:	4608      	mov	r0, r1
 800512c:	4611      	mov	r1, r2
 800512e:	2200      	movs	r2, #0
 8005130:	602a      	str	r2, [r5, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	f7fb fba8 	bl	8000888 <_write>
 8005138:	1c43      	adds	r3, r0, #1
 800513a:	d102      	bne.n	8005142 <_write_r+0x1e>
 800513c:	682b      	ldr	r3, [r5, #0]
 800513e:	b103      	cbz	r3, 8005142 <_write_r+0x1e>
 8005140:	6023      	str	r3, [r4, #0]
 8005142:	bd38      	pop	{r3, r4, r5, pc}
 8005144:	2000108c 	.word	0x2000108c

08005148 <_close_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d06      	ldr	r5, [pc, #24]	; (8005164 <_close_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fb fe09 	bl	8000d6a <_close>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_close_r+0x1a>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_close_r+0x1a>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	2000108c 	.word	0x2000108c

08005168 <_fstat_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d07      	ldr	r5, [pc, #28]	; (8005188 <_fstat_r+0x20>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	f7fb fe04 	bl	8000d82 <_fstat>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d102      	bne.n	8005184 <_fstat_r+0x1c>
 800517e:	682b      	ldr	r3, [r5, #0]
 8005180:	b103      	cbz	r3, 8005184 <_fstat_r+0x1c>
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	2000108c 	.word	0x2000108c

0800518c <_isatty_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4d06      	ldr	r5, [pc, #24]	; (80051a8 <_isatty_r+0x1c>)
 8005190:	2300      	movs	r3, #0
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	602b      	str	r3, [r5, #0]
 8005198:	f7fb fe03 	bl	8000da2 <_isatty>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_isatty_r+0x1a>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_isatty_r+0x1a>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	2000108c 	.word	0x2000108c

080051ac <_lseek_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4d07      	ldr	r5, [pc, #28]	; (80051cc <_lseek_r+0x20>)
 80051b0:	4604      	mov	r4, r0
 80051b2:	4608      	mov	r0, r1
 80051b4:	4611      	mov	r1, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	602a      	str	r2, [r5, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7fb fdfc 	bl	8000db8 <_lseek>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_lseek_r+0x1e>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_lseek_r+0x1e>
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	2000108c 	.word	0x2000108c

080051d0 <__malloc_lock>:
 80051d0:	4801      	ldr	r0, [pc, #4]	; (80051d8 <__malloc_lock+0x8>)
 80051d2:	f7ff be43 	b.w	8004e5c <__retarget_lock_acquire_recursive>
 80051d6:	bf00      	nop
 80051d8:	20001084 	.word	0x20001084

080051dc <__malloc_unlock>:
 80051dc:	4801      	ldr	r0, [pc, #4]	; (80051e4 <__malloc_unlock+0x8>)
 80051de:	f7ff be3e 	b.w	8004e5e <__retarget_lock_release_recursive>
 80051e2:	bf00      	nop
 80051e4:	20001084 	.word	0x20001084

080051e8 <_read_r>:
 80051e8:	b538      	push	{r3, r4, r5, lr}
 80051ea:	4d07      	ldr	r5, [pc, #28]	; (8005208 <_read_r+0x20>)
 80051ec:	4604      	mov	r4, r0
 80051ee:	4608      	mov	r0, r1
 80051f0:	4611      	mov	r1, r2
 80051f2:	2200      	movs	r2, #0
 80051f4:	602a      	str	r2, [r5, #0]
 80051f6:	461a      	mov	r2, r3
 80051f8:	f7fb fd9a 	bl	8000d30 <_read>
 80051fc:	1c43      	adds	r3, r0, #1
 80051fe:	d102      	bne.n	8005206 <_read_r+0x1e>
 8005200:	682b      	ldr	r3, [r5, #0]
 8005202:	b103      	cbz	r3, 8005206 <_read_r+0x1e>
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	bd38      	pop	{r3, r4, r5, pc}
 8005208:	2000108c 	.word	0x2000108c

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
